
HC-SR04.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000047a4  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000064  08004944  08004944  00005944  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080049a8  080049a8  0000605c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  080049a8  080049a8  000059a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080049b0  080049b0  0000605c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080049b0  080049b0  000059b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080049b4  080049b4  000059b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  080049b8  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002bc  2000005c  08004a14  0000605c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000318  08004a14  00006318  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000605c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001065c  00000000  00000000  0000608c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002304  00000000  00000000  000166e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000f48  00000000  00000000  000189f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000c13  00000000  00000000  00019938  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016743  00000000  00000000  0001a54b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00012386  00000000  00000000  00030c8e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00090851  00000000  00000000  00043014  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000d3865  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004618  00000000  00000000  000d38a8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000063  00000000  00000000  000d7ec0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	2000005c 	.word	0x2000005c
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800492c 	.word	0x0800492c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000060 	.word	0x20000060
 80001dc:	0800492c 	.word	0x0800492c

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b988 	b.w	80005a8 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	468e      	mov	lr, r1
 80002b8:	4604      	mov	r4, r0
 80002ba:	4688      	mov	r8, r1
 80002bc:	2b00      	cmp	r3, #0
 80002be:	d14a      	bne.n	8000356 <__udivmoddi4+0xa6>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4617      	mov	r7, r2
 80002c4:	d962      	bls.n	800038c <__udivmoddi4+0xdc>
 80002c6:	fab2 f682 	clz	r6, r2
 80002ca:	b14e      	cbz	r6, 80002e0 <__udivmoddi4+0x30>
 80002cc:	f1c6 0320 	rsb	r3, r6, #32
 80002d0:	fa01 f806 	lsl.w	r8, r1, r6
 80002d4:	fa20 f303 	lsr.w	r3, r0, r3
 80002d8:	40b7      	lsls	r7, r6
 80002da:	ea43 0808 	orr.w	r8, r3, r8
 80002de:	40b4      	lsls	r4, r6
 80002e0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002e4:	fa1f fc87 	uxth.w	ip, r7
 80002e8:	fbb8 f1fe 	udiv	r1, r8, lr
 80002ec:	0c23      	lsrs	r3, r4, #16
 80002ee:	fb0e 8811 	mls	r8, lr, r1, r8
 80002f2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002f6:	fb01 f20c 	mul.w	r2, r1, ip
 80002fa:	429a      	cmp	r2, r3
 80002fc:	d909      	bls.n	8000312 <__udivmoddi4+0x62>
 80002fe:	18fb      	adds	r3, r7, r3
 8000300:	f101 30ff 	add.w	r0, r1, #4294967295
 8000304:	f080 80ea 	bcs.w	80004dc <__udivmoddi4+0x22c>
 8000308:	429a      	cmp	r2, r3
 800030a:	f240 80e7 	bls.w	80004dc <__udivmoddi4+0x22c>
 800030e:	3902      	subs	r1, #2
 8000310:	443b      	add	r3, r7
 8000312:	1a9a      	subs	r2, r3, r2
 8000314:	b2a3      	uxth	r3, r4
 8000316:	fbb2 f0fe 	udiv	r0, r2, lr
 800031a:	fb0e 2210 	mls	r2, lr, r0, r2
 800031e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000322:	fb00 fc0c 	mul.w	ip, r0, ip
 8000326:	459c      	cmp	ip, r3
 8000328:	d909      	bls.n	800033e <__udivmoddi4+0x8e>
 800032a:	18fb      	adds	r3, r7, r3
 800032c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000330:	f080 80d6 	bcs.w	80004e0 <__udivmoddi4+0x230>
 8000334:	459c      	cmp	ip, r3
 8000336:	f240 80d3 	bls.w	80004e0 <__udivmoddi4+0x230>
 800033a:	443b      	add	r3, r7
 800033c:	3802      	subs	r0, #2
 800033e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000342:	eba3 030c 	sub.w	r3, r3, ip
 8000346:	2100      	movs	r1, #0
 8000348:	b11d      	cbz	r5, 8000352 <__udivmoddi4+0xa2>
 800034a:	40f3      	lsrs	r3, r6
 800034c:	2200      	movs	r2, #0
 800034e:	e9c5 3200 	strd	r3, r2, [r5]
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	428b      	cmp	r3, r1
 8000358:	d905      	bls.n	8000366 <__udivmoddi4+0xb6>
 800035a:	b10d      	cbz	r5, 8000360 <__udivmoddi4+0xb0>
 800035c:	e9c5 0100 	strd	r0, r1, [r5]
 8000360:	2100      	movs	r1, #0
 8000362:	4608      	mov	r0, r1
 8000364:	e7f5      	b.n	8000352 <__udivmoddi4+0xa2>
 8000366:	fab3 f183 	clz	r1, r3
 800036a:	2900      	cmp	r1, #0
 800036c:	d146      	bne.n	80003fc <__udivmoddi4+0x14c>
 800036e:	4573      	cmp	r3, lr
 8000370:	d302      	bcc.n	8000378 <__udivmoddi4+0xc8>
 8000372:	4282      	cmp	r2, r0
 8000374:	f200 8105 	bhi.w	8000582 <__udivmoddi4+0x2d2>
 8000378:	1a84      	subs	r4, r0, r2
 800037a:	eb6e 0203 	sbc.w	r2, lr, r3
 800037e:	2001      	movs	r0, #1
 8000380:	4690      	mov	r8, r2
 8000382:	2d00      	cmp	r5, #0
 8000384:	d0e5      	beq.n	8000352 <__udivmoddi4+0xa2>
 8000386:	e9c5 4800 	strd	r4, r8, [r5]
 800038a:	e7e2      	b.n	8000352 <__udivmoddi4+0xa2>
 800038c:	2a00      	cmp	r2, #0
 800038e:	f000 8090 	beq.w	80004b2 <__udivmoddi4+0x202>
 8000392:	fab2 f682 	clz	r6, r2
 8000396:	2e00      	cmp	r6, #0
 8000398:	f040 80a4 	bne.w	80004e4 <__udivmoddi4+0x234>
 800039c:	1a8a      	subs	r2, r1, r2
 800039e:	0c03      	lsrs	r3, r0, #16
 80003a0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003a4:	b280      	uxth	r0, r0
 80003a6:	b2bc      	uxth	r4, r7
 80003a8:	2101      	movs	r1, #1
 80003aa:	fbb2 fcfe 	udiv	ip, r2, lr
 80003ae:	fb0e 221c 	mls	r2, lr, ip, r2
 80003b2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80003b6:	fb04 f20c 	mul.w	r2, r4, ip
 80003ba:	429a      	cmp	r2, r3
 80003bc:	d907      	bls.n	80003ce <__udivmoddi4+0x11e>
 80003be:	18fb      	adds	r3, r7, r3
 80003c0:	f10c 38ff 	add.w	r8, ip, #4294967295
 80003c4:	d202      	bcs.n	80003cc <__udivmoddi4+0x11c>
 80003c6:	429a      	cmp	r2, r3
 80003c8:	f200 80e0 	bhi.w	800058c <__udivmoddi4+0x2dc>
 80003cc:	46c4      	mov	ip, r8
 80003ce:	1a9b      	subs	r3, r3, r2
 80003d0:	fbb3 f2fe 	udiv	r2, r3, lr
 80003d4:	fb0e 3312 	mls	r3, lr, r2, r3
 80003d8:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80003dc:	fb02 f404 	mul.w	r4, r2, r4
 80003e0:	429c      	cmp	r4, r3
 80003e2:	d907      	bls.n	80003f4 <__udivmoddi4+0x144>
 80003e4:	18fb      	adds	r3, r7, r3
 80003e6:	f102 30ff 	add.w	r0, r2, #4294967295
 80003ea:	d202      	bcs.n	80003f2 <__udivmoddi4+0x142>
 80003ec:	429c      	cmp	r4, r3
 80003ee:	f200 80ca 	bhi.w	8000586 <__udivmoddi4+0x2d6>
 80003f2:	4602      	mov	r2, r0
 80003f4:	1b1b      	subs	r3, r3, r4
 80003f6:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 80003fa:	e7a5      	b.n	8000348 <__udivmoddi4+0x98>
 80003fc:	f1c1 0620 	rsb	r6, r1, #32
 8000400:	408b      	lsls	r3, r1
 8000402:	fa22 f706 	lsr.w	r7, r2, r6
 8000406:	431f      	orrs	r7, r3
 8000408:	fa0e f401 	lsl.w	r4, lr, r1
 800040c:	fa20 f306 	lsr.w	r3, r0, r6
 8000410:	fa2e fe06 	lsr.w	lr, lr, r6
 8000414:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000418:	4323      	orrs	r3, r4
 800041a:	fa00 f801 	lsl.w	r8, r0, r1
 800041e:	fa1f fc87 	uxth.w	ip, r7
 8000422:	fbbe f0f9 	udiv	r0, lr, r9
 8000426:	0c1c      	lsrs	r4, r3, #16
 8000428:	fb09 ee10 	mls	lr, r9, r0, lr
 800042c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000430:	fb00 fe0c 	mul.w	lr, r0, ip
 8000434:	45a6      	cmp	lr, r4
 8000436:	fa02 f201 	lsl.w	r2, r2, r1
 800043a:	d909      	bls.n	8000450 <__udivmoddi4+0x1a0>
 800043c:	193c      	adds	r4, r7, r4
 800043e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000442:	f080 809c 	bcs.w	800057e <__udivmoddi4+0x2ce>
 8000446:	45a6      	cmp	lr, r4
 8000448:	f240 8099 	bls.w	800057e <__udivmoddi4+0x2ce>
 800044c:	3802      	subs	r0, #2
 800044e:	443c      	add	r4, r7
 8000450:	eba4 040e 	sub.w	r4, r4, lr
 8000454:	fa1f fe83 	uxth.w	lr, r3
 8000458:	fbb4 f3f9 	udiv	r3, r4, r9
 800045c:	fb09 4413 	mls	r4, r9, r3, r4
 8000460:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000464:	fb03 fc0c 	mul.w	ip, r3, ip
 8000468:	45a4      	cmp	ip, r4
 800046a:	d908      	bls.n	800047e <__udivmoddi4+0x1ce>
 800046c:	193c      	adds	r4, r7, r4
 800046e:	f103 3eff 	add.w	lr, r3, #4294967295
 8000472:	f080 8082 	bcs.w	800057a <__udivmoddi4+0x2ca>
 8000476:	45a4      	cmp	ip, r4
 8000478:	d97f      	bls.n	800057a <__udivmoddi4+0x2ca>
 800047a:	3b02      	subs	r3, #2
 800047c:	443c      	add	r4, r7
 800047e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000482:	eba4 040c 	sub.w	r4, r4, ip
 8000486:	fba0 ec02 	umull	lr, ip, r0, r2
 800048a:	4564      	cmp	r4, ip
 800048c:	4673      	mov	r3, lr
 800048e:	46e1      	mov	r9, ip
 8000490:	d362      	bcc.n	8000558 <__udivmoddi4+0x2a8>
 8000492:	d05f      	beq.n	8000554 <__udivmoddi4+0x2a4>
 8000494:	b15d      	cbz	r5, 80004ae <__udivmoddi4+0x1fe>
 8000496:	ebb8 0203 	subs.w	r2, r8, r3
 800049a:	eb64 0409 	sbc.w	r4, r4, r9
 800049e:	fa04 f606 	lsl.w	r6, r4, r6
 80004a2:	fa22 f301 	lsr.w	r3, r2, r1
 80004a6:	431e      	orrs	r6, r3
 80004a8:	40cc      	lsrs	r4, r1
 80004aa:	e9c5 6400 	strd	r6, r4, [r5]
 80004ae:	2100      	movs	r1, #0
 80004b0:	e74f      	b.n	8000352 <__udivmoddi4+0xa2>
 80004b2:	fbb1 fcf2 	udiv	ip, r1, r2
 80004b6:	0c01      	lsrs	r1, r0, #16
 80004b8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80004bc:	b280      	uxth	r0, r0
 80004be:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80004c2:	463b      	mov	r3, r7
 80004c4:	4638      	mov	r0, r7
 80004c6:	463c      	mov	r4, r7
 80004c8:	46b8      	mov	r8, r7
 80004ca:	46be      	mov	lr, r7
 80004cc:	2620      	movs	r6, #32
 80004ce:	fbb1 f1f7 	udiv	r1, r1, r7
 80004d2:	eba2 0208 	sub.w	r2, r2, r8
 80004d6:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80004da:	e766      	b.n	80003aa <__udivmoddi4+0xfa>
 80004dc:	4601      	mov	r1, r0
 80004de:	e718      	b.n	8000312 <__udivmoddi4+0x62>
 80004e0:	4610      	mov	r0, r2
 80004e2:	e72c      	b.n	800033e <__udivmoddi4+0x8e>
 80004e4:	f1c6 0220 	rsb	r2, r6, #32
 80004e8:	fa2e f302 	lsr.w	r3, lr, r2
 80004ec:	40b7      	lsls	r7, r6
 80004ee:	40b1      	lsls	r1, r6
 80004f0:	fa20 f202 	lsr.w	r2, r0, r2
 80004f4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80004f8:	430a      	orrs	r2, r1
 80004fa:	fbb3 f8fe 	udiv	r8, r3, lr
 80004fe:	b2bc      	uxth	r4, r7
 8000500:	fb0e 3318 	mls	r3, lr, r8, r3
 8000504:	0c11      	lsrs	r1, r2, #16
 8000506:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800050a:	fb08 f904 	mul.w	r9, r8, r4
 800050e:	40b0      	lsls	r0, r6
 8000510:	4589      	cmp	r9, r1
 8000512:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000516:	b280      	uxth	r0, r0
 8000518:	d93e      	bls.n	8000598 <__udivmoddi4+0x2e8>
 800051a:	1879      	adds	r1, r7, r1
 800051c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000520:	d201      	bcs.n	8000526 <__udivmoddi4+0x276>
 8000522:	4589      	cmp	r9, r1
 8000524:	d81f      	bhi.n	8000566 <__udivmoddi4+0x2b6>
 8000526:	eba1 0109 	sub.w	r1, r1, r9
 800052a:	fbb1 f9fe 	udiv	r9, r1, lr
 800052e:	fb09 f804 	mul.w	r8, r9, r4
 8000532:	fb0e 1119 	mls	r1, lr, r9, r1
 8000536:	b292      	uxth	r2, r2
 8000538:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800053c:	4542      	cmp	r2, r8
 800053e:	d229      	bcs.n	8000594 <__udivmoddi4+0x2e4>
 8000540:	18ba      	adds	r2, r7, r2
 8000542:	f109 31ff 	add.w	r1, r9, #4294967295
 8000546:	d2c4      	bcs.n	80004d2 <__udivmoddi4+0x222>
 8000548:	4542      	cmp	r2, r8
 800054a:	d2c2      	bcs.n	80004d2 <__udivmoddi4+0x222>
 800054c:	f1a9 0102 	sub.w	r1, r9, #2
 8000550:	443a      	add	r2, r7
 8000552:	e7be      	b.n	80004d2 <__udivmoddi4+0x222>
 8000554:	45f0      	cmp	r8, lr
 8000556:	d29d      	bcs.n	8000494 <__udivmoddi4+0x1e4>
 8000558:	ebbe 0302 	subs.w	r3, lr, r2
 800055c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000560:	3801      	subs	r0, #1
 8000562:	46e1      	mov	r9, ip
 8000564:	e796      	b.n	8000494 <__udivmoddi4+0x1e4>
 8000566:	eba7 0909 	sub.w	r9, r7, r9
 800056a:	4449      	add	r1, r9
 800056c:	f1a8 0c02 	sub.w	ip, r8, #2
 8000570:	fbb1 f9fe 	udiv	r9, r1, lr
 8000574:	fb09 f804 	mul.w	r8, r9, r4
 8000578:	e7db      	b.n	8000532 <__udivmoddi4+0x282>
 800057a:	4673      	mov	r3, lr
 800057c:	e77f      	b.n	800047e <__udivmoddi4+0x1ce>
 800057e:	4650      	mov	r0, sl
 8000580:	e766      	b.n	8000450 <__udivmoddi4+0x1a0>
 8000582:	4608      	mov	r0, r1
 8000584:	e6fd      	b.n	8000382 <__udivmoddi4+0xd2>
 8000586:	443b      	add	r3, r7
 8000588:	3a02      	subs	r2, #2
 800058a:	e733      	b.n	80003f4 <__udivmoddi4+0x144>
 800058c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000590:	443b      	add	r3, r7
 8000592:	e71c      	b.n	80003ce <__udivmoddi4+0x11e>
 8000594:	4649      	mov	r1, r9
 8000596:	e79c      	b.n	80004d2 <__udivmoddi4+0x222>
 8000598:	eba1 0109 	sub.w	r1, r1, r9
 800059c:	46c4      	mov	ip, r8
 800059e:	fbb1 f9fe 	udiv	r9, r1, lr
 80005a2:	fb09 f804 	mul.w	r8, r9, r4
 80005a6:	e7c4      	b.n	8000532 <__udivmoddi4+0x282>

080005a8 <__aeabi_idiv0>:
 80005a8:	4770      	bx	lr
 80005aa:	bf00      	nop

080005ac <CLCD_Delay>:
******************************************************************************************************************/
#include "CLCD_I2C.h"

//************************** Low Level Function ****************************************************************//
static void CLCD_Delay(uint16_t Time)
{
 80005ac:	b580      	push	{r7, lr}
 80005ae:	b082      	sub	sp, #8
 80005b0:	af00      	add	r7, sp, #0
 80005b2:	4603      	mov	r3, r0
 80005b4:	80fb      	strh	r3, [r7, #6]
	HAL_Delay(Time);
 80005b6:	88fb      	ldrh	r3, [r7, #6]
 80005b8:	4618      	mov	r0, r3
 80005ba:	f000 fec5 	bl	8001348 <HAL_Delay>
}
 80005be:	bf00      	nop
 80005c0:	3708      	adds	r7, #8
 80005c2:	46bd      	mov	sp, r7
 80005c4:	bd80      	pop	{r7, pc}

080005c6 <CLCD_WriteI2C>:
static void CLCD_WriteI2C(CLCD_I2C_Name* LCD, uint8_t Data, uint8_t Mode)
{
 80005c6:	b580      	push	{r7, lr}
 80005c8:	b086      	sub	sp, #24
 80005ca:	af02      	add	r7, sp, #8
 80005cc:	6078      	str	r0, [r7, #4]
 80005ce:	460b      	mov	r3, r1
 80005d0:	70fb      	strb	r3, [r7, #3]
 80005d2:	4613      	mov	r3, r2
 80005d4:	70bb      	strb	r3, [r7, #2]
	char Data_H;
	char Data_L;
	uint8_t Data_I2C[4];
	Data_H = Data&0xF0;
 80005d6:	78fb      	ldrb	r3, [r7, #3]
 80005d8:	f023 030f 	bic.w	r3, r3, #15
 80005dc:	73fb      	strb	r3, [r7, #15]
	Data_L = (Data<<4)&0xF0;
 80005de:	78fb      	ldrb	r3, [r7, #3]
 80005e0:	011b      	lsls	r3, r3, #4
 80005e2:	73bb      	strb	r3, [r7, #14]
	if(LCD->BACKLIGHT)
 80005e4:	687b      	ldr	r3, [r7, #4]
 80005e6:	7adb      	ldrb	r3, [r3, #11]
 80005e8:	2b00      	cmp	r3, #0
 80005ea:	d007      	beq.n	80005fc <CLCD_WriteI2C+0x36>
	{
		Data_H |= LCD_BACKLIGHT;
 80005ec:	7bfb      	ldrb	r3, [r7, #15]
 80005ee:	f043 0308 	orr.w	r3, r3, #8
 80005f2:	73fb      	strb	r3, [r7, #15]
		Data_L |= LCD_BACKLIGHT;
 80005f4:	7bbb      	ldrb	r3, [r7, #14]
 80005f6:	f043 0308 	orr.w	r3, r3, #8
 80005fa:	73bb      	strb	r3, [r7, #14]
	}
	if(Mode == CLCD_DATA)
 80005fc:	78bb      	ldrb	r3, [r7, #2]
 80005fe:	2b01      	cmp	r3, #1
 8000600:	d108      	bne.n	8000614 <CLCD_WriteI2C+0x4e>
	{
		Data_H |= LCD_RS;
 8000602:	7bfb      	ldrb	r3, [r7, #15]
 8000604:	f043 0301 	orr.w	r3, r3, #1
 8000608:	73fb      	strb	r3, [r7, #15]
		Data_L |= LCD_RS;
 800060a:	7bbb      	ldrb	r3, [r7, #14]
 800060c:	f043 0301 	orr.w	r3, r3, #1
 8000610:	73bb      	strb	r3, [r7, #14]
 8000612:	e00a      	b.n	800062a <CLCD_WriteI2C+0x64>
	}
	else if(Mode == CLCD_COMMAND)
 8000614:	78bb      	ldrb	r3, [r7, #2]
 8000616:	2b00      	cmp	r3, #0
 8000618:	d107      	bne.n	800062a <CLCD_WriteI2C+0x64>
	{
		Data_H &= ~LCD_RS;
 800061a:	7bfb      	ldrb	r3, [r7, #15]
 800061c:	f023 0301 	bic.w	r3, r3, #1
 8000620:	73fb      	strb	r3, [r7, #15]
		Data_L &= ~LCD_RS;
 8000622:	7bbb      	ldrb	r3, [r7, #14]
 8000624:	f023 0301 	bic.w	r3, r3, #1
 8000628:	73bb      	strb	r3, [r7, #14]
	}
	Data_I2C[0] = Data_H|LCD_EN;
 800062a:	7bfb      	ldrb	r3, [r7, #15]
 800062c:	f043 0304 	orr.w	r3, r3, #4
 8000630:	b2db      	uxtb	r3, r3
 8000632:	723b      	strb	r3, [r7, #8]
	CLCD_Delay(1);
 8000634:	2001      	movs	r0, #1
 8000636:	f7ff ffb9 	bl	80005ac <CLCD_Delay>
	Data_I2C[1] = Data_H;
 800063a:	7bfb      	ldrb	r3, [r7, #15]
 800063c:	727b      	strb	r3, [r7, #9]
	Data_I2C[2] = Data_L|LCD_EN;
 800063e:	7bbb      	ldrb	r3, [r7, #14]
 8000640:	f043 0304 	orr.w	r3, r3, #4
 8000644:	b2db      	uxtb	r3, r3
 8000646:	72bb      	strb	r3, [r7, #10]
	CLCD_Delay(1);
 8000648:	2001      	movs	r0, #1
 800064a:	f7ff ffaf 	bl	80005ac <CLCD_Delay>
	Data_I2C[3] = Data_L;
 800064e:	7bbb      	ldrb	r3, [r7, #14]
 8000650:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit(LCD->I2C, LCD->ADDRESS, (uint8_t *)Data_I2C, sizeof(Data_I2C), 1000);
 8000652:	687b      	ldr	r3, [r7, #4]
 8000654:	6818      	ldr	r0, [r3, #0]
 8000656:	687b      	ldr	r3, [r7, #4]
 8000658:	791b      	ldrb	r3, [r3, #4]
 800065a:	4619      	mov	r1, r3
 800065c:	f107 0208 	add.w	r2, r7, #8
 8000660:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000664:	9300      	str	r3, [sp, #0]
 8000666:	2304      	movs	r3, #4
 8000668:	f001 fa86 	bl	8001b78 <HAL_I2C_Master_Transmit>
}
 800066c:	bf00      	nop
 800066e:	3710      	adds	r7, #16
 8000670:	46bd      	mov	sp, r7
 8000672:	bd80      	pop	{r7, pc}

08000674 <CLCD_I2C_Init>:


//************************** High Level Function ****************************************************************//
void CLCD_I2C_Init(CLCD_I2C_Name* LCD, I2C_HandleTypeDef* hi2c_CLCD, uint8_t Address, uint8_t Colums, uint8_t Rows)
{
 8000674:	b580      	push	{r7, lr}
 8000676:	b084      	sub	sp, #16
 8000678:	af00      	add	r7, sp, #0
 800067a:	60f8      	str	r0, [r7, #12]
 800067c:	60b9      	str	r1, [r7, #8]
 800067e:	4611      	mov	r1, r2
 8000680:	461a      	mov	r2, r3
 8000682:	460b      	mov	r3, r1
 8000684:	71fb      	strb	r3, [r7, #7]
 8000686:	4613      	mov	r3, r2
 8000688:	71bb      	strb	r3, [r7, #6]
	LCD->I2C = hi2c_CLCD;
 800068a:	68fb      	ldr	r3, [r7, #12]
 800068c:	68ba      	ldr	r2, [r7, #8]
 800068e:	601a      	str	r2, [r3, #0]
	LCD->ADDRESS = Address;
 8000690:	68fb      	ldr	r3, [r7, #12]
 8000692:	79fa      	ldrb	r2, [r7, #7]
 8000694:	711a      	strb	r2, [r3, #4]
	LCD->COLUMS = Colums;
 8000696:	68fb      	ldr	r3, [r7, #12]
 8000698:	79ba      	ldrb	r2, [r7, #6]
 800069a:	715a      	strb	r2, [r3, #5]
	LCD->ROWS = Rows;
 800069c:	68fb      	ldr	r3, [r7, #12]
 800069e:	7e3a      	ldrb	r2, [r7, #24]
 80006a0:	719a      	strb	r2, [r3, #6]

	LCD->FUNCTIONSET = LCD_FUNCTIONSET|LCD_4BITMODE|LCD_2LINE|LCD_5x8DOTS;
 80006a2:	68fb      	ldr	r3, [r7, #12]
 80006a4:	2228      	movs	r2, #40	@ 0x28
 80006a6:	729a      	strb	r2, [r3, #10]
	LCD->ENTRYMODE = LCD_ENTRYMODESET|LCD_ENTRYLEFT|LCD_ENTRYSHIFTDECREMENT;
 80006a8:	68fb      	ldr	r3, [r7, #12]
 80006aa:	2206      	movs	r2, #6
 80006ac:	71da      	strb	r2, [r3, #7]
	LCD->DISPLAYCTRL = LCD_DISPLAYCONTROL|LCD_DISPLAYON|LCD_CURSOROFF|LCD_BLINKOFF;
 80006ae:	68fb      	ldr	r3, [r7, #12]
 80006b0:	220c      	movs	r2, #12
 80006b2:	721a      	strb	r2, [r3, #8]
	LCD->CURSORSHIFT = LCD_CURSORSHIFT|LCD_CURSORMOVE|LCD_MOVERIGHT;
 80006b4:	68fb      	ldr	r3, [r7, #12]
 80006b6:	2214      	movs	r2, #20
 80006b8:	725a      	strb	r2, [r3, #9]
	LCD->BACKLIGHT = LCD_BACKLIGHT;
 80006ba:	68fb      	ldr	r3, [r7, #12]
 80006bc:	2208      	movs	r2, #8
 80006be:	72da      	strb	r2, [r3, #11]

	CLCD_Delay(50);
 80006c0:	2032      	movs	r0, #50	@ 0x32
 80006c2:	f7ff ff73 	bl	80005ac <CLCD_Delay>
	CLCD_WriteI2C(LCD, 0x33, CLCD_COMMAND);
 80006c6:	2200      	movs	r2, #0
 80006c8:	2133      	movs	r1, #51	@ 0x33
 80006ca:	68f8      	ldr	r0, [r7, #12]
 80006cc:	f7ff ff7b 	bl	80005c6 <CLCD_WriteI2C>
//	CLCD_Delay(5);
	CLCD_WriteI2C(LCD, 0x33, CLCD_COMMAND);
 80006d0:	2200      	movs	r2, #0
 80006d2:	2133      	movs	r1, #51	@ 0x33
 80006d4:	68f8      	ldr	r0, [r7, #12]
 80006d6:	f7ff ff76 	bl	80005c6 <CLCD_WriteI2C>
	CLCD_Delay(5);
 80006da:	2005      	movs	r0, #5
 80006dc:	f7ff ff66 	bl	80005ac <CLCD_Delay>
	CLCD_WriteI2C(LCD, 0x32, CLCD_COMMAND);
 80006e0:	2200      	movs	r2, #0
 80006e2:	2132      	movs	r1, #50	@ 0x32
 80006e4:	68f8      	ldr	r0, [r7, #12]
 80006e6:	f7ff ff6e 	bl	80005c6 <CLCD_WriteI2C>
	CLCD_Delay(5);
 80006ea:	2005      	movs	r0, #5
 80006ec:	f7ff ff5e 	bl	80005ac <CLCD_Delay>
	CLCD_WriteI2C(LCD, 0x20, CLCD_COMMAND);
 80006f0:	2200      	movs	r2, #0
 80006f2:	2120      	movs	r1, #32
 80006f4:	68f8      	ldr	r0, [r7, #12]
 80006f6:	f7ff ff66 	bl	80005c6 <CLCD_WriteI2C>
	CLCD_Delay(5);
 80006fa:	2005      	movs	r0, #5
 80006fc:	f7ff ff56 	bl	80005ac <CLCD_Delay>

	CLCD_WriteI2C(LCD, LCD->ENTRYMODE,CLCD_COMMAND);
 8000700:	68fb      	ldr	r3, [r7, #12]
 8000702:	79db      	ldrb	r3, [r3, #7]
 8000704:	2200      	movs	r2, #0
 8000706:	4619      	mov	r1, r3
 8000708:	68f8      	ldr	r0, [r7, #12]
 800070a:	f7ff ff5c 	bl	80005c6 <CLCD_WriteI2C>
	CLCD_WriteI2C(LCD, LCD->DISPLAYCTRL,CLCD_COMMAND);
 800070e:	68fb      	ldr	r3, [r7, #12]
 8000710:	7a1b      	ldrb	r3, [r3, #8]
 8000712:	2200      	movs	r2, #0
 8000714:	4619      	mov	r1, r3
 8000716:	68f8      	ldr	r0, [r7, #12]
 8000718:	f7ff ff55 	bl	80005c6 <CLCD_WriteI2C>
	CLCD_WriteI2C(LCD, LCD->CURSORSHIFT,CLCD_COMMAND);
 800071c:	68fb      	ldr	r3, [r7, #12]
 800071e:	7a5b      	ldrb	r3, [r3, #9]
 8000720:	2200      	movs	r2, #0
 8000722:	4619      	mov	r1, r3
 8000724:	68f8      	ldr	r0, [r7, #12]
 8000726:	f7ff ff4e 	bl	80005c6 <CLCD_WriteI2C>
	CLCD_WriteI2C(LCD, LCD->FUNCTIONSET,CLCD_COMMAND);
 800072a:	68fb      	ldr	r3, [r7, #12]
 800072c:	7a9b      	ldrb	r3, [r3, #10]
 800072e:	2200      	movs	r2, #0
 8000730:	4619      	mov	r1, r3
 8000732:	68f8      	ldr	r0, [r7, #12]
 8000734:	f7ff ff47 	bl	80005c6 <CLCD_WriteI2C>

	CLCD_WriteI2C(LCD, LCD_CLEARDISPLAY,CLCD_COMMAND);
 8000738:	2200      	movs	r2, #0
 800073a:	2101      	movs	r1, #1
 800073c:	68f8      	ldr	r0, [r7, #12]
 800073e:	f7ff ff42 	bl	80005c6 <CLCD_WriteI2C>
	CLCD_WriteI2C(LCD, LCD_RETURNHOME,CLCD_COMMAND);
 8000742:	2200      	movs	r2, #0
 8000744:	2102      	movs	r1, #2
 8000746:	68f8      	ldr	r0, [r7, #12]
 8000748:	f7ff ff3d 	bl	80005c6 <CLCD_WriteI2C>
}
 800074c:	bf00      	nop
 800074e:	3710      	adds	r7, #16
 8000750:	46bd      	mov	sp, r7
 8000752:	bd80      	pop	{r7, pc}

08000754 <CLCD_I2C_SetCursor>:
void CLCD_I2C_SetCursor(CLCD_I2C_Name* LCD, uint8_t Xpos, uint8_t Ypos)
{
 8000754:	b580      	push	{r7, lr}
 8000756:	b084      	sub	sp, #16
 8000758:	af00      	add	r7, sp, #0
 800075a:	6078      	str	r0, [r7, #4]
 800075c:	460b      	mov	r3, r1
 800075e:	70fb      	strb	r3, [r7, #3]
 8000760:	4613      	mov	r3, r2
 8000762:	70bb      	strb	r3, [r7, #2]
	uint8_t DRAM_ADDRESS = 0x00;
 8000764:	2300      	movs	r3, #0
 8000766:	73fb      	strb	r3, [r7, #15]
	if(Xpos >= LCD->COLUMS)
 8000768:	687b      	ldr	r3, [r7, #4]
 800076a:	795b      	ldrb	r3, [r3, #5]
 800076c:	78fa      	ldrb	r2, [r7, #3]
 800076e:	429a      	cmp	r2, r3
 8000770:	d303      	bcc.n	800077a <CLCD_I2C_SetCursor+0x26>
	{
		Xpos = LCD->COLUMS - 1;
 8000772:	687b      	ldr	r3, [r7, #4]
 8000774:	795b      	ldrb	r3, [r3, #5]
 8000776:	3b01      	subs	r3, #1
 8000778:	70fb      	strb	r3, [r7, #3]
	}
	if(Ypos >= LCD->ROWS)
 800077a:	687b      	ldr	r3, [r7, #4]
 800077c:	799b      	ldrb	r3, [r3, #6]
 800077e:	78ba      	ldrb	r2, [r7, #2]
 8000780:	429a      	cmp	r2, r3
 8000782:	d303      	bcc.n	800078c <CLCD_I2C_SetCursor+0x38>
	{
		Ypos = LCD->ROWS -1;
 8000784:	687b      	ldr	r3, [r7, #4]
 8000786:	799b      	ldrb	r3, [r3, #6]
 8000788:	3b01      	subs	r3, #1
 800078a:	70bb      	strb	r3, [r7, #2]
	}
	if(Ypos == 0)
 800078c:	78bb      	ldrb	r3, [r7, #2]
 800078e:	2b00      	cmp	r3, #0
 8000790:	d102      	bne.n	8000798 <CLCD_I2C_SetCursor+0x44>
	{
		DRAM_ADDRESS = 0x00 + Xpos;
 8000792:	78fb      	ldrb	r3, [r7, #3]
 8000794:	73fb      	strb	r3, [r7, #15]
 8000796:	e013      	b.n	80007c0 <CLCD_I2C_SetCursor+0x6c>
	}
	else if(Ypos == 1)
 8000798:	78bb      	ldrb	r3, [r7, #2]
 800079a:	2b01      	cmp	r3, #1
 800079c:	d103      	bne.n	80007a6 <CLCD_I2C_SetCursor+0x52>
	{
		DRAM_ADDRESS = 0x40 + Xpos;
 800079e:	78fb      	ldrb	r3, [r7, #3]
 80007a0:	3340      	adds	r3, #64	@ 0x40
 80007a2:	73fb      	strb	r3, [r7, #15]
 80007a4:	e00c      	b.n	80007c0 <CLCD_I2C_SetCursor+0x6c>
	}
	else if(Ypos == 2)
 80007a6:	78bb      	ldrb	r3, [r7, #2]
 80007a8:	2b02      	cmp	r3, #2
 80007aa:	d103      	bne.n	80007b4 <CLCD_I2C_SetCursor+0x60>
	{
		DRAM_ADDRESS = 0x14 + Xpos;
 80007ac:	78fb      	ldrb	r3, [r7, #3]
 80007ae:	3314      	adds	r3, #20
 80007b0:	73fb      	strb	r3, [r7, #15]
 80007b2:	e005      	b.n	80007c0 <CLCD_I2C_SetCursor+0x6c>
	}
	else if(Ypos == 3)
 80007b4:	78bb      	ldrb	r3, [r7, #2]
 80007b6:	2b03      	cmp	r3, #3
 80007b8:	d102      	bne.n	80007c0 <CLCD_I2C_SetCursor+0x6c>
	{
		DRAM_ADDRESS = 0x54 + Xpos;
 80007ba:	78fb      	ldrb	r3, [r7, #3]
 80007bc:	3354      	adds	r3, #84	@ 0x54
 80007be:	73fb      	strb	r3, [r7, #15]
	}
	CLCD_WriteI2C(LCD, LCD_SETDDRAMADDR|DRAM_ADDRESS, CLCD_COMMAND);
 80007c0:	7bfb      	ldrb	r3, [r7, #15]
 80007c2:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80007c6:	b2db      	uxtb	r3, r3
 80007c8:	2200      	movs	r2, #0
 80007ca:	4619      	mov	r1, r3
 80007cc:	6878      	ldr	r0, [r7, #4]
 80007ce:	f7ff fefa 	bl	80005c6 <CLCD_WriteI2C>
}
 80007d2:	bf00      	nop
 80007d4:	3710      	adds	r7, #16
 80007d6:	46bd      	mov	sp, r7
 80007d8:	bd80      	pop	{r7, pc}

080007da <CLCD_I2C_WriteChar>:
void CLCD_I2C_WriteChar(CLCD_I2C_Name* LCD, char character)
{
 80007da:	b580      	push	{r7, lr}
 80007dc:	b082      	sub	sp, #8
 80007de:	af00      	add	r7, sp, #0
 80007e0:	6078      	str	r0, [r7, #4]
 80007e2:	460b      	mov	r3, r1
 80007e4:	70fb      	strb	r3, [r7, #3]
	CLCD_WriteI2C(LCD, character, CLCD_DATA);
 80007e6:	78fb      	ldrb	r3, [r7, #3]
 80007e8:	2201      	movs	r2, #1
 80007ea:	4619      	mov	r1, r3
 80007ec:	6878      	ldr	r0, [r7, #4]
 80007ee:	f7ff feea 	bl	80005c6 <CLCD_WriteI2C>
}
 80007f2:	bf00      	nop
 80007f4:	3708      	adds	r7, #8
 80007f6:	46bd      	mov	sp, r7
 80007f8:	bd80      	pop	{r7, pc}

080007fa <CLCD_I2C_WriteString>:
void CLCD_I2C_WriteString(CLCD_I2C_Name* LCD, char *String)
{
 80007fa:	b580      	push	{r7, lr}
 80007fc:	b082      	sub	sp, #8
 80007fe:	af00      	add	r7, sp, #0
 8000800:	6078      	str	r0, [r7, #4]
 8000802:	6039      	str	r1, [r7, #0]
	while(*String)CLCD_I2C_WriteChar(LCD, *String++);
 8000804:	e007      	b.n	8000816 <CLCD_I2C_WriteString+0x1c>
 8000806:	683b      	ldr	r3, [r7, #0]
 8000808:	1c5a      	adds	r2, r3, #1
 800080a:	603a      	str	r2, [r7, #0]
 800080c:	781b      	ldrb	r3, [r3, #0]
 800080e:	4619      	mov	r1, r3
 8000810:	6878      	ldr	r0, [r7, #4]
 8000812:	f7ff ffe2 	bl	80007da <CLCD_I2C_WriteChar>
 8000816:	683b      	ldr	r3, [r7, #0]
 8000818:	781b      	ldrb	r3, [r3, #0]
 800081a:	2b00      	cmp	r3, #0
 800081c:	d1f3      	bne.n	8000806 <CLCD_I2C_WriteString+0xc>
}
 800081e:	bf00      	nop
 8000820:	bf00      	nop
 8000822:	3708      	adds	r7, #8
 8000824:	46bd      	mov	sp, r7
 8000826:	bd80      	pop	{r7, pc}

08000828 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000828:	b580      	push	{r7, lr}
 800082a:	b088      	sub	sp, #32
 800082c:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800082e:	f000 fd19 	bl	8001264 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000832:	f000 f847 	bl	80008c4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000836:	f000 f9c7 	bl	8000bc8 <MX_GPIO_Init>
  MX_TIM1_Init();
 800083a:	f000 f8d9 	bl	80009f0 <MX_TIM1_Init>
  MX_USART2_UART_Init();
 800083e:	f000 f999 	bl	8000b74 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 8000842:	f000 f8a7 	bl	8000994 <MX_I2C1_Init>
  MX_TIM2_Init();
 8000846:	f000 f947 	bl	8000ad8 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  ultrasonic_init(&htim1);  // Khởi tạo cảm biến
 800084a:	4818      	ldr	r0, [pc, #96]	@ (80008ac <main+0x84>)
 800084c:	f000 fbd2 	bl	8000ff4 <ultrasonic_init>
  // Khởi tạo LCD (16x2, địa chỉ I2C 0x27)
  CLCD_I2C_Init(&myLCD, &hi2c1, 0x27 << 1, 16, 2);
 8000850:	2302      	movs	r3, #2
 8000852:	9300      	str	r3, [sp, #0]
 8000854:	2310      	movs	r3, #16
 8000856:	224e      	movs	r2, #78	@ 0x4e
 8000858:	4915      	ldr	r1, [pc, #84]	@ (80008b0 <main+0x88>)
 800085a:	4816      	ldr	r0, [pc, #88]	@ (80008b4 <main+0x8c>)
 800085c:	f7ff ff0a 	bl	8000674 <CLCD_I2C_Init>
  // Khoi tao timer
  timer_delay_init(&htim2);
 8000860:	4815      	ldr	r0, [pc, #84]	@ (80008b8 <main+0x90>)
 8000862:	f000 fb99 	bl	8000f98 <timer_delay_init>

  // Hiển thị tiêu đề ban đầu trên LCD
  CLCD_I2C_SetCursor(&myLCD, 0, 0);
 8000866:	2200      	movs	r2, #0
 8000868:	2100      	movs	r1, #0
 800086a:	4812      	ldr	r0, [pc, #72]	@ (80008b4 <main+0x8c>)
 800086c:	f7ff ff72 	bl	8000754 <CLCD_I2C_SetCursor>
  CLCD_I2C_WriteString(&myLCD, "Distance: ");
 8000870:	4912      	ldr	r1, [pc, #72]	@ (80008bc <main+0x94>)
 8000872:	4810      	ldr	r0, [pc, #64]	@ (80008b4 <main+0x8c>)
 8000874:	f7ff ffc1 	bl	80007fa <CLCD_I2C_WriteString>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
    // Lấy giá trị khoảng cách từ cảm biến
    uint8_t distance = get_distance();
 8000878:	f000 fc8c 	bl	8001194 <get_distance>
 800087c:	4603      	mov	r3, r0
 800087e:	75fb      	strb	r3, [r7, #23]

    // Chuyển đổi khoảng cách thành chuỗi
    sprintf(buffer, "%3d cm    ", distance);
 8000880:	7dfa      	ldrb	r2, [r7, #23]
 8000882:	463b      	mov	r3, r7
 8000884:	490e      	ldr	r1, [pc, #56]	@ (80008c0 <main+0x98>)
 8000886:	4618      	mov	r0, r3
 8000888:	f003 fbb0 	bl	8003fec <siprintf>

    // Hiển thị khoảng cách trên LCD
    CLCD_I2C_SetCursor(&myLCD, 10, 0);
 800088c:	2200      	movs	r2, #0
 800088e:	210a      	movs	r1, #10
 8000890:	4808      	ldr	r0, [pc, #32]	@ (80008b4 <main+0x8c>)
 8000892:	f7ff ff5f 	bl	8000754 <CLCD_I2C_SetCursor>
    CLCD_I2C_WriteString(&myLCD, buffer);
 8000896:	463b      	mov	r3, r7
 8000898:	4619      	mov	r1, r3
 800089a:	4806      	ldr	r0, [pc, #24]	@ (80008b4 <main+0x8c>)
 800089c:	f7ff ffad 	bl	80007fa <CLCD_I2C_WriteString>

    // Delay 500ms trước khi đo lần tiếp theo
    HAL_Delay(500);
 80008a0:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80008a4:	f000 fd50 	bl	8001348 <HAL_Delay>
  {
 80008a8:	bf00      	nop
 80008aa:	e7e5      	b.n	8000878 <main+0x50>
 80008ac:	200000cc 	.word	0x200000cc
 80008b0:	20000078 	.word	0x20000078
 80008b4:	200001a4 	.word	0x200001a4
 80008b8:	20000114 	.word	0x20000114
 80008bc:	08004944 	.word	0x08004944
 80008c0:	08004950 	.word	0x08004950

080008c4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80008c4:	b580      	push	{r7, lr}
 80008c6:	b094      	sub	sp, #80	@ 0x50
 80008c8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80008ca:	f107 0320 	add.w	r3, r7, #32
 80008ce:	2230      	movs	r2, #48	@ 0x30
 80008d0:	2100      	movs	r1, #0
 80008d2:	4618      	mov	r0, r3
 80008d4:	f003 fbac 	bl	8004030 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80008d8:	f107 030c 	add.w	r3, r7, #12
 80008dc:	2200      	movs	r2, #0
 80008de:	601a      	str	r2, [r3, #0]
 80008e0:	605a      	str	r2, [r3, #4]
 80008e2:	609a      	str	r2, [r3, #8]
 80008e4:	60da      	str	r2, [r3, #12]
 80008e6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80008e8:	2300      	movs	r3, #0
 80008ea:	60bb      	str	r3, [r7, #8]
 80008ec:	4b27      	ldr	r3, [pc, #156]	@ (800098c <SystemClock_Config+0xc8>)
 80008ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80008f0:	4a26      	ldr	r2, [pc, #152]	@ (800098c <SystemClock_Config+0xc8>)
 80008f2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80008f6:	6413      	str	r3, [r2, #64]	@ 0x40
 80008f8:	4b24      	ldr	r3, [pc, #144]	@ (800098c <SystemClock_Config+0xc8>)
 80008fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80008fc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000900:	60bb      	str	r3, [r7, #8]
 8000902:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000904:	2300      	movs	r3, #0
 8000906:	607b      	str	r3, [r7, #4]
 8000908:	4b21      	ldr	r3, [pc, #132]	@ (8000990 <SystemClock_Config+0xcc>)
 800090a:	681b      	ldr	r3, [r3, #0]
 800090c:	4a20      	ldr	r2, [pc, #128]	@ (8000990 <SystemClock_Config+0xcc>)
 800090e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000912:	6013      	str	r3, [r2, #0]
 8000914:	4b1e      	ldr	r3, [pc, #120]	@ (8000990 <SystemClock_Config+0xcc>)
 8000916:	681b      	ldr	r3, [r3, #0]
 8000918:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800091c:	607b      	str	r3, [r7, #4]
 800091e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000920:	2302      	movs	r3, #2
 8000922:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000924:	2301      	movs	r3, #1
 8000926:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000928:	2310      	movs	r3, #16
 800092a:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800092c:	2302      	movs	r3, #2
 800092e:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000930:	2300      	movs	r3, #0
 8000932:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000934:	2308      	movs	r3, #8
 8000936:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 100;
 8000938:	2364      	movs	r3, #100	@ 0x64
 800093a:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800093c:	2302      	movs	r3, #2
 800093e:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000940:	2304      	movs	r3, #4
 8000942:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000944:	f107 0320 	add.w	r3, r7, #32
 8000948:	4618      	mov	r0, r3
 800094a:	f001 fc6f 	bl	800222c <HAL_RCC_OscConfig>
 800094e:	4603      	mov	r3, r0
 8000950:	2b00      	cmp	r3, #0
 8000952:	d001      	beq.n	8000958 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000954:	f000 f97c 	bl	8000c50 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000958:	230f      	movs	r3, #15
 800095a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800095c:	2302      	movs	r3, #2
 800095e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000960:	2300      	movs	r3, #0
 8000962:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000964:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000968:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800096a:	2300      	movs	r3, #0
 800096c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 800096e:	f107 030c 	add.w	r3, r7, #12
 8000972:	2103      	movs	r1, #3
 8000974:	4618      	mov	r0, r3
 8000976:	f001 fed1 	bl	800271c <HAL_RCC_ClockConfig>
 800097a:	4603      	mov	r3, r0
 800097c:	2b00      	cmp	r3, #0
 800097e:	d001      	beq.n	8000984 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8000980:	f000 f966 	bl	8000c50 <Error_Handler>
  }
}
 8000984:	bf00      	nop
 8000986:	3750      	adds	r7, #80	@ 0x50
 8000988:	46bd      	mov	sp, r7
 800098a:	bd80      	pop	{r7, pc}
 800098c:	40023800 	.word	0x40023800
 8000990:	40007000 	.word	0x40007000

08000994 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000994:	b580      	push	{r7, lr}
 8000996:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000998:	4b12      	ldr	r3, [pc, #72]	@ (80009e4 <MX_I2C1_Init+0x50>)
 800099a:	4a13      	ldr	r2, [pc, #76]	@ (80009e8 <MX_I2C1_Init+0x54>)
 800099c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800099e:	4b11      	ldr	r3, [pc, #68]	@ (80009e4 <MX_I2C1_Init+0x50>)
 80009a0:	4a12      	ldr	r2, [pc, #72]	@ (80009ec <MX_I2C1_Init+0x58>)
 80009a2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80009a4:	4b0f      	ldr	r3, [pc, #60]	@ (80009e4 <MX_I2C1_Init+0x50>)
 80009a6:	2200      	movs	r2, #0
 80009a8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80009aa:	4b0e      	ldr	r3, [pc, #56]	@ (80009e4 <MX_I2C1_Init+0x50>)
 80009ac:	2200      	movs	r2, #0
 80009ae:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80009b0:	4b0c      	ldr	r3, [pc, #48]	@ (80009e4 <MX_I2C1_Init+0x50>)
 80009b2:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80009b6:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80009b8:	4b0a      	ldr	r3, [pc, #40]	@ (80009e4 <MX_I2C1_Init+0x50>)
 80009ba:	2200      	movs	r2, #0
 80009bc:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80009be:	4b09      	ldr	r3, [pc, #36]	@ (80009e4 <MX_I2C1_Init+0x50>)
 80009c0:	2200      	movs	r2, #0
 80009c2:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80009c4:	4b07      	ldr	r3, [pc, #28]	@ (80009e4 <MX_I2C1_Init+0x50>)
 80009c6:	2200      	movs	r2, #0
 80009c8:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80009ca:	4b06      	ldr	r3, [pc, #24]	@ (80009e4 <MX_I2C1_Init+0x50>)
 80009cc:	2200      	movs	r2, #0
 80009ce:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80009d0:	4804      	ldr	r0, [pc, #16]	@ (80009e4 <MX_I2C1_Init+0x50>)
 80009d2:	f000 ff8d 	bl	80018f0 <HAL_I2C_Init>
 80009d6:	4603      	mov	r3, r0
 80009d8:	2b00      	cmp	r3, #0
 80009da:	d001      	beq.n	80009e0 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80009dc:	f000 f938 	bl	8000c50 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80009e0:	bf00      	nop
 80009e2:	bd80      	pop	{r7, pc}
 80009e4:	20000078 	.word	0x20000078
 80009e8:	40005400 	.word	0x40005400
 80009ec:	000186a0 	.word	0x000186a0

080009f0 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80009f0:	b580      	push	{r7, lr}
 80009f2:	b08a      	sub	sp, #40	@ 0x28
 80009f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80009f6:	f107 0318 	add.w	r3, r7, #24
 80009fa:	2200      	movs	r2, #0
 80009fc:	601a      	str	r2, [r3, #0]
 80009fe:	605a      	str	r2, [r3, #4]
 8000a00:	609a      	str	r2, [r3, #8]
 8000a02:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000a04:	f107 0310 	add.w	r3, r7, #16
 8000a08:	2200      	movs	r2, #0
 8000a0a:	601a      	str	r2, [r3, #0]
 8000a0c:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8000a0e:	463b      	mov	r3, r7
 8000a10:	2200      	movs	r2, #0
 8000a12:	601a      	str	r2, [r3, #0]
 8000a14:	605a      	str	r2, [r3, #4]
 8000a16:	609a      	str	r2, [r3, #8]
 8000a18:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000a1a:	4b2d      	ldr	r3, [pc, #180]	@ (8000ad0 <MX_TIM1_Init+0xe0>)
 8000a1c:	4a2d      	ldr	r2, [pc, #180]	@ (8000ad4 <MX_TIM1_Init+0xe4>)
 8000a1e:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 99;
 8000a20:	4b2b      	ldr	r3, [pc, #172]	@ (8000ad0 <MX_TIM1_Init+0xe0>)
 8000a22:	2263      	movs	r2, #99	@ 0x63
 8000a24:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a26:	4b2a      	ldr	r3, [pc, #168]	@ (8000ad0 <MX_TIM1_Init+0xe0>)
 8000a28:	2200      	movs	r2, #0
 8000a2a:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8000a2c:	4b28      	ldr	r3, [pc, #160]	@ (8000ad0 <MX_TIM1_Init+0xe0>)
 8000a2e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000a32:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a34:	4b26      	ldr	r3, [pc, #152]	@ (8000ad0 <MX_TIM1_Init+0xe0>)
 8000a36:	2200      	movs	r2, #0
 8000a38:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000a3a:	4b25      	ldr	r3, [pc, #148]	@ (8000ad0 <MX_TIM1_Init+0xe0>)
 8000a3c:	2200      	movs	r2, #0
 8000a3e:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a40:	4b23      	ldr	r3, [pc, #140]	@ (8000ad0 <MX_TIM1_Init+0xe0>)
 8000a42:	2200      	movs	r2, #0
 8000a44:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000a46:	4822      	ldr	r0, [pc, #136]	@ (8000ad0 <MX_TIM1_Init+0xe0>)
 8000a48:	f002 f848 	bl	8002adc <HAL_TIM_Base_Init>
 8000a4c:	4603      	mov	r3, r0
 8000a4e:	2b00      	cmp	r3, #0
 8000a50:	d001      	beq.n	8000a56 <MX_TIM1_Init+0x66>
  {
    Error_Handler();
 8000a52:	f000 f8fd 	bl	8000c50 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000a56:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000a5a:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000a5c:	f107 0318 	add.w	r3, r7, #24
 8000a60:	4619      	mov	r1, r3
 8000a62:	481b      	ldr	r0, [pc, #108]	@ (8000ad0 <MX_TIM1_Init+0xe0>)
 8000a64:	f002 fbe4 	bl	8003230 <HAL_TIM_ConfigClockSource>
 8000a68:	4603      	mov	r3, r0
 8000a6a:	2b00      	cmp	r3, #0
 8000a6c:	d001      	beq.n	8000a72 <MX_TIM1_Init+0x82>
  {
    Error_Handler();
 8000a6e:	f000 f8ef 	bl	8000c50 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim1) != HAL_OK)
 8000a72:	4817      	ldr	r0, [pc, #92]	@ (8000ad0 <MX_TIM1_Init+0xe0>)
 8000a74:	f002 f8dc 	bl	8002c30 <HAL_TIM_IC_Init>
 8000a78:	4603      	mov	r3, r0
 8000a7a:	2b00      	cmp	r3, #0
 8000a7c:	d001      	beq.n	8000a82 <MX_TIM1_Init+0x92>
  {
    Error_Handler();
 8000a7e:	f000 f8e7 	bl	8000c50 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000a82:	2300      	movs	r3, #0
 8000a84:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a86:	2300      	movs	r3, #0
 8000a88:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000a8a:	f107 0310 	add.w	r3, r7, #16
 8000a8e:	4619      	mov	r1, r3
 8000a90:	480f      	ldr	r0, [pc, #60]	@ (8000ad0 <MX_TIM1_Init+0xe0>)
 8000a92:	f002 ff65 	bl	8003960 <HAL_TIMEx_MasterConfigSynchronization>
 8000a96:	4603      	mov	r3, r0
 8000a98:	2b00      	cmp	r3, #0
 8000a9a:	d001      	beq.n	8000aa0 <MX_TIM1_Init+0xb0>
  {
    Error_Handler();
 8000a9c:	f000 f8d8 	bl	8000c50 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8000aa0:	2300      	movs	r3, #0
 8000aa2:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8000aa4:	2301      	movs	r3, #1
 8000aa6:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8000aa8:	2300      	movs	r3, #0
 8000aaa:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8000aac:	2300      	movs	r3, #0
 8000aae:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8000ab0:	463b      	mov	r3, r7
 8000ab2:	2200      	movs	r2, #0
 8000ab4:	4619      	mov	r1, r3
 8000ab6:	4806      	ldr	r0, [pc, #24]	@ (8000ad0 <MX_TIM1_Init+0xe0>)
 8000ab8:	f002 fb1e 	bl	80030f8 <HAL_TIM_IC_ConfigChannel>
 8000abc:	4603      	mov	r3, r0
 8000abe:	2b00      	cmp	r3, #0
 8000ac0:	d001      	beq.n	8000ac6 <MX_TIM1_Init+0xd6>
  {
    Error_Handler();
 8000ac2:	f000 f8c5 	bl	8000c50 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000ac6:	bf00      	nop
 8000ac8:	3728      	adds	r7, #40	@ 0x28
 8000aca:	46bd      	mov	sp, r7
 8000acc:	bd80      	pop	{r7, pc}
 8000ace:	bf00      	nop
 8000ad0:	200000cc 	.word	0x200000cc
 8000ad4:	40010000 	.word	0x40010000

08000ad8 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000ad8:	b580      	push	{r7, lr}
 8000ada:	b086      	sub	sp, #24
 8000adc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000ade:	f107 0308 	add.w	r3, r7, #8
 8000ae2:	2200      	movs	r2, #0
 8000ae4:	601a      	str	r2, [r3, #0]
 8000ae6:	605a      	str	r2, [r3, #4]
 8000ae8:	609a      	str	r2, [r3, #8]
 8000aea:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000aec:	463b      	mov	r3, r7
 8000aee:	2200      	movs	r2, #0
 8000af0:	601a      	str	r2, [r3, #0]
 8000af2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000af4:	4b1d      	ldr	r3, [pc, #116]	@ (8000b6c <MX_TIM2_Init+0x94>)
 8000af6:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000afa:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 99;
 8000afc:	4b1b      	ldr	r3, [pc, #108]	@ (8000b6c <MX_TIM2_Init+0x94>)
 8000afe:	2263      	movs	r2, #99	@ 0x63
 8000b00:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b02:	4b1a      	ldr	r3, [pc, #104]	@ (8000b6c <MX_TIM2_Init+0x94>)
 8000b04:	2200      	movs	r2, #0
 8000b06:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 999999;
 8000b08:	4b18      	ldr	r3, [pc, #96]	@ (8000b6c <MX_TIM2_Init+0x94>)
 8000b0a:	4a19      	ldr	r2, [pc, #100]	@ (8000b70 <MX_TIM2_Init+0x98>)
 8000b0c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000b0e:	4b17      	ldr	r3, [pc, #92]	@ (8000b6c <MX_TIM2_Init+0x94>)
 8000b10:	2200      	movs	r2, #0
 8000b12:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b14:	4b15      	ldr	r3, [pc, #84]	@ (8000b6c <MX_TIM2_Init+0x94>)
 8000b16:	2200      	movs	r2, #0
 8000b18:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000b1a:	4814      	ldr	r0, [pc, #80]	@ (8000b6c <MX_TIM2_Init+0x94>)
 8000b1c:	f001 ffde 	bl	8002adc <HAL_TIM_Base_Init>
 8000b20:	4603      	mov	r3, r0
 8000b22:	2b00      	cmp	r3, #0
 8000b24:	d001      	beq.n	8000b2a <MX_TIM2_Init+0x52>
  {
    Error_Handler();
 8000b26:	f000 f893 	bl	8000c50 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000b2a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000b2e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000b30:	f107 0308 	add.w	r3, r7, #8
 8000b34:	4619      	mov	r1, r3
 8000b36:	480d      	ldr	r0, [pc, #52]	@ (8000b6c <MX_TIM2_Init+0x94>)
 8000b38:	f002 fb7a 	bl	8003230 <HAL_TIM_ConfigClockSource>
 8000b3c:	4603      	mov	r3, r0
 8000b3e:	2b00      	cmp	r3, #0
 8000b40:	d001      	beq.n	8000b46 <MX_TIM2_Init+0x6e>
  {
    Error_Handler();
 8000b42:	f000 f885 	bl	8000c50 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000b46:	2300      	movs	r3, #0
 8000b48:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000b4a:	2300      	movs	r3, #0
 8000b4c:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000b4e:	463b      	mov	r3, r7
 8000b50:	4619      	mov	r1, r3
 8000b52:	4806      	ldr	r0, [pc, #24]	@ (8000b6c <MX_TIM2_Init+0x94>)
 8000b54:	f002 ff04 	bl	8003960 <HAL_TIMEx_MasterConfigSynchronization>
 8000b58:	4603      	mov	r3, r0
 8000b5a:	2b00      	cmp	r3, #0
 8000b5c:	d001      	beq.n	8000b62 <MX_TIM2_Init+0x8a>
  {
    Error_Handler();
 8000b5e:	f000 f877 	bl	8000c50 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000b62:	bf00      	nop
 8000b64:	3718      	adds	r7, #24
 8000b66:	46bd      	mov	sp, r7
 8000b68:	bd80      	pop	{r7, pc}
 8000b6a:	bf00      	nop
 8000b6c:	20000114 	.word	0x20000114
 8000b70:	000f423f 	.word	0x000f423f

08000b74 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000b74:	b580      	push	{r7, lr}
 8000b76:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000b78:	4b11      	ldr	r3, [pc, #68]	@ (8000bc0 <MX_USART2_UART_Init+0x4c>)
 8000b7a:	4a12      	ldr	r2, [pc, #72]	@ (8000bc4 <MX_USART2_UART_Init+0x50>)
 8000b7c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000b7e:	4b10      	ldr	r3, [pc, #64]	@ (8000bc0 <MX_USART2_UART_Init+0x4c>)
 8000b80:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000b84:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000b86:	4b0e      	ldr	r3, [pc, #56]	@ (8000bc0 <MX_USART2_UART_Init+0x4c>)
 8000b88:	2200      	movs	r2, #0
 8000b8a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000b8c:	4b0c      	ldr	r3, [pc, #48]	@ (8000bc0 <MX_USART2_UART_Init+0x4c>)
 8000b8e:	2200      	movs	r2, #0
 8000b90:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000b92:	4b0b      	ldr	r3, [pc, #44]	@ (8000bc0 <MX_USART2_UART_Init+0x4c>)
 8000b94:	2200      	movs	r2, #0
 8000b96:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000b98:	4b09      	ldr	r3, [pc, #36]	@ (8000bc0 <MX_USART2_UART_Init+0x4c>)
 8000b9a:	220c      	movs	r2, #12
 8000b9c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b9e:	4b08      	ldr	r3, [pc, #32]	@ (8000bc0 <MX_USART2_UART_Init+0x4c>)
 8000ba0:	2200      	movs	r2, #0
 8000ba2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ba4:	4b06      	ldr	r3, [pc, #24]	@ (8000bc0 <MX_USART2_UART_Init+0x4c>)
 8000ba6:	2200      	movs	r2, #0
 8000ba8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000baa:	4805      	ldr	r0, [pc, #20]	@ (8000bc0 <MX_USART2_UART_Init+0x4c>)
 8000bac:	f002 ff5a 	bl	8003a64 <HAL_UART_Init>
 8000bb0:	4603      	mov	r3, r0
 8000bb2:	2b00      	cmp	r3, #0
 8000bb4:	d001      	beq.n	8000bba <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000bb6:	f000 f84b 	bl	8000c50 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000bba:	bf00      	nop
 8000bbc:	bd80      	pop	{r7, pc}
 8000bbe:	bf00      	nop
 8000bc0:	2000015c 	.word	0x2000015c
 8000bc4:	40004400 	.word	0x40004400

08000bc8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000bc8:	b580      	push	{r7, lr}
 8000bca:	b088      	sub	sp, #32
 8000bcc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bce:	f107 030c 	add.w	r3, r7, #12
 8000bd2:	2200      	movs	r2, #0
 8000bd4:	601a      	str	r2, [r3, #0]
 8000bd6:	605a      	str	r2, [r3, #4]
 8000bd8:	609a      	str	r2, [r3, #8]
 8000bda:	60da      	str	r2, [r3, #12]
 8000bdc:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bde:	2300      	movs	r3, #0
 8000be0:	60bb      	str	r3, [r7, #8]
 8000be2:	4b19      	ldr	r3, [pc, #100]	@ (8000c48 <MX_GPIO_Init+0x80>)
 8000be4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000be6:	4a18      	ldr	r2, [pc, #96]	@ (8000c48 <MX_GPIO_Init+0x80>)
 8000be8:	f043 0301 	orr.w	r3, r3, #1
 8000bec:	6313      	str	r3, [r2, #48]	@ 0x30
 8000bee:	4b16      	ldr	r3, [pc, #88]	@ (8000c48 <MX_GPIO_Init+0x80>)
 8000bf0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bf2:	f003 0301 	and.w	r3, r3, #1
 8000bf6:	60bb      	str	r3, [r7, #8]
 8000bf8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000bfa:	2300      	movs	r3, #0
 8000bfc:	607b      	str	r3, [r7, #4]
 8000bfe:	4b12      	ldr	r3, [pc, #72]	@ (8000c48 <MX_GPIO_Init+0x80>)
 8000c00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c02:	4a11      	ldr	r2, [pc, #68]	@ (8000c48 <MX_GPIO_Init+0x80>)
 8000c04:	f043 0302 	orr.w	r3, r3, #2
 8000c08:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c0a:	4b0f      	ldr	r3, [pc, #60]	@ (8000c48 <MX_GPIO_Init+0x80>)
 8000c0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c0e:	f003 0302 	and.w	r3, r3, #2
 8000c12:	607b      	str	r3, [r7, #4]
 8000c14:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5|TRIGGER_Pin, GPIO_PIN_RESET);
 8000c16:	2200      	movs	r2, #0
 8000c18:	f44f 7108 	mov.w	r1, #544	@ 0x220
 8000c1c:	480b      	ldr	r0, [pc, #44]	@ (8000c4c <MX_GPIO_Init+0x84>)
 8000c1e:	f000 fe4d 	bl	80018bc <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA5 TRIGGER_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_5|TRIGGER_Pin;
 8000c22:	f44f 7308 	mov.w	r3, #544	@ 0x220
 8000c26:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c28:	2301      	movs	r3, #1
 8000c2a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c2c:	2300      	movs	r3, #0
 8000c2e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c30:	2300      	movs	r3, #0
 8000c32:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c34:	f107 030c 	add.w	r3, r7, #12
 8000c38:	4619      	mov	r1, r3
 8000c3a:	4804      	ldr	r0, [pc, #16]	@ (8000c4c <MX_GPIO_Init+0x84>)
 8000c3c:	f000 fcba 	bl	80015b4 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000c40:	bf00      	nop
 8000c42:	3720      	adds	r7, #32
 8000c44:	46bd      	mov	sp, r7
 8000c46:	bd80      	pop	{r7, pc}
 8000c48:	40023800 	.word	0x40023800
 8000c4c:	40020000 	.word	0x40020000

08000c50 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c50:	b480      	push	{r7}
 8000c52:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c54:	b672      	cpsid	i
}
 8000c56:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c58:	bf00      	nop
 8000c5a:	e7fd      	b.n	8000c58 <Error_Handler+0x8>

08000c5c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c5c:	b480      	push	{r7}
 8000c5e:	b083      	sub	sp, #12
 8000c60:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c62:	2300      	movs	r3, #0
 8000c64:	607b      	str	r3, [r7, #4]
 8000c66:	4b10      	ldr	r3, [pc, #64]	@ (8000ca8 <HAL_MspInit+0x4c>)
 8000c68:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000c6a:	4a0f      	ldr	r2, [pc, #60]	@ (8000ca8 <HAL_MspInit+0x4c>)
 8000c6c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000c70:	6453      	str	r3, [r2, #68]	@ 0x44
 8000c72:	4b0d      	ldr	r3, [pc, #52]	@ (8000ca8 <HAL_MspInit+0x4c>)
 8000c74:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000c76:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000c7a:	607b      	str	r3, [r7, #4]
 8000c7c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c7e:	2300      	movs	r3, #0
 8000c80:	603b      	str	r3, [r7, #0]
 8000c82:	4b09      	ldr	r3, [pc, #36]	@ (8000ca8 <HAL_MspInit+0x4c>)
 8000c84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c86:	4a08      	ldr	r2, [pc, #32]	@ (8000ca8 <HAL_MspInit+0x4c>)
 8000c88:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000c8c:	6413      	str	r3, [r2, #64]	@ 0x40
 8000c8e:	4b06      	ldr	r3, [pc, #24]	@ (8000ca8 <HAL_MspInit+0x4c>)
 8000c90:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c92:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000c96:	603b      	str	r3, [r7, #0]
 8000c98:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c9a:	bf00      	nop
 8000c9c:	370c      	adds	r7, #12
 8000c9e:	46bd      	mov	sp, r7
 8000ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca4:	4770      	bx	lr
 8000ca6:	bf00      	nop
 8000ca8:	40023800 	.word	0x40023800

08000cac <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000cac:	b580      	push	{r7, lr}
 8000cae:	b08a      	sub	sp, #40	@ 0x28
 8000cb0:	af00      	add	r7, sp, #0
 8000cb2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cb4:	f107 0314 	add.w	r3, r7, #20
 8000cb8:	2200      	movs	r2, #0
 8000cba:	601a      	str	r2, [r3, #0]
 8000cbc:	605a      	str	r2, [r3, #4]
 8000cbe:	609a      	str	r2, [r3, #8]
 8000cc0:	60da      	str	r2, [r3, #12]
 8000cc2:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000cc4:	687b      	ldr	r3, [r7, #4]
 8000cc6:	681b      	ldr	r3, [r3, #0]
 8000cc8:	4a19      	ldr	r2, [pc, #100]	@ (8000d30 <HAL_I2C_MspInit+0x84>)
 8000cca:	4293      	cmp	r3, r2
 8000ccc:	d12b      	bne.n	8000d26 <HAL_I2C_MspInit+0x7a>
  {
    /* USER CODE BEGIN I2C1_MspInit 0 */

    /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000cce:	2300      	movs	r3, #0
 8000cd0:	613b      	str	r3, [r7, #16]
 8000cd2:	4b18      	ldr	r3, [pc, #96]	@ (8000d34 <HAL_I2C_MspInit+0x88>)
 8000cd4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cd6:	4a17      	ldr	r2, [pc, #92]	@ (8000d34 <HAL_I2C_MspInit+0x88>)
 8000cd8:	f043 0302 	orr.w	r3, r3, #2
 8000cdc:	6313      	str	r3, [r2, #48]	@ 0x30
 8000cde:	4b15      	ldr	r3, [pc, #84]	@ (8000d34 <HAL_I2C_MspInit+0x88>)
 8000ce0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ce2:	f003 0302 	and.w	r3, r3, #2
 8000ce6:	613b      	str	r3, [r7, #16]
 8000ce8:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000cea:	23c0      	movs	r3, #192	@ 0xc0
 8000cec:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000cee:	2312      	movs	r3, #18
 8000cf0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cf2:	2300      	movs	r3, #0
 8000cf4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cf6:	2303      	movs	r3, #3
 8000cf8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000cfa:	2304      	movs	r3, #4
 8000cfc:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000cfe:	f107 0314 	add.w	r3, r7, #20
 8000d02:	4619      	mov	r1, r3
 8000d04:	480c      	ldr	r0, [pc, #48]	@ (8000d38 <HAL_I2C_MspInit+0x8c>)
 8000d06:	f000 fc55 	bl	80015b4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000d0a:	2300      	movs	r3, #0
 8000d0c:	60fb      	str	r3, [r7, #12]
 8000d0e:	4b09      	ldr	r3, [pc, #36]	@ (8000d34 <HAL_I2C_MspInit+0x88>)
 8000d10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d12:	4a08      	ldr	r2, [pc, #32]	@ (8000d34 <HAL_I2C_MspInit+0x88>)
 8000d14:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000d18:	6413      	str	r3, [r2, #64]	@ 0x40
 8000d1a:	4b06      	ldr	r3, [pc, #24]	@ (8000d34 <HAL_I2C_MspInit+0x88>)
 8000d1c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d1e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000d22:	60fb      	str	r3, [r7, #12]
 8000d24:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 8000d26:	bf00      	nop
 8000d28:	3728      	adds	r7, #40	@ 0x28
 8000d2a:	46bd      	mov	sp, r7
 8000d2c:	bd80      	pop	{r7, pc}
 8000d2e:	bf00      	nop
 8000d30:	40005400 	.word	0x40005400
 8000d34:	40023800 	.word	0x40023800
 8000d38:	40020400 	.word	0x40020400

08000d3c <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000d3c:	b580      	push	{r7, lr}
 8000d3e:	b08a      	sub	sp, #40	@ 0x28
 8000d40:	af00      	add	r7, sp, #0
 8000d42:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d44:	f107 0314 	add.w	r3, r7, #20
 8000d48:	2200      	movs	r2, #0
 8000d4a:	601a      	str	r2, [r3, #0]
 8000d4c:	605a      	str	r2, [r3, #4]
 8000d4e:	609a      	str	r2, [r3, #8]
 8000d50:	60da      	str	r2, [r3, #12]
 8000d52:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM1)
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	681b      	ldr	r3, [r3, #0]
 8000d58:	4a27      	ldr	r2, [pc, #156]	@ (8000df8 <HAL_TIM_Base_MspInit+0xbc>)
 8000d5a:	4293      	cmp	r3, r2
 8000d5c:	d135      	bne.n	8000dca <HAL_TIM_Base_MspInit+0x8e>
  {
    /* USER CODE BEGIN TIM1_MspInit 0 */

    /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000d5e:	2300      	movs	r3, #0
 8000d60:	613b      	str	r3, [r7, #16]
 8000d62:	4b26      	ldr	r3, [pc, #152]	@ (8000dfc <HAL_TIM_Base_MspInit+0xc0>)
 8000d64:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000d66:	4a25      	ldr	r2, [pc, #148]	@ (8000dfc <HAL_TIM_Base_MspInit+0xc0>)
 8000d68:	f043 0301 	orr.w	r3, r3, #1
 8000d6c:	6453      	str	r3, [r2, #68]	@ 0x44
 8000d6e:	4b23      	ldr	r3, [pc, #140]	@ (8000dfc <HAL_TIM_Base_MspInit+0xc0>)
 8000d70:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000d72:	f003 0301 	and.w	r3, r3, #1
 8000d76:	613b      	str	r3, [r7, #16]
 8000d78:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d7a:	2300      	movs	r3, #0
 8000d7c:	60fb      	str	r3, [r7, #12]
 8000d7e:	4b1f      	ldr	r3, [pc, #124]	@ (8000dfc <HAL_TIM_Base_MspInit+0xc0>)
 8000d80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d82:	4a1e      	ldr	r2, [pc, #120]	@ (8000dfc <HAL_TIM_Base_MspInit+0xc0>)
 8000d84:	f043 0301 	orr.w	r3, r3, #1
 8000d88:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d8a:	4b1c      	ldr	r3, [pc, #112]	@ (8000dfc <HAL_TIM_Base_MspInit+0xc0>)
 8000d8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d8e:	f003 0301 	and.w	r3, r3, #1
 8000d92:	60fb      	str	r3, [r7, #12]
 8000d94:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000d96:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000d9a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d9c:	2302      	movs	r3, #2
 8000d9e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000da0:	2300      	movs	r3, #0
 8000da2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000da4:	2300      	movs	r3, #0
 8000da6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8000da8:	2301      	movs	r3, #1
 8000daa:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000dac:	f107 0314 	add.w	r3, r7, #20
 8000db0:	4619      	mov	r1, r3
 8000db2:	4813      	ldr	r0, [pc, #76]	@ (8000e00 <HAL_TIM_Base_MspInit+0xc4>)
 8000db4:	f000 fbfe 	bl	80015b4 <HAL_GPIO_Init>

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 8000db8:	2200      	movs	r2, #0
 8000dba:	2100      	movs	r1, #0
 8000dbc:	201b      	movs	r0, #27
 8000dbe:	f000 fbc2 	bl	8001546 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8000dc2:	201b      	movs	r0, #27
 8000dc4:	f000 fbdb 	bl	800157e <HAL_NVIC_EnableIRQ>
    /* USER CODE BEGIN TIM2_MspInit 1 */

    /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000dc8:	e012      	b.n	8000df0 <HAL_TIM_Base_MspInit+0xb4>
  else if(htim_base->Instance==TIM2)
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	681b      	ldr	r3, [r3, #0]
 8000dce:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000dd2:	d10d      	bne.n	8000df0 <HAL_TIM_Base_MspInit+0xb4>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000dd4:	2300      	movs	r3, #0
 8000dd6:	60bb      	str	r3, [r7, #8]
 8000dd8:	4b08      	ldr	r3, [pc, #32]	@ (8000dfc <HAL_TIM_Base_MspInit+0xc0>)
 8000dda:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ddc:	4a07      	ldr	r2, [pc, #28]	@ (8000dfc <HAL_TIM_Base_MspInit+0xc0>)
 8000dde:	f043 0301 	orr.w	r3, r3, #1
 8000de2:	6413      	str	r3, [r2, #64]	@ 0x40
 8000de4:	4b05      	ldr	r3, [pc, #20]	@ (8000dfc <HAL_TIM_Base_MspInit+0xc0>)
 8000de6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000de8:	f003 0301 	and.w	r3, r3, #1
 8000dec:	60bb      	str	r3, [r7, #8]
 8000dee:	68bb      	ldr	r3, [r7, #8]
}
 8000df0:	bf00      	nop
 8000df2:	3728      	adds	r7, #40	@ 0x28
 8000df4:	46bd      	mov	sp, r7
 8000df6:	bd80      	pop	{r7, pc}
 8000df8:	40010000 	.word	0x40010000
 8000dfc:	40023800 	.word	0x40023800
 8000e00:	40020000 	.word	0x40020000

08000e04 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000e04:	b580      	push	{r7, lr}
 8000e06:	b08a      	sub	sp, #40	@ 0x28
 8000e08:	af00      	add	r7, sp, #0
 8000e0a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e0c:	f107 0314 	add.w	r3, r7, #20
 8000e10:	2200      	movs	r2, #0
 8000e12:	601a      	str	r2, [r3, #0]
 8000e14:	605a      	str	r2, [r3, #4]
 8000e16:	609a      	str	r2, [r3, #8]
 8000e18:	60da      	str	r2, [r3, #12]
 8000e1a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	681b      	ldr	r3, [r3, #0]
 8000e20:	4a19      	ldr	r2, [pc, #100]	@ (8000e88 <HAL_UART_MspInit+0x84>)
 8000e22:	4293      	cmp	r3, r2
 8000e24:	d12b      	bne.n	8000e7e <HAL_UART_MspInit+0x7a>
  {
    /* USER CODE BEGIN USART2_MspInit 0 */

    /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000e26:	2300      	movs	r3, #0
 8000e28:	613b      	str	r3, [r7, #16]
 8000e2a:	4b18      	ldr	r3, [pc, #96]	@ (8000e8c <HAL_UART_MspInit+0x88>)
 8000e2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e2e:	4a17      	ldr	r2, [pc, #92]	@ (8000e8c <HAL_UART_MspInit+0x88>)
 8000e30:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000e34:	6413      	str	r3, [r2, #64]	@ 0x40
 8000e36:	4b15      	ldr	r3, [pc, #84]	@ (8000e8c <HAL_UART_MspInit+0x88>)
 8000e38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e3a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000e3e:	613b      	str	r3, [r7, #16]
 8000e40:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e42:	2300      	movs	r3, #0
 8000e44:	60fb      	str	r3, [r7, #12]
 8000e46:	4b11      	ldr	r3, [pc, #68]	@ (8000e8c <HAL_UART_MspInit+0x88>)
 8000e48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e4a:	4a10      	ldr	r2, [pc, #64]	@ (8000e8c <HAL_UART_MspInit+0x88>)
 8000e4c:	f043 0301 	orr.w	r3, r3, #1
 8000e50:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e52:	4b0e      	ldr	r3, [pc, #56]	@ (8000e8c <HAL_UART_MspInit+0x88>)
 8000e54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e56:	f003 0301 	and.w	r3, r3, #1
 8000e5a:	60fb      	str	r3, [r7, #12]
 8000e5c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000e5e:	230c      	movs	r3, #12
 8000e60:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e62:	2302      	movs	r3, #2
 8000e64:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e66:	2300      	movs	r3, #0
 8000e68:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e6a:	2303      	movs	r3, #3
 8000e6c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000e6e:	2307      	movs	r3, #7
 8000e70:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e72:	f107 0314 	add.w	r3, r7, #20
 8000e76:	4619      	mov	r1, r3
 8000e78:	4805      	ldr	r0, [pc, #20]	@ (8000e90 <HAL_UART_MspInit+0x8c>)
 8000e7a:	f000 fb9b 	bl	80015b4 <HAL_GPIO_Init>

    /* USER CODE END USART2_MspInit 1 */

  }

}
 8000e7e:	bf00      	nop
 8000e80:	3728      	adds	r7, #40	@ 0x28
 8000e82:	46bd      	mov	sp, r7
 8000e84:	bd80      	pop	{r7, pc}
 8000e86:	bf00      	nop
 8000e88:	40004400 	.word	0x40004400
 8000e8c:	40023800 	.word	0x40023800
 8000e90:	40020000 	.word	0x40020000

08000e94 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e94:	b480      	push	{r7}
 8000e96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000e98:	bf00      	nop
 8000e9a:	e7fd      	b.n	8000e98 <NMI_Handler+0x4>

08000e9c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e9c:	b480      	push	{r7}
 8000e9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ea0:	bf00      	nop
 8000ea2:	e7fd      	b.n	8000ea0 <HardFault_Handler+0x4>

08000ea4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ea4:	b480      	push	{r7}
 8000ea6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ea8:	bf00      	nop
 8000eaa:	e7fd      	b.n	8000ea8 <MemManage_Handler+0x4>

08000eac <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000eac:	b480      	push	{r7}
 8000eae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000eb0:	bf00      	nop
 8000eb2:	e7fd      	b.n	8000eb0 <BusFault_Handler+0x4>

08000eb4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000eb4:	b480      	push	{r7}
 8000eb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000eb8:	bf00      	nop
 8000eba:	e7fd      	b.n	8000eb8 <UsageFault_Handler+0x4>

08000ebc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000ebc:	b480      	push	{r7}
 8000ebe:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000ec0:	bf00      	nop
 8000ec2:	46bd      	mov	sp, r7
 8000ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec8:	4770      	bx	lr

08000eca <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000eca:	b480      	push	{r7}
 8000ecc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ece:	bf00      	nop
 8000ed0:	46bd      	mov	sp, r7
 8000ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed6:	4770      	bx	lr

08000ed8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000ed8:	b480      	push	{r7}
 8000eda:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000edc:	bf00      	nop
 8000ede:	46bd      	mov	sp, r7
 8000ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee4:	4770      	bx	lr

08000ee6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ee6:	b580      	push	{r7, lr}
 8000ee8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000eea:	f000 fa0d 	bl	8001308 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000eee:	bf00      	nop
 8000ef0:	bd80      	pop	{r7, pc}
	...

08000ef4 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8000ef4:	b580      	push	{r7, lr}
 8000ef6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000ef8:	4802      	ldr	r0, [pc, #8]	@ (8000f04 <TIM1_CC_IRQHandler+0x10>)
 8000efa:	f002 f80d 	bl	8002f18 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 8000efe:	bf00      	nop
 8000f00:	bd80      	pop	{r7, pc}
 8000f02:	bf00      	nop
 8000f04:	200000cc 	.word	0x200000cc

08000f08 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000f08:	b580      	push	{r7, lr}
 8000f0a:	b086      	sub	sp, #24
 8000f0c:	af00      	add	r7, sp, #0
 8000f0e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000f10:	4a14      	ldr	r2, [pc, #80]	@ (8000f64 <_sbrk+0x5c>)
 8000f12:	4b15      	ldr	r3, [pc, #84]	@ (8000f68 <_sbrk+0x60>)
 8000f14:	1ad3      	subs	r3, r2, r3
 8000f16:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000f18:	697b      	ldr	r3, [r7, #20]
 8000f1a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000f1c:	4b13      	ldr	r3, [pc, #76]	@ (8000f6c <_sbrk+0x64>)
 8000f1e:	681b      	ldr	r3, [r3, #0]
 8000f20:	2b00      	cmp	r3, #0
 8000f22:	d102      	bne.n	8000f2a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000f24:	4b11      	ldr	r3, [pc, #68]	@ (8000f6c <_sbrk+0x64>)
 8000f26:	4a12      	ldr	r2, [pc, #72]	@ (8000f70 <_sbrk+0x68>)
 8000f28:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000f2a:	4b10      	ldr	r3, [pc, #64]	@ (8000f6c <_sbrk+0x64>)
 8000f2c:	681a      	ldr	r2, [r3, #0]
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	4413      	add	r3, r2
 8000f32:	693a      	ldr	r2, [r7, #16]
 8000f34:	429a      	cmp	r2, r3
 8000f36:	d207      	bcs.n	8000f48 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000f38:	f003 f882 	bl	8004040 <__errno>
 8000f3c:	4603      	mov	r3, r0
 8000f3e:	220c      	movs	r2, #12
 8000f40:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000f42:	f04f 33ff 	mov.w	r3, #4294967295
 8000f46:	e009      	b.n	8000f5c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000f48:	4b08      	ldr	r3, [pc, #32]	@ (8000f6c <_sbrk+0x64>)
 8000f4a:	681b      	ldr	r3, [r3, #0]
 8000f4c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000f4e:	4b07      	ldr	r3, [pc, #28]	@ (8000f6c <_sbrk+0x64>)
 8000f50:	681a      	ldr	r2, [r3, #0]
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	4413      	add	r3, r2
 8000f56:	4a05      	ldr	r2, [pc, #20]	@ (8000f6c <_sbrk+0x64>)
 8000f58:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000f5a:	68fb      	ldr	r3, [r7, #12]
}
 8000f5c:	4618      	mov	r0, r3
 8000f5e:	3718      	adds	r7, #24
 8000f60:	46bd      	mov	sp, r7
 8000f62:	bd80      	pop	{r7, pc}
 8000f64:	20020000 	.word	0x20020000
 8000f68:	00000400 	.word	0x00000400
 8000f6c:	200001b0 	.word	0x200001b0
 8000f70:	20000318 	.word	0x20000318

08000f74 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000f74:	b480      	push	{r7}
 8000f76:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000f78:	4b06      	ldr	r3, [pc, #24]	@ (8000f94 <SystemInit+0x20>)
 8000f7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000f7e:	4a05      	ldr	r2, [pc, #20]	@ (8000f94 <SystemInit+0x20>)
 8000f80:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000f84:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000f88:	bf00      	nop
 8000f8a:	46bd      	mov	sp, r7
 8000f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f90:	4770      	bx	lr
 8000f92:	bf00      	nop
 8000f94:	e000ed00 	.word	0xe000ed00

08000f98 <timer_delay_init>:
#include "timer_delay.h"

static TIM_HandleTypeDef *_htim;

void timer_delay_init(TIM_HandleTypeDef *htim) {
 8000f98:	b580      	push	{r7, lr}
 8000f9a:	b082      	sub	sp, #8
 8000f9c:	af00      	add	r7, sp, #0
 8000f9e:	6078      	str	r0, [r7, #4]
    _htim = htim;
 8000fa0:	4a05      	ldr	r2, [pc, #20]	@ (8000fb8 <timer_delay_init+0x20>)
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	6013      	str	r3, [r2, #0]
    HAL_TIM_Base_Start(_htim);
 8000fa6:	4b04      	ldr	r3, [pc, #16]	@ (8000fb8 <timer_delay_init+0x20>)
 8000fa8:	681b      	ldr	r3, [r3, #0]
 8000faa:	4618      	mov	r0, r3
 8000fac:	f001 fde6 	bl	8002b7c <HAL_TIM_Base_Start>
}
 8000fb0:	bf00      	nop
 8000fb2:	3708      	adds	r7, #8
 8000fb4:	46bd      	mov	sp, r7
 8000fb6:	bd80      	pop	{r7, pc}
 8000fb8:	200001b4 	.word	0x200001b4

08000fbc <delay_us>:

void delay_us(uint16_t us) {
 8000fbc:	b480      	push	{r7}
 8000fbe:	b083      	sub	sp, #12
 8000fc0:	af00      	add	r7, sp, #0
 8000fc2:	4603      	mov	r3, r0
 8000fc4:	80fb      	strh	r3, [r7, #6]
    __HAL_TIM_SET_COUNTER(_htim, 0);  // Reset bộ đếm
 8000fc6:	4b0a      	ldr	r3, [pc, #40]	@ (8000ff0 <delay_us+0x34>)
 8000fc8:	681b      	ldr	r3, [r3, #0]
 8000fca:	681b      	ldr	r3, [r3, #0]
 8000fcc:	2200      	movs	r2, #0
 8000fce:	625a      	str	r2, [r3, #36]	@ 0x24
    while (__HAL_TIM_GET_COUNTER(_htim) < us);
 8000fd0:	bf00      	nop
 8000fd2:	4b07      	ldr	r3, [pc, #28]	@ (8000ff0 <delay_us+0x34>)
 8000fd4:	681b      	ldr	r3, [r3, #0]
 8000fd6:	681b      	ldr	r3, [r3, #0]
 8000fd8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8000fda:	88fb      	ldrh	r3, [r7, #6]
 8000fdc:	429a      	cmp	r2, r3
 8000fde:	d3f8      	bcc.n	8000fd2 <delay_us+0x16>
}
 8000fe0:	bf00      	nop
 8000fe2:	bf00      	nop
 8000fe4:	370c      	adds	r7, #12
 8000fe6:	46bd      	mov	sp, r7
 8000fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fec:	4770      	bx	lr
 8000fee:	bf00      	nop
 8000ff0:	200001b4 	.word	0x200001b4

08000ff4 <ultrasonic_init>:
static volatile uint8_t distance = 0;

#define MIN_ECHO_TIME 116 // Tương ứng 2 cm
#define MAX_ECHO_TIME 23333 // Tương ứng 400 cm

void ultrasonic_init(TIM_HandleTypeDef *htim) {
 8000ff4:	b580      	push	{r7, lr}
 8000ff6:	b082      	sub	sp, #8
 8000ff8:	af00      	add	r7, sp, #0
 8000ffa:	6078      	str	r0, [r7, #4]
    ultra_htim = htim;
 8000ffc:	4a06      	ldr	r2, [pc, #24]	@ (8001018 <ultrasonic_init+0x24>)
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	6013      	str	r3, [r2, #0]
    HAL_TIM_IC_Start_IT(ultra_htim, TIM_CHANNEL_1);
 8001002:	4b05      	ldr	r3, [pc, #20]	@ (8001018 <ultrasonic_init+0x24>)
 8001004:	681b      	ldr	r3, [r3, #0]
 8001006:	2100      	movs	r1, #0
 8001008:	4618      	mov	r0, r3
 800100a:	f001 fe6b 	bl	8002ce4 <HAL_TIM_IC_Start_IT>
}
 800100e:	bf00      	nop
 8001010:	3708      	adds	r7, #8
 8001012:	46bd      	mov	sp, r7
 8001014:	bd80      	pop	{r7, pc}
 8001016:	bf00      	nop
 8001018:	200001b8 	.word	0x200001b8

0800101c <HCSR04_trig>:

void HCSR04_trig(void) {
 800101c:	b580      	push	{r7, lr}
 800101e:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(TRIGGER_GPIO_Port, TRIGGER_Pin, GPIO_PIN_SET);
 8001020:	2201      	movs	r2, #1
 8001022:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001026:	4807      	ldr	r0, [pc, #28]	@ (8001044 <HCSR04_trig+0x28>)
 8001028:	f000 fc48 	bl	80018bc <HAL_GPIO_WritePin>
    delay_us(10);
 800102c:	200a      	movs	r0, #10
 800102e:	f7ff ffc5 	bl	8000fbc <delay_us>
    HAL_GPIO_WritePin(TRIGGER_GPIO_Port, TRIGGER_Pin, GPIO_PIN_RESET);
 8001032:	2200      	movs	r2, #0
 8001034:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001038:	4802      	ldr	r0, [pc, #8]	@ (8001044 <HCSR04_trig+0x28>)
 800103a:	f000 fc3f 	bl	80018bc <HAL_GPIO_WritePin>
}
 800103e:	bf00      	nop
 8001040:	bd80      	pop	{r7, pc}
 8001042:	bf00      	nop
 8001044:	40020000 	.word	0x40020000

08001048 <HAL_TIM_IC_CaptureCallback>:

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim) {
 8001048:	b580      	push	{r7, lr}
 800104a:	b084      	sub	sp, #16
 800104c:	af00      	add	r7, sp, #0
 800104e:	6078      	str	r0, [r7, #4]
    if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1) {
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	7f1b      	ldrb	r3, [r3, #28]
 8001054:	2b01      	cmp	r3, #1
 8001056:	f040 808d 	bne.w	8001174 <HAL_TIM_IC_CaptureCallback+0x12c>
        if (is_first_cap == 0) {
 800105a:	4b48      	ldr	r3, [pc, #288]	@ (800117c <HAL_TIM_IC_CaptureCallback+0x134>)
 800105c:	781b      	ldrb	r3, [r3, #0]
 800105e:	b2db      	uxtb	r3, r3
 8001060:	2b00      	cmp	r3, #0
 8001062:	d11a      	bne.n	800109a <HAL_TIM_IC_CaptureCallback+0x52>
            ic_val1 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);
 8001064:	2100      	movs	r1, #0
 8001066:	6878      	ldr	r0, [r7, #4]
 8001068:	f002 f9aa 	bl	80033c0 <HAL_TIM_ReadCapturedValue>
 800106c:	4603      	mov	r3, r0
 800106e:	4a44      	ldr	r2, [pc, #272]	@ (8001180 <HAL_TIM_IC_CaptureCallback+0x138>)
 8001070:	6013      	str	r3, [r2, #0]
            is_first_cap = 1;
 8001072:	4b42      	ldr	r3, [pc, #264]	@ (800117c <HAL_TIM_IC_CaptureCallback+0x134>)
 8001074:	2201      	movs	r2, #1
 8001076:	701a      	strb	r2, [r3, #0]
            __HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_1, TIM_INPUTCHANNELPOLARITY_FALLING);
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	6a1a      	ldr	r2, [r3, #32]
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	681b      	ldr	r3, [r3, #0]
 8001082:	f022 020a 	bic.w	r2, r2, #10
 8001086:	621a      	str	r2, [r3, #32]
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	681b      	ldr	r3, [r3, #0]
 800108c:	6a1a      	ldr	r2, [r3, #32]
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	681b      	ldr	r3, [r3, #0]
 8001092:	f042 0202 	orr.w	r2, r2, #2
 8001096:	621a      	str	r2, [r3, #32]
 8001098:	e06c      	b.n	8001174 <HAL_TIM_IC_CaptureCallback+0x12c>
        } else {
            ic_val2 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);
 800109a:	2100      	movs	r1, #0
 800109c:	6878      	ldr	r0, [r7, #4]
 800109e:	f002 f98f 	bl	80033c0 <HAL_TIM_ReadCapturedValue>
 80010a2:	4603      	mov	r3, r0
 80010a4:	4a37      	ldr	r2, [pc, #220]	@ (8001184 <HAL_TIM_IC_CaptureCallback+0x13c>)
 80010a6:	6013      	str	r3, [r2, #0]
            __HAL_TIM_SET_COUNTER(htim, 0);
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	681b      	ldr	r3, [r3, #0]
 80010ac:	2200      	movs	r2, #0
 80010ae:	625a      	str	r2, [r3, #36]	@ 0x24

            if (ic_val2 >= ic_val1) {
 80010b0:	4b34      	ldr	r3, [pc, #208]	@ (8001184 <HAL_TIM_IC_CaptureCallback+0x13c>)
 80010b2:	681a      	ldr	r2, [r3, #0]
 80010b4:	4b32      	ldr	r3, [pc, #200]	@ (8001180 <HAL_TIM_IC_CaptureCallback+0x138>)
 80010b6:	681b      	ldr	r3, [r3, #0]
 80010b8:	429a      	cmp	r2, r3
 80010ba:	d307      	bcc.n	80010cc <HAL_TIM_IC_CaptureCallback+0x84>
                echo_time = ic_val2 - ic_val1;
 80010bc:	4b31      	ldr	r3, [pc, #196]	@ (8001184 <HAL_TIM_IC_CaptureCallback+0x13c>)
 80010be:	681a      	ldr	r2, [r3, #0]
 80010c0:	4b2f      	ldr	r3, [pc, #188]	@ (8001180 <HAL_TIM_IC_CaptureCallback+0x138>)
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	1ad3      	subs	r3, r2, r3
 80010c6:	4a30      	ldr	r2, [pc, #192]	@ (8001188 <HAL_TIM_IC_CaptureCallback+0x140>)
 80010c8:	6013      	str	r3, [r2, #0]
 80010ca:	e009      	b.n	80010e0 <HAL_TIM_IC_CaptureCallback+0x98>
            } else {
                echo_time = 0xFFFF + ic_val2 - ic_val1;
 80010cc:	4b2d      	ldr	r3, [pc, #180]	@ (8001184 <HAL_TIM_IC_CaptureCallback+0x13c>)
 80010ce:	681a      	ldr	r2, [r3, #0]
 80010d0:	4b2b      	ldr	r3, [pc, #172]	@ (8001180 <HAL_TIM_IC_CaptureCallback+0x138>)
 80010d2:	681b      	ldr	r3, [r3, #0]
 80010d4:	1ad3      	subs	r3, r2, r3
 80010d6:	f503 437f 	add.w	r3, r3, #65280	@ 0xff00
 80010da:	33ff      	adds	r3, #255	@ 0xff
 80010dc:	4a2a      	ldr	r2, [pc, #168]	@ (8001188 <HAL_TIM_IC_CaptureCallback+0x140>)
 80010de:	6013      	str	r3, [r2, #0]
            }

            // Kiểm tra lỗi
            if (echo_time < MIN_ECHO_TIME || echo_time > MAX_ECHO_TIME) {
 80010e0:	4b29      	ldr	r3, [pc, #164]	@ (8001188 <HAL_TIM_IC_CaptureCallback+0x140>)
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	2b73      	cmp	r3, #115	@ 0x73
 80010e6:	d905      	bls.n	80010f4 <HAL_TIM_IC_CaptureCallback+0xac>
 80010e8:	4b27      	ldr	r3, [pc, #156]	@ (8001188 <HAL_TIM_IC_CaptureCallback+0x140>)
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	f645 3225 	movw	r2, #23333	@ 0x5b25
 80010f0:	4293      	cmp	r3, r2
 80010f2:	d914      	bls.n	800111e <HAL_TIM_IC_CaptureCallback+0xd6>
                distance = 0;
 80010f4:	4b25      	ldr	r3, [pc, #148]	@ (800118c <HAL_TIM_IC_CaptureCallback+0x144>)
 80010f6:	2200      	movs	r2, #0
 80010f8:	701a      	strb	r2, [r3, #0]
                is_first_cap = 0;
 80010fa:	4b20      	ldr	r3, [pc, #128]	@ (800117c <HAL_TIM_IC_CaptureCallback+0x134>)
 80010fc:	2200      	movs	r2, #0
 80010fe:	701a      	strb	r2, [r3, #0]
                __HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_1, TIM_INPUTCHANNELPOLARITY_RISING);
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	681b      	ldr	r3, [r3, #0]
 8001104:	6a1a      	ldr	r2, [r3, #32]
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	681b      	ldr	r3, [r3, #0]
 800110a:	f022 020a 	bic.w	r2, r2, #10
 800110e:	621a      	str	r2, [r3, #32]
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	681a      	ldr	r2, [r3, #0]
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	6a12      	ldr	r2, [r2, #32]
 800111a:	621a      	str	r2, [r3, #32]
                return;
 800111c:	e02a      	b.n	8001174 <HAL_TIM_IC_CaptureCallback+0x12c>
            }

            // Tính khoảng cách bằng số nguyên
            uint32_t distance_temp = (echo_time * 343) / 20000; // 343/20000 ≈ 0.01715 cm/µs
 800111e:	4b1a      	ldr	r3, [pc, #104]	@ (8001188 <HAL_TIM_IC_CaptureCallback+0x140>)
 8001120:	681b      	ldr	r3, [r3, #0]
 8001122:	f240 1257 	movw	r2, #343	@ 0x157
 8001126:	fb02 f303 	mul.w	r3, r2, r3
 800112a:	4a19      	ldr	r2, [pc, #100]	@ (8001190 <HAL_TIM_IC_CaptureCallback+0x148>)
 800112c:	fba2 2303 	umull	r2, r3, r2, r3
 8001130:	0b9b      	lsrs	r3, r3, #14
 8001132:	60fb      	str	r3, [r7, #12]
            if (distance_temp >= 2 && distance_temp <= 400) {
 8001134:	68fb      	ldr	r3, [r7, #12]
 8001136:	2b01      	cmp	r3, #1
 8001138:	d908      	bls.n	800114c <HAL_TIM_IC_CaptureCallback+0x104>
 800113a:	68fb      	ldr	r3, [r7, #12]
 800113c:	f5b3 7fc8 	cmp.w	r3, #400	@ 0x190
 8001140:	d804      	bhi.n	800114c <HAL_TIM_IC_CaptureCallback+0x104>
                distance = (uint8_t)distance_temp;
 8001142:	68fb      	ldr	r3, [r7, #12]
 8001144:	b2da      	uxtb	r2, r3
 8001146:	4b11      	ldr	r3, [pc, #68]	@ (800118c <HAL_TIM_IC_CaptureCallback+0x144>)
 8001148:	701a      	strb	r2, [r3, #0]
 800114a:	e002      	b.n	8001152 <HAL_TIM_IC_CaptureCallback+0x10a>
            } else {
                distance = 0;
 800114c:	4b0f      	ldr	r3, [pc, #60]	@ (800118c <HAL_TIM_IC_CaptureCallback+0x144>)
 800114e:	2200      	movs	r2, #0
 8001150:	701a      	strb	r2, [r3, #0]
            }

            is_first_cap = 0;
 8001152:	4b0a      	ldr	r3, [pc, #40]	@ (800117c <HAL_TIM_IC_CaptureCallback+0x134>)
 8001154:	2200      	movs	r2, #0
 8001156:	701a      	strb	r2, [r3, #0]
            __HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_1, TIM_INPUTCHANNELPOLARITY_RISING);
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	681b      	ldr	r3, [r3, #0]
 800115c:	6a1a      	ldr	r2, [r3, #32]
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	681b      	ldr	r3, [r3, #0]
 8001162:	f022 020a 	bic.w	r2, r2, #10
 8001166:	621a      	str	r2, [r3, #32]
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	681a      	ldr	r2, [r3, #0]
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	6a12      	ldr	r2, [r2, #32]
 8001172:	621a      	str	r2, [r3, #32]
        }
    }
}
 8001174:	3710      	adds	r7, #16
 8001176:	46bd      	mov	sp, r7
 8001178:	bd80      	pop	{r7, pc}
 800117a:	bf00      	nop
 800117c:	200001c8 	.word	0x200001c8
 8001180:	200001bc 	.word	0x200001bc
 8001184:	200001c0 	.word	0x200001c0
 8001188:	200001c4 	.word	0x200001c4
 800118c:	200001c9 	.word	0x200001c9
 8001190:	d1b71759 	.word	0xd1b71759

08001194 <get_distance>:

uint8_t get_distance(void) {
 8001194:	b580      	push	{r7, lr}
 8001196:	b082      	sub	sp, #8
 8001198:	af00      	add	r7, sp, #0
    uint32_t sum = 0;
 800119a:	2300      	movs	r3, #0
 800119c:	607b      	str	r3, [r7, #4]
    uint8_t valid = 0;
 800119e:	2300      	movs	r3, #0
 80011a0:	70fb      	strb	r3, [r7, #3]
    uint8_t temp_distance;

    for (uint8_t i = 0; i < 5; i++) {
 80011a2:	2300      	movs	r3, #0
 80011a4:	70bb      	strb	r3, [r7, #2]
 80011a6:	e01e      	b.n	80011e6 <get_distance+0x52>
        is_first_cap = 0;
 80011a8:	4b17      	ldr	r3, [pc, #92]	@ (8001208 <get_distance+0x74>)
 80011aa:	2200      	movs	r2, #0
 80011ac:	701a      	strb	r2, [r3, #0]
        HCSR04_trig();
 80011ae:	f7ff ff35 	bl	800101c <HCSR04_trig>
        HAL_Delay(1);
 80011b2:	2001      	movs	r0, #1
 80011b4:	f000 f8c8 	bl	8001348 <HAL_Delay>
        HAL_Delay(10);
 80011b8:	200a      	movs	r0, #10
 80011ba:	f000 f8c5 	bl	8001348 <HAL_Delay>
  __ASM volatile ("cpsid i" : : : "memory");
 80011be:	b672      	cpsid	i
}
 80011c0:	bf00      	nop

        __disable_irq();
        temp_distance = distance;
 80011c2:	4b12      	ldr	r3, [pc, #72]	@ (800120c <get_distance+0x78>)
 80011c4:	781b      	ldrb	r3, [r3, #0]
 80011c6:	707b      	strb	r3, [r7, #1]
  __ASM volatile ("cpsie i" : : : "memory");
 80011c8:	b662      	cpsie	i
}
 80011ca:	bf00      	nop
        __enable_irq();

        if (temp_distance >= 2 && temp_distance <= 400) {
 80011cc:	787b      	ldrb	r3, [r7, #1]
 80011ce:	2b01      	cmp	r3, #1
 80011d0:	d906      	bls.n	80011e0 <get_distance+0x4c>
            sum += temp_distance;
 80011d2:	787b      	ldrb	r3, [r7, #1]
 80011d4:	687a      	ldr	r2, [r7, #4]
 80011d6:	4413      	add	r3, r2
 80011d8:	607b      	str	r3, [r7, #4]
            valid++;
 80011da:	78fb      	ldrb	r3, [r7, #3]
 80011dc:	3301      	adds	r3, #1
 80011de:	70fb      	strb	r3, [r7, #3]
    for (uint8_t i = 0; i < 5; i++) {
 80011e0:	78bb      	ldrb	r3, [r7, #2]
 80011e2:	3301      	adds	r3, #1
 80011e4:	70bb      	strb	r3, [r7, #2]
 80011e6:	78bb      	ldrb	r3, [r7, #2]
 80011e8:	2b04      	cmp	r3, #4
 80011ea:	d9dd      	bls.n	80011a8 <get_distance+0x14>
        }
    }

    if (valid == 0) return 0;
 80011ec:	78fb      	ldrb	r3, [r7, #3]
 80011ee:	2b00      	cmp	r3, #0
 80011f0:	d101      	bne.n	80011f6 <get_distance+0x62>
 80011f2:	2300      	movs	r3, #0
 80011f4:	e004      	b.n	8001200 <get_distance+0x6c>
    return (uint8_t)(sum / valid);
 80011f6:	78fb      	ldrb	r3, [r7, #3]
 80011f8:	687a      	ldr	r2, [r7, #4]
 80011fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80011fe:	b2db      	uxtb	r3, r3
}
 8001200:	4618      	mov	r0, r3
 8001202:	3708      	adds	r7, #8
 8001204:	46bd      	mov	sp, r7
 8001206:	bd80      	pop	{r7, pc}
 8001208:	200001c8 	.word	0x200001c8
 800120c:	200001c9 	.word	0x200001c9

08001210 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001210:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001248 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001214:	f7ff feae 	bl	8000f74 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001218:	480c      	ldr	r0, [pc, #48]	@ (800124c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800121a:	490d      	ldr	r1, [pc, #52]	@ (8001250 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800121c:	4a0d      	ldr	r2, [pc, #52]	@ (8001254 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800121e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001220:	e002      	b.n	8001228 <LoopCopyDataInit>

08001222 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001222:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001224:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001226:	3304      	adds	r3, #4

08001228 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001228:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800122a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800122c:	d3f9      	bcc.n	8001222 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800122e:	4a0a      	ldr	r2, [pc, #40]	@ (8001258 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001230:	4c0a      	ldr	r4, [pc, #40]	@ (800125c <LoopFillZerobss+0x22>)
  movs r3, #0
 8001232:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001234:	e001      	b.n	800123a <LoopFillZerobss>

08001236 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001236:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001238:	3204      	adds	r2, #4

0800123a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800123a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800123c:	d3fb      	bcc.n	8001236 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800123e:	f002 ff05 	bl	800404c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001242:	f7ff faf1 	bl	8000828 <main>
  bx  lr    
 8001246:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001248:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800124c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001250:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8001254:	080049b8 	.word	0x080049b8
  ldr r2, =_sbss
 8001258:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 800125c:	20000318 	.word	0x20000318

08001260 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001260:	e7fe      	b.n	8001260 <ADC_IRQHandler>
	...

08001264 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001264:	b580      	push	{r7, lr}
 8001266:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001268:	4b0e      	ldr	r3, [pc, #56]	@ (80012a4 <HAL_Init+0x40>)
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	4a0d      	ldr	r2, [pc, #52]	@ (80012a4 <HAL_Init+0x40>)
 800126e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001272:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001274:	4b0b      	ldr	r3, [pc, #44]	@ (80012a4 <HAL_Init+0x40>)
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	4a0a      	ldr	r2, [pc, #40]	@ (80012a4 <HAL_Init+0x40>)
 800127a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800127e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001280:	4b08      	ldr	r3, [pc, #32]	@ (80012a4 <HAL_Init+0x40>)
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	4a07      	ldr	r2, [pc, #28]	@ (80012a4 <HAL_Init+0x40>)
 8001286:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800128a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800128c:	2003      	movs	r0, #3
 800128e:	f000 f94f 	bl	8001530 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001292:	200f      	movs	r0, #15
 8001294:	f000 f808 	bl	80012a8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001298:	f7ff fce0 	bl	8000c5c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800129c:	2300      	movs	r3, #0
}
 800129e:	4618      	mov	r0, r3
 80012a0:	bd80      	pop	{r7, pc}
 80012a2:	bf00      	nop
 80012a4:	40023c00 	.word	0x40023c00

080012a8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80012a8:	b580      	push	{r7, lr}
 80012aa:	b082      	sub	sp, #8
 80012ac:	af00      	add	r7, sp, #0
 80012ae:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80012b0:	4b12      	ldr	r3, [pc, #72]	@ (80012fc <HAL_InitTick+0x54>)
 80012b2:	681a      	ldr	r2, [r3, #0]
 80012b4:	4b12      	ldr	r3, [pc, #72]	@ (8001300 <HAL_InitTick+0x58>)
 80012b6:	781b      	ldrb	r3, [r3, #0]
 80012b8:	4619      	mov	r1, r3
 80012ba:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80012be:	fbb3 f3f1 	udiv	r3, r3, r1
 80012c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80012c6:	4618      	mov	r0, r3
 80012c8:	f000 f967 	bl	800159a <HAL_SYSTICK_Config>
 80012cc:	4603      	mov	r3, r0
 80012ce:	2b00      	cmp	r3, #0
 80012d0:	d001      	beq.n	80012d6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80012d2:	2301      	movs	r3, #1
 80012d4:	e00e      	b.n	80012f4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	2b0f      	cmp	r3, #15
 80012da:	d80a      	bhi.n	80012f2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80012dc:	2200      	movs	r2, #0
 80012de:	6879      	ldr	r1, [r7, #4]
 80012e0:	f04f 30ff 	mov.w	r0, #4294967295
 80012e4:	f000 f92f 	bl	8001546 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80012e8:	4a06      	ldr	r2, [pc, #24]	@ (8001304 <HAL_InitTick+0x5c>)
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80012ee:	2300      	movs	r3, #0
 80012f0:	e000      	b.n	80012f4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80012f2:	2301      	movs	r3, #1
}
 80012f4:	4618      	mov	r0, r3
 80012f6:	3708      	adds	r7, #8
 80012f8:	46bd      	mov	sp, r7
 80012fa:	bd80      	pop	{r7, pc}
 80012fc:	20000000 	.word	0x20000000
 8001300:	20000008 	.word	0x20000008
 8001304:	20000004 	.word	0x20000004

08001308 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001308:	b480      	push	{r7}
 800130a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800130c:	4b06      	ldr	r3, [pc, #24]	@ (8001328 <HAL_IncTick+0x20>)
 800130e:	781b      	ldrb	r3, [r3, #0]
 8001310:	461a      	mov	r2, r3
 8001312:	4b06      	ldr	r3, [pc, #24]	@ (800132c <HAL_IncTick+0x24>)
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	4413      	add	r3, r2
 8001318:	4a04      	ldr	r2, [pc, #16]	@ (800132c <HAL_IncTick+0x24>)
 800131a:	6013      	str	r3, [r2, #0]
}
 800131c:	bf00      	nop
 800131e:	46bd      	mov	sp, r7
 8001320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001324:	4770      	bx	lr
 8001326:	bf00      	nop
 8001328:	20000008 	.word	0x20000008
 800132c:	200001cc 	.word	0x200001cc

08001330 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001330:	b480      	push	{r7}
 8001332:	af00      	add	r7, sp, #0
  return uwTick;
 8001334:	4b03      	ldr	r3, [pc, #12]	@ (8001344 <HAL_GetTick+0x14>)
 8001336:	681b      	ldr	r3, [r3, #0]
}
 8001338:	4618      	mov	r0, r3
 800133a:	46bd      	mov	sp, r7
 800133c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001340:	4770      	bx	lr
 8001342:	bf00      	nop
 8001344:	200001cc 	.word	0x200001cc

08001348 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001348:	b580      	push	{r7, lr}
 800134a:	b084      	sub	sp, #16
 800134c:	af00      	add	r7, sp, #0
 800134e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001350:	f7ff ffee 	bl	8001330 <HAL_GetTick>
 8001354:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800135a:	68fb      	ldr	r3, [r7, #12]
 800135c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001360:	d005      	beq.n	800136e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001362:	4b0a      	ldr	r3, [pc, #40]	@ (800138c <HAL_Delay+0x44>)
 8001364:	781b      	ldrb	r3, [r3, #0]
 8001366:	461a      	mov	r2, r3
 8001368:	68fb      	ldr	r3, [r7, #12]
 800136a:	4413      	add	r3, r2
 800136c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800136e:	bf00      	nop
 8001370:	f7ff ffde 	bl	8001330 <HAL_GetTick>
 8001374:	4602      	mov	r2, r0
 8001376:	68bb      	ldr	r3, [r7, #8]
 8001378:	1ad3      	subs	r3, r2, r3
 800137a:	68fa      	ldr	r2, [r7, #12]
 800137c:	429a      	cmp	r2, r3
 800137e:	d8f7      	bhi.n	8001370 <HAL_Delay+0x28>
  {
  }
}
 8001380:	bf00      	nop
 8001382:	bf00      	nop
 8001384:	3710      	adds	r7, #16
 8001386:	46bd      	mov	sp, r7
 8001388:	bd80      	pop	{r7, pc}
 800138a:	bf00      	nop
 800138c:	20000008 	.word	0x20000008

08001390 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001390:	b480      	push	{r7}
 8001392:	b085      	sub	sp, #20
 8001394:	af00      	add	r7, sp, #0
 8001396:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	f003 0307 	and.w	r3, r3, #7
 800139e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80013a0:	4b0c      	ldr	r3, [pc, #48]	@ (80013d4 <__NVIC_SetPriorityGrouping+0x44>)
 80013a2:	68db      	ldr	r3, [r3, #12]
 80013a4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80013a6:	68ba      	ldr	r2, [r7, #8]
 80013a8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80013ac:	4013      	ands	r3, r2
 80013ae:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80013b0:	68fb      	ldr	r3, [r7, #12]
 80013b2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80013b4:	68bb      	ldr	r3, [r7, #8]
 80013b6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80013b8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80013bc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80013c0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80013c2:	4a04      	ldr	r2, [pc, #16]	@ (80013d4 <__NVIC_SetPriorityGrouping+0x44>)
 80013c4:	68bb      	ldr	r3, [r7, #8]
 80013c6:	60d3      	str	r3, [r2, #12]
}
 80013c8:	bf00      	nop
 80013ca:	3714      	adds	r7, #20
 80013cc:	46bd      	mov	sp, r7
 80013ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d2:	4770      	bx	lr
 80013d4:	e000ed00 	.word	0xe000ed00

080013d8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80013d8:	b480      	push	{r7}
 80013da:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80013dc:	4b04      	ldr	r3, [pc, #16]	@ (80013f0 <__NVIC_GetPriorityGrouping+0x18>)
 80013de:	68db      	ldr	r3, [r3, #12]
 80013e0:	0a1b      	lsrs	r3, r3, #8
 80013e2:	f003 0307 	and.w	r3, r3, #7
}
 80013e6:	4618      	mov	r0, r3
 80013e8:	46bd      	mov	sp, r7
 80013ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ee:	4770      	bx	lr
 80013f0:	e000ed00 	.word	0xe000ed00

080013f4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80013f4:	b480      	push	{r7}
 80013f6:	b083      	sub	sp, #12
 80013f8:	af00      	add	r7, sp, #0
 80013fa:	4603      	mov	r3, r0
 80013fc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80013fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001402:	2b00      	cmp	r3, #0
 8001404:	db0b      	blt.n	800141e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001406:	79fb      	ldrb	r3, [r7, #7]
 8001408:	f003 021f 	and.w	r2, r3, #31
 800140c:	4907      	ldr	r1, [pc, #28]	@ (800142c <__NVIC_EnableIRQ+0x38>)
 800140e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001412:	095b      	lsrs	r3, r3, #5
 8001414:	2001      	movs	r0, #1
 8001416:	fa00 f202 	lsl.w	r2, r0, r2
 800141a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800141e:	bf00      	nop
 8001420:	370c      	adds	r7, #12
 8001422:	46bd      	mov	sp, r7
 8001424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001428:	4770      	bx	lr
 800142a:	bf00      	nop
 800142c:	e000e100 	.word	0xe000e100

08001430 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001430:	b480      	push	{r7}
 8001432:	b083      	sub	sp, #12
 8001434:	af00      	add	r7, sp, #0
 8001436:	4603      	mov	r3, r0
 8001438:	6039      	str	r1, [r7, #0]
 800143a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800143c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001440:	2b00      	cmp	r3, #0
 8001442:	db0a      	blt.n	800145a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001444:	683b      	ldr	r3, [r7, #0]
 8001446:	b2da      	uxtb	r2, r3
 8001448:	490c      	ldr	r1, [pc, #48]	@ (800147c <__NVIC_SetPriority+0x4c>)
 800144a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800144e:	0112      	lsls	r2, r2, #4
 8001450:	b2d2      	uxtb	r2, r2
 8001452:	440b      	add	r3, r1
 8001454:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001458:	e00a      	b.n	8001470 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800145a:	683b      	ldr	r3, [r7, #0]
 800145c:	b2da      	uxtb	r2, r3
 800145e:	4908      	ldr	r1, [pc, #32]	@ (8001480 <__NVIC_SetPriority+0x50>)
 8001460:	79fb      	ldrb	r3, [r7, #7]
 8001462:	f003 030f 	and.w	r3, r3, #15
 8001466:	3b04      	subs	r3, #4
 8001468:	0112      	lsls	r2, r2, #4
 800146a:	b2d2      	uxtb	r2, r2
 800146c:	440b      	add	r3, r1
 800146e:	761a      	strb	r2, [r3, #24]
}
 8001470:	bf00      	nop
 8001472:	370c      	adds	r7, #12
 8001474:	46bd      	mov	sp, r7
 8001476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800147a:	4770      	bx	lr
 800147c:	e000e100 	.word	0xe000e100
 8001480:	e000ed00 	.word	0xe000ed00

08001484 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001484:	b480      	push	{r7}
 8001486:	b089      	sub	sp, #36	@ 0x24
 8001488:	af00      	add	r7, sp, #0
 800148a:	60f8      	str	r0, [r7, #12]
 800148c:	60b9      	str	r1, [r7, #8]
 800148e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001490:	68fb      	ldr	r3, [r7, #12]
 8001492:	f003 0307 	and.w	r3, r3, #7
 8001496:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001498:	69fb      	ldr	r3, [r7, #28]
 800149a:	f1c3 0307 	rsb	r3, r3, #7
 800149e:	2b04      	cmp	r3, #4
 80014a0:	bf28      	it	cs
 80014a2:	2304      	movcs	r3, #4
 80014a4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80014a6:	69fb      	ldr	r3, [r7, #28]
 80014a8:	3304      	adds	r3, #4
 80014aa:	2b06      	cmp	r3, #6
 80014ac:	d902      	bls.n	80014b4 <NVIC_EncodePriority+0x30>
 80014ae:	69fb      	ldr	r3, [r7, #28]
 80014b0:	3b03      	subs	r3, #3
 80014b2:	e000      	b.n	80014b6 <NVIC_EncodePriority+0x32>
 80014b4:	2300      	movs	r3, #0
 80014b6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80014b8:	f04f 32ff 	mov.w	r2, #4294967295
 80014bc:	69bb      	ldr	r3, [r7, #24]
 80014be:	fa02 f303 	lsl.w	r3, r2, r3
 80014c2:	43da      	mvns	r2, r3
 80014c4:	68bb      	ldr	r3, [r7, #8]
 80014c6:	401a      	ands	r2, r3
 80014c8:	697b      	ldr	r3, [r7, #20]
 80014ca:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80014cc:	f04f 31ff 	mov.w	r1, #4294967295
 80014d0:	697b      	ldr	r3, [r7, #20]
 80014d2:	fa01 f303 	lsl.w	r3, r1, r3
 80014d6:	43d9      	mvns	r1, r3
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80014dc:	4313      	orrs	r3, r2
         );
}
 80014de:	4618      	mov	r0, r3
 80014e0:	3724      	adds	r7, #36	@ 0x24
 80014e2:	46bd      	mov	sp, r7
 80014e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e8:	4770      	bx	lr
	...

080014ec <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80014ec:	b580      	push	{r7, lr}
 80014ee:	b082      	sub	sp, #8
 80014f0:	af00      	add	r7, sp, #0
 80014f2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	3b01      	subs	r3, #1
 80014f8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80014fc:	d301      	bcc.n	8001502 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80014fe:	2301      	movs	r3, #1
 8001500:	e00f      	b.n	8001522 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001502:	4a0a      	ldr	r2, [pc, #40]	@ (800152c <SysTick_Config+0x40>)
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	3b01      	subs	r3, #1
 8001508:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800150a:	210f      	movs	r1, #15
 800150c:	f04f 30ff 	mov.w	r0, #4294967295
 8001510:	f7ff ff8e 	bl	8001430 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001514:	4b05      	ldr	r3, [pc, #20]	@ (800152c <SysTick_Config+0x40>)
 8001516:	2200      	movs	r2, #0
 8001518:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800151a:	4b04      	ldr	r3, [pc, #16]	@ (800152c <SysTick_Config+0x40>)
 800151c:	2207      	movs	r2, #7
 800151e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001520:	2300      	movs	r3, #0
}
 8001522:	4618      	mov	r0, r3
 8001524:	3708      	adds	r7, #8
 8001526:	46bd      	mov	sp, r7
 8001528:	bd80      	pop	{r7, pc}
 800152a:	bf00      	nop
 800152c:	e000e010 	.word	0xe000e010

08001530 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001530:	b580      	push	{r7, lr}
 8001532:	b082      	sub	sp, #8
 8001534:	af00      	add	r7, sp, #0
 8001536:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001538:	6878      	ldr	r0, [r7, #4]
 800153a:	f7ff ff29 	bl	8001390 <__NVIC_SetPriorityGrouping>
}
 800153e:	bf00      	nop
 8001540:	3708      	adds	r7, #8
 8001542:	46bd      	mov	sp, r7
 8001544:	bd80      	pop	{r7, pc}

08001546 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001546:	b580      	push	{r7, lr}
 8001548:	b086      	sub	sp, #24
 800154a:	af00      	add	r7, sp, #0
 800154c:	4603      	mov	r3, r0
 800154e:	60b9      	str	r1, [r7, #8]
 8001550:	607a      	str	r2, [r7, #4]
 8001552:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001554:	2300      	movs	r3, #0
 8001556:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001558:	f7ff ff3e 	bl	80013d8 <__NVIC_GetPriorityGrouping>
 800155c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800155e:	687a      	ldr	r2, [r7, #4]
 8001560:	68b9      	ldr	r1, [r7, #8]
 8001562:	6978      	ldr	r0, [r7, #20]
 8001564:	f7ff ff8e 	bl	8001484 <NVIC_EncodePriority>
 8001568:	4602      	mov	r2, r0
 800156a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800156e:	4611      	mov	r1, r2
 8001570:	4618      	mov	r0, r3
 8001572:	f7ff ff5d 	bl	8001430 <__NVIC_SetPriority>
}
 8001576:	bf00      	nop
 8001578:	3718      	adds	r7, #24
 800157a:	46bd      	mov	sp, r7
 800157c:	bd80      	pop	{r7, pc}

0800157e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800157e:	b580      	push	{r7, lr}
 8001580:	b082      	sub	sp, #8
 8001582:	af00      	add	r7, sp, #0
 8001584:	4603      	mov	r3, r0
 8001586:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001588:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800158c:	4618      	mov	r0, r3
 800158e:	f7ff ff31 	bl	80013f4 <__NVIC_EnableIRQ>
}
 8001592:	bf00      	nop
 8001594:	3708      	adds	r7, #8
 8001596:	46bd      	mov	sp, r7
 8001598:	bd80      	pop	{r7, pc}

0800159a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800159a:	b580      	push	{r7, lr}
 800159c:	b082      	sub	sp, #8
 800159e:	af00      	add	r7, sp, #0
 80015a0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80015a2:	6878      	ldr	r0, [r7, #4]
 80015a4:	f7ff ffa2 	bl	80014ec <SysTick_Config>
 80015a8:	4603      	mov	r3, r0
}
 80015aa:	4618      	mov	r0, r3
 80015ac:	3708      	adds	r7, #8
 80015ae:	46bd      	mov	sp, r7
 80015b0:	bd80      	pop	{r7, pc}
	...

080015b4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80015b4:	b480      	push	{r7}
 80015b6:	b089      	sub	sp, #36	@ 0x24
 80015b8:	af00      	add	r7, sp, #0
 80015ba:	6078      	str	r0, [r7, #4]
 80015bc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80015be:	2300      	movs	r3, #0
 80015c0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80015c2:	2300      	movs	r3, #0
 80015c4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80015c6:	2300      	movs	r3, #0
 80015c8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80015ca:	2300      	movs	r3, #0
 80015cc:	61fb      	str	r3, [r7, #28]
 80015ce:	e159      	b.n	8001884 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80015d0:	2201      	movs	r2, #1
 80015d2:	69fb      	ldr	r3, [r7, #28]
 80015d4:	fa02 f303 	lsl.w	r3, r2, r3
 80015d8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80015da:	683b      	ldr	r3, [r7, #0]
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	697a      	ldr	r2, [r7, #20]
 80015e0:	4013      	ands	r3, r2
 80015e2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80015e4:	693a      	ldr	r2, [r7, #16]
 80015e6:	697b      	ldr	r3, [r7, #20]
 80015e8:	429a      	cmp	r2, r3
 80015ea:	f040 8148 	bne.w	800187e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80015ee:	683b      	ldr	r3, [r7, #0]
 80015f0:	685b      	ldr	r3, [r3, #4]
 80015f2:	f003 0303 	and.w	r3, r3, #3
 80015f6:	2b01      	cmp	r3, #1
 80015f8:	d005      	beq.n	8001606 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80015fa:	683b      	ldr	r3, [r7, #0]
 80015fc:	685b      	ldr	r3, [r3, #4]
 80015fe:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001602:	2b02      	cmp	r3, #2
 8001604:	d130      	bne.n	8001668 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	689b      	ldr	r3, [r3, #8]
 800160a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800160c:	69fb      	ldr	r3, [r7, #28]
 800160e:	005b      	lsls	r3, r3, #1
 8001610:	2203      	movs	r2, #3
 8001612:	fa02 f303 	lsl.w	r3, r2, r3
 8001616:	43db      	mvns	r3, r3
 8001618:	69ba      	ldr	r2, [r7, #24]
 800161a:	4013      	ands	r3, r2
 800161c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800161e:	683b      	ldr	r3, [r7, #0]
 8001620:	68da      	ldr	r2, [r3, #12]
 8001622:	69fb      	ldr	r3, [r7, #28]
 8001624:	005b      	lsls	r3, r3, #1
 8001626:	fa02 f303 	lsl.w	r3, r2, r3
 800162a:	69ba      	ldr	r2, [r7, #24]
 800162c:	4313      	orrs	r3, r2
 800162e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	69ba      	ldr	r2, [r7, #24]
 8001634:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	685b      	ldr	r3, [r3, #4]
 800163a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800163c:	2201      	movs	r2, #1
 800163e:	69fb      	ldr	r3, [r7, #28]
 8001640:	fa02 f303 	lsl.w	r3, r2, r3
 8001644:	43db      	mvns	r3, r3
 8001646:	69ba      	ldr	r2, [r7, #24]
 8001648:	4013      	ands	r3, r2
 800164a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800164c:	683b      	ldr	r3, [r7, #0]
 800164e:	685b      	ldr	r3, [r3, #4]
 8001650:	091b      	lsrs	r3, r3, #4
 8001652:	f003 0201 	and.w	r2, r3, #1
 8001656:	69fb      	ldr	r3, [r7, #28]
 8001658:	fa02 f303 	lsl.w	r3, r2, r3
 800165c:	69ba      	ldr	r2, [r7, #24]
 800165e:	4313      	orrs	r3, r2
 8001660:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	69ba      	ldr	r2, [r7, #24]
 8001666:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001668:	683b      	ldr	r3, [r7, #0]
 800166a:	685b      	ldr	r3, [r3, #4]
 800166c:	f003 0303 	and.w	r3, r3, #3
 8001670:	2b03      	cmp	r3, #3
 8001672:	d017      	beq.n	80016a4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	68db      	ldr	r3, [r3, #12]
 8001678:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800167a:	69fb      	ldr	r3, [r7, #28]
 800167c:	005b      	lsls	r3, r3, #1
 800167e:	2203      	movs	r2, #3
 8001680:	fa02 f303 	lsl.w	r3, r2, r3
 8001684:	43db      	mvns	r3, r3
 8001686:	69ba      	ldr	r2, [r7, #24]
 8001688:	4013      	ands	r3, r2
 800168a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800168c:	683b      	ldr	r3, [r7, #0]
 800168e:	689a      	ldr	r2, [r3, #8]
 8001690:	69fb      	ldr	r3, [r7, #28]
 8001692:	005b      	lsls	r3, r3, #1
 8001694:	fa02 f303 	lsl.w	r3, r2, r3
 8001698:	69ba      	ldr	r2, [r7, #24]
 800169a:	4313      	orrs	r3, r2
 800169c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	69ba      	ldr	r2, [r7, #24]
 80016a2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80016a4:	683b      	ldr	r3, [r7, #0]
 80016a6:	685b      	ldr	r3, [r3, #4]
 80016a8:	f003 0303 	and.w	r3, r3, #3
 80016ac:	2b02      	cmp	r3, #2
 80016ae:	d123      	bne.n	80016f8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80016b0:	69fb      	ldr	r3, [r7, #28]
 80016b2:	08da      	lsrs	r2, r3, #3
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	3208      	adds	r2, #8
 80016b8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80016bc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80016be:	69fb      	ldr	r3, [r7, #28]
 80016c0:	f003 0307 	and.w	r3, r3, #7
 80016c4:	009b      	lsls	r3, r3, #2
 80016c6:	220f      	movs	r2, #15
 80016c8:	fa02 f303 	lsl.w	r3, r2, r3
 80016cc:	43db      	mvns	r3, r3
 80016ce:	69ba      	ldr	r2, [r7, #24]
 80016d0:	4013      	ands	r3, r2
 80016d2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80016d4:	683b      	ldr	r3, [r7, #0]
 80016d6:	691a      	ldr	r2, [r3, #16]
 80016d8:	69fb      	ldr	r3, [r7, #28]
 80016da:	f003 0307 	and.w	r3, r3, #7
 80016de:	009b      	lsls	r3, r3, #2
 80016e0:	fa02 f303 	lsl.w	r3, r2, r3
 80016e4:	69ba      	ldr	r2, [r7, #24]
 80016e6:	4313      	orrs	r3, r2
 80016e8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80016ea:	69fb      	ldr	r3, [r7, #28]
 80016ec:	08da      	lsrs	r2, r3, #3
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	3208      	adds	r2, #8
 80016f2:	69b9      	ldr	r1, [r7, #24]
 80016f4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80016fe:	69fb      	ldr	r3, [r7, #28]
 8001700:	005b      	lsls	r3, r3, #1
 8001702:	2203      	movs	r2, #3
 8001704:	fa02 f303 	lsl.w	r3, r2, r3
 8001708:	43db      	mvns	r3, r3
 800170a:	69ba      	ldr	r2, [r7, #24]
 800170c:	4013      	ands	r3, r2
 800170e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001710:	683b      	ldr	r3, [r7, #0]
 8001712:	685b      	ldr	r3, [r3, #4]
 8001714:	f003 0203 	and.w	r2, r3, #3
 8001718:	69fb      	ldr	r3, [r7, #28]
 800171a:	005b      	lsls	r3, r3, #1
 800171c:	fa02 f303 	lsl.w	r3, r2, r3
 8001720:	69ba      	ldr	r2, [r7, #24]
 8001722:	4313      	orrs	r3, r2
 8001724:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	69ba      	ldr	r2, [r7, #24]
 800172a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800172c:	683b      	ldr	r3, [r7, #0]
 800172e:	685b      	ldr	r3, [r3, #4]
 8001730:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001734:	2b00      	cmp	r3, #0
 8001736:	f000 80a2 	beq.w	800187e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800173a:	2300      	movs	r3, #0
 800173c:	60fb      	str	r3, [r7, #12]
 800173e:	4b57      	ldr	r3, [pc, #348]	@ (800189c <HAL_GPIO_Init+0x2e8>)
 8001740:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001742:	4a56      	ldr	r2, [pc, #344]	@ (800189c <HAL_GPIO_Init+0x2e8>)
 8001744:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001748:	6453      	str	r3, [r2, #68]	@ 0x44
 800174a:	4b54      	ldr	r3, [pc, #336]	@ (800189c <HAL_GPIO_Init+0x2e8>)
 800174c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800174e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001752:	60fb      	str	r3, [r7, #12]
 8001754:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001756:	4a52      	ldr	r2, [pc, #328]	@ (80018a0 <HAL_GPIO_Init+0x2ec>)
 8001758:	69fb      	ldr	r3, [r7, #28]
 800175a:	089b      	lsrs	r3, r3, #2
 800175c:	3302      	adds	r3, #2
 800175e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001762:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001764:	69fb      	ldr	r3, [r7, #28]
 8001766:	f003 0303 	and.w	r3, r3, #3
 800176a:	009b      	lsls	r3, r3, #2
 800176c:	220f      	movs	r2, #15
 800176e:	fa02 f303 	lsl.w	r3, r2, r3
 8001772:	43db      	mvns	r3, r3
 8001774:	69ba      	ldr	r2, [r7, #24]
 8001776:	4013      	ands	r3, r2
 8001778:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	4a49      	ldr	r2, [pc, #292]	@ (80018a4 <HAL_GPIO_Init+0x2f0>)
 800177e:	4293      	cmp	r3, r2
 8001780:	d019      	beq.n	80017b6 <HAL_GPIO_Init+0x202>
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	4a48      	ldr	r2, [pc, #288]	@ (80018a8 <HAL_GPIO_Init+0x2f4>)
 8001786:	4293      	cmp	r3, r2
 8001788:	d013      	beq.n	80017b2 <HAL_GPIO_Init+0x1fe>
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	4a47      	ldr	r2, [pc, #284]	@ (80018ac <HAL_GPIO_Init+0x2f8>)
 800178e:	4293      	cmp	r3, r2
 8001790:	d00d      	beq.n	80017ae <HAL_GPIO_Init+0x1fa>
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	4a46      	ldr	r2, [pc, #280]	@ (80018b0 <HAL_GPIO_Init+0x2fc>)
 8001796:	4293      	cmp	r3, r2
 8001798:	d007      	beq.n	80017aa <HAL_GPIO_Init+0x1f6>
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	4a45      	ldr	r2, [pc, #276]	@ (80018b4 <HAL_GPIO_Init+0x300>)
 800179e:	4293      	cmp	r3, r2
 80017a0:	d101      	bne.n	80017a6 <HAL_GPIO_Init+0x1f2>
 80017a2:	2304      	movs	r3, #4
 80017a4:	e008      	b.n	80017b8 <HAL_GPIO_Init+0x204>
 80017a6:	2307      	movs	r3, #7
 80017a8:	e006      	b.n	80017b8 <HAL_GPIO_Init+0x204>
 80017aa:	2303      	movs	r3, #3
 80017ac:	e004      	b.n	80017b8 <HAL_GPIO_Init+0x204>
 80017ae:	2302      	movs	r3, #2
 80017b0:	e002      	b.n	80017b8 <HAL_GPIO_Init+0x204>
 80017b2:	2301      	movs	r3, #1
 80017b4:	e000      	b.n	80017b8 <HAL_GPIO_Init+0x204>
 80017b6:	2300      	movs	r3, #0
 80017b8:	69fa      	ldr	r2, [r7, #28]
 80017ba:	f002 0203 	and.w	r2, r2, #3
 80017be:	0092      	lsls	r2, r2, #2
 80017c0:	4093      	lsls	r3, r2
 80017c2:	69ba      	ldr	r2, [r7, #24]
 80017c4:	4313      	orrs	r3, r2
 80017c6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80017c8:	4935      	ldr	r1, [pc, #212]	@ (80018a0 <HAL_GPIO_Init+0x2ec>)
 80017ca:	69fb      	ldr	r3, [r7, #28]
 80017cc:	089b      	lsrs	r3, r3, #2
 80017ce:	3302      	adds	r3, #2
 80017d0:	69ba      	ldr	r2, [r7, #24]
 80017d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80017d6:	4b38      	ldr	r3, [pc, #224]	@ (80018b8 <HAL_GPIO_Init+0x304>)
 80017d8:	689b      	ldr	r3, [r3, #8]
 80017da:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80017dc:	693b      	ldr	r3, [r7, #16]
 80017de:	43db      	mvns	r3, r3
 80017e0:	69ba      	ldr	r2, [r7, #24]
 80017e2:	4013      	ands	r3, r2
 80017e4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80017e6:	683b      	ldr	r3, [r7, #0]
 80017e8:	685b      	ldr	r3, [r3, #4]
 80017ea:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	d003      	beq.n	80017fa <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80017f2:	69ba      	ldr	r2, [r7, #24]
 80017f4:	693b      	ldr	r3, [r7, #16]
 80017f6:	4313      	orrs	r3, r2
 80017f8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80017fa:	4a2f      	ldr	r2, [pc, #188]	@ (80018b8 <HAL_GPIO_Init+0x304>)
 80017fc:	69bb      	ldr	r3, [r7, #24]
 80017fe:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001800:	4b2d      	ldr	r3, [pc, #180]	@ (80018b8 <HAL_GPIO_Init+0x304>)
 8001802:	68db      	ldr	r3, [r3, #12]
 8001804:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001806:	693b      	ldr	r3, [r7, #16]
 8001808:	43db      	mvns	r3, r3
 800180a:	69ba      	ldr	r2, [r7, #24]
 800180c:	4013      	ands	r3, r2
 800180e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001810:	683b      	ldr	r3, [r7, #0]
 8001812:	685b      	ldr	r3, [r3, #4]
 8001814:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001818:	2b00      	cmp	r3, #0
 800181a:	d003      	beq.n	8001824 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 800181c:	69ba      	ldr	r2, [r7, #24]
 800181e:	693b      	ldr	r3, [r7, #16]
 8001820:	4313      	orrs	r3, r2
 8001822:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001824:	4a24      	ldr	r2, [pc, #144]	@ (80018b8 <HAL_GPIO_Init+0x304>)
 8001826:	69bb      	ldr	r3, [r7, #24]
 8001828:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800182a:	4b23      	ldr	r3, [pc, #140]	@ (80018b8 <HAL_GPIO_Init+0x304>)
 800182c:	685b      	ldr	r3, [r3, #4]
 800182e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001830:	693b      	ldr	r3, [r7, #16]
 8001832:	43db      	mvns	r3, r3
 8001834:	69ba      	ldr	r2, [r7, #24]
 8001836:	4013      	ands	r3, r2
 8001838:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800183a:	683b      	ldr	r3, [r7, #0]
 800183c:	685b      	ldr	r3, [r3, #4]
 800183e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001842:	2b00      	cmp	r3, #0
 8001844:	d003      	beq.n	800184e <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001846:	69ba      	ldr	r2, [r7, #24]
 8001848:	693b      	ldr	r3, [r7, #16]
 800184a:	4313      	orrs	r3, r2
 800184c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800184e:	4a1a      	ldr	r2, [pc, #104]	@ (80018b8 <HAL_GPIO_Init+0x304>)
 8001850:	69bb      	ldr	r3, [r7, #24]
 8001852:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001854:	4b18      	ldr	r3, [pc, #96]	@ (80018b8 <HAL_GPIO_Init+0x304>)
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800185a:	693b      	ldr	r3, [r7, #16]
 800185c:	43db      	mvns	r3, r3
 800185e:	69ba      	ldr	r2, [r7, #24]
 8001860:	4013      	ands	r3, r2
 8001862:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001864:	683b      	ldr	r3, [r7, #0]
 8001866:	685b      	ldr	r3, [r3, #4]
 8001868:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800186c:	2b00      	cmp	r3, #0
 800186e:	d003      	beq.n	8001878 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001870:	69ba      	ldr	r2, [r7, #24]
 8001872:	693b      	ldr	r3, [r7, #16]
 8001874:	4313      	orrs	r3, r2
 8001876:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001878:	4a0f      	ldr	r2, [pc, #60]	@ (80018b8 <HAL_GPIO_Init+0x304>)
 800187a:	69bb      	ldr	r3, [r7, #24]
 800187c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800187e:	69fb      	ldr	r3, [r7, #28]
 8001880:	3301      	adds	r3, #1
 8001882:	61fb      	str	r3, [r7, #28]
 8001884:	69fb      	ldr	r3, [r7, #28]
 8001886:	2b0f      	cmp	r3, #15
 8001888:	f67f aea2 	bls.w	80015d0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800188c:	bf00      	nop
 800188e:	bf00      	nop
 8001890:	3724      	adds	r7, #36	@ 0x24
 8001892:	46bd      	mov	sp, r7
 8001894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001898:	4770      	bx	lr
 800189a:	bf00      	nop
 800189c:	40023800 	.word	0x40023800
 80018a0:	40013800 	.word	0x40013800
 80018a4:	40020000 	.word	0x40020000
 80018a8:	40020400 	.word	0x40020400
 80018ac:	40020800 	.word	0x40020800
 80018b0:	40020c00 	.word	0x40020c00
 80018b4:	40021000 	.word	0x40021000
 80018b8:	40013c00 	.word	0x40013c00

080018bc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80018bc:	b480      	push	{r7}
 80018be:	b083      	sub	sp, #12
 80018c0:	af00      	add	r7, sp, #0
 80018c2:	6078      	str	r0, [r7, #4]
 80018c4:	460b      	mov	r3, r1
 80018c6:	807b      	strh	r3, [r7, #2]
 80018c8:	4613      	mov	r3, r2
 80018ca:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80018cc:	787b      	ldrb	r3, [r7, #1]
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	d003      	beq.n	80018da <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80018d2:	887a      	ldrh	r2, [r7, #2]
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80018d8:	e003      	b.n	80018e2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80018da:	887b      	ldrh	r3, [r7, #2]
 80018dc:	041a      	lsls	r2, r3, #16
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	619a      	str	r2, [r3, #24]
}
 80018e2:	bf00      	nop
 80018e4:	370c      	adds	r7, #12
 80018e6:	46bd      	mov	sp, r7
 80018e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ec:	4770      	bx	lr
	...

080018f0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80018f0:	b580      	push	{r7, lr}
 80018f2:	b084      	sub	sp, #16
 80018f4:	af00      	add	r7, sp, #0
 80018f6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	d101      	bne.n	8001902 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80018fe:	2301      	movs	r3, #1
 8001900:	e12b      	b.n	8001b5a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001908:	b2db      	uxtb	r3, r3
 800190a:	2b00      	cmp	r3, #0
 800190c:	d106      	bne.n	800191c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	2200      	movs	r2, #0
 8001912:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001916:	6878      	ldr	r0, [r7, #4]
 8001918:	f7ff f9c8 	bl	8000cac <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	2224      	movs	r2, #36	@ 0x24
 8001920:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	681a      	ldr	r2, [r3, #0]
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	f022 0201 	bic.w	r2, r2, #1
 8001932:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	681a      	ldr	r2, [r3, #0]
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8001942:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	681a      	ldr	r2, [r3, #0]
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001952:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001954:	f001 f89a 	bl	8002a8c <HAL_RCC_GetPCLK1Freq>
 8001958:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	685b      	ldr	r3, [r3, #4]
 800195e:	4a81      	ldr	r2, [pc, #516]	@ (8001b64 <HAL_I2C_Init+0x274>)
 8001960:	4293      	cmp	r3, r2
 8001962:	d807      	bhi.n	8001974 <HAL_I2C_Init+0x84>
 8001964:	68fb      	ldr	r3, [r7, #12]
 8001966:	4a80      	ldr	r2, [pc, #512]	@ (8001b68 <HAL_I2C_Init+0x278>)
 8001968:	4293      	cmp	r3, r2
 800196a:	bf94      	ite	ls
 800196c:	2301      	movls	r3, #1
 800196e:	2300      	movhi	r3, #0
 8001970:	b2db      	uxtb	r3, r3
 8001972:	e006      	b.n	8001982 <HAL_I2C_Init+0x92>
 8001974:	68fb      	ldr	r3, [r7, #12]
 8001976:	4a7d      	ldr	r2, [pc, #500]	@ (8001b6c <HAL_I2C_Init+0x27c>)
 8001978:	4293      	cmp	r3, r2
 800197a:	bf94      	ite	ls
 800197c:	2301      	movls	r3, #1
 800197e:	2300      	movhi	r3, #0
 8001980:	b2db      	uxtb	r3, r3
 8001982:	2b00      	cmp	r3, #0
 8001984:	d001      	beq.n	800198a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001986:	2301      	movs	r3, #1
 8001988:	e0e7      	b.n	8001b5a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800198a:	68fb      	ldr	r3, [r7, #12]
 800198c:	4a78      	ldr	r2, [pc, #480]	@ (8001b70 <HAL_I2C_Init+0x280>)
 800198e:	fba2 2303 	umull	r2, r3, r2, r3
 8001992:	0c9b      	lsrs	r3, r3, #18
 8001994:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	685b      	ldr	r3, [r3, #4]
 800199c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	68ba      	ldr	r2, [r7, #8]
 80019a6:	430a      	orrs	r2, r1
 80019a8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	6a1b      	ldr	r3, [r3, #32]
 80019b0:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	685b      	ldr	r3, [r3, #4]
 80019b8:	4a6a      	ldr	r2, [pc, #424]	@ (8001b64 <HAL_I2C_Init+0x274>)
 80019ba:	4293      	cmp	r3, r2
 80019bc:	d802      	bhi.n	80019c4 <HAL_I2C_Init+0xd4>
 80019be:	68bb      	ldr	r3, [r7, #8]
 80019c0:	3301      	adds	r3, #1
 80019c2:	e009      	b.n	80019d8 <HAL_I2C_Init+0xe8>
 80019c4:	68bb      	ldr	r3, [r7, #8]
 80019c6:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80019ca:	fb02 f303 	mul.w	r3, r2, r3
 80019ce:	4a69      	ldr	r2, [pc, #420]	@ (8001b74 <HAL_I2C_Init+0x284>)
 80019d0:	fba2 2303 	umull	r2, r3, r2, r3
 80019d4:	099b      	lsrs	r3, r3, #6
 80019d6:	3301      	adds	r3, #1
 80019d8:	687a      	ldr	r2, [r7, #4]
 80019da:	6812      	ldr	r2, [r2, #0]
 80019dc:	430b      	orrs	r3, r1
 80019de:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	69db      	ldr	r3, [r3, #28]
 80019e6:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 80019ea:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	685b      	ldr	r3, [r3, #4]
 80019f2:	495c      	ldr	r1, [pc, #368]	@ (8001b64 <HAL_I2C_Init+0x274>)
 80019f4:	428b      	cmp	r3, r1
 80019f6:	d819      	bhi.n	8001a2c <HAL_I2C_Init+0x13c>
 80019f8:	68fb      	ldr	r3, [r7, #12]
 80019fa:	1e59      	subs	r1, r3, #1
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	685b      	ldr	r3, [r3, #4]
 8001a00:	005b      	lsls	r3, r3, #1
 8001a02:	fbb1 f3f3 	udiv	r3, r1, r3
 8001a06:	1c59      	adds	r1, r3, #1
 8001a08:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8001a0c:	400b      	ands	r3, r1
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	d00a      	beq.n	8001a28 <HAL_I2C_Init+0x138>
 8001a12:	68fb      	ldr	r3, [r7, #12]
 8001a14:	1e59      	subs	r1, r3, #1
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	685b      	ldr	r3, [r3, #4]
 8001a1a:	005b      	lsls	r3, r3, #1
 8001a1c:	fbb1 f3f3 	udiv	r3, r1, r3
 8001a20:	3301      	adds	r3, #1
 8001a22:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001a26:	e051      	b.n	8001acc <HAL_I2C_Init+0x1dc>
 8001a28:	2304      	movs	r3, #4
 8001a2a:	e04f      	b.n	8001acc <HAL_I2C_Init+0x1dc>
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	689b      	ldr	r3, [r3, #8]
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	d111      	bne.n	8001a58 <HAL_I2C_Init+0x168>
 8001a34:	68fb      	ldr	r3, [r7, #12]
 8001a36:	1e58      	subs	r0, r3, #1
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	6859      	ldr	r1, [r3, #4]
 8001a3c:	460b      	mov	r3, r1
 8001a3e:	005b      	lsls	r3, r3, #1
 8001a40:	440b      	add	r3, r1
 8001a42:	fbb0 f3f3 	udiv	r3, r0, r3
 8001a46:	3301      	adds	r3, #1
 8001a48:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	bf0c      	ite	eq
 8001a50:	2301      	moveq	r3, #1
 8001a52:	2300      	movne	r3, #0
 8001a54:	b2db      	uxtb	r3, r3
 8001a56:	e012      	b.n	8001a7e <HAL_I2C_Init+0x18e>
 8001a58:	68fb      	ldr	r3, [r7, #12]
 8001a5a:	1e58      	subs	r0, r3, #1
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	6859      	ldr	r1, [r3, #4]
 8001a60:	460b      	mov	r3, r1
 8001a62:	009b      	lsls	r3, r3, #2
 8001a64:	440b      	add	r3, r1
 8001a66:	0099      	lsls	r1, r3, #2
 8001a68:	440b      	add	r3, r1
 8001a6a:	fbb0 f3f3 	udiv	r3, r0, r3
 8001a6e:	3301      	adds	r3, #1
 8001a70:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	bf0c      	ite	eq
 8001a78:	2301      	moveq	r3, #1
 8001a7a:	2300      	movne	r3, #0
 8001a7c:	b2db      	uxtb	r3, r3
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d001      	beq.n	8001a86 <HAL_I2C_Init+0x196>
 8001a82:	2301      	movs	r3, #1
 8001a84:	e022      	b.n	8001acc <HAL_I2C_Init+0x1dc>
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	689b      	ldr	r3, [r3, #8]
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	d10e      	bne.n	8001aac <HAL_I2C_Init+0x1bc>
 8001a8e:	68fb      	ldr	r3, [r7, #12]
 8001a90:	1e58      	subs	r0, r3, #1
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	6859      	ldr	r1, [r3, #4]
 8001a96:	460b      	mov	r3, r1
 8001a98:	005b      	lsls	r3, r3, #1
 8001a9a:	440b      	add	r3, r1
 8001a9c:	fbb0 f3f3 	udiv	r3, r0, r3
 8001aa0:	3301      	adds	r3, #1
 8001aa2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001aa6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001aaa:	e00f      	b.n	8001acc <HAL_I2C_Init+0x1dc>
 8001aac:	68fb      	ldr	r3, [r7, #12]
 8001aae:	1e58      	subs	r0, r3, #1
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	6859      	ldr	r1, [r3, #4]
 8001ab4:	460b      	mov	r3, r1
 8001ab6:	009b      	lsls	r3, r3, #2
 8001ab8:	440b      	add	r3, r1
 8001aba:	0099      	lsls	r1, r3, #2
 8001abc:	440b      	add	r3, r1
 8001abe:	fbb0 f3f3 	udiv	r3, r0, r3
 8001ac2:	3301      	adds	r3, #1
 8001ac4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001ac8:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001acc:	6879      	ldr	r1, [r7, #4]
 8001ace:	6809      	ldr	r1, [r1, #0]
 8001ad0:	4313      	orrs	r3, r2
 8001ad2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	69da      	ldr	r2, [r3, #28]
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	6a1b      	ldr	r3, [r3, #32]
 8001ae6:	431a      	orrs	r2, r3
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	430a      	orrs	r2, r1
 8001aee:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	689b      	ldr	r3, [r3, #8]
 8001af6:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8001afa:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8001afe:	687a      	ldr	r2, [r7, #4]
 8001b00:	6911      	ldr	r1, [r2, #16]
 8001b02:	687a      	ldr	r2, [r7, #4]
 8001b04:	68d2      	ldr	r2, [r2, #12]
 8001b06:	4311      	orrs	r1, r2
 8001b08:	687a      	ldr	r2, [r7, #4]
 8001b0a:	6812      	ldr	r2, [r2, #0]
 8001b0c:	430b      	orrs	r3, r1
 8001b0e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	68db      	ldr	r3, [r3, #12]
 8001b16:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	695a      	ldr	r2, [r3, #20]
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	699b      	ldr	r3, [r3, #24]
 8001b22:	431a      	orrs	r2, r3
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	430a      	orrs	r2, r1
 8001b2a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	681a      	ldr	r2, [r3, #0]
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	f042 0201 	orr.w	r2, r2, #1
 8001b3a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	2200      	movs	r2, #0
 8001b40:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	2220      	movs	r2, #32
 8001b46:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	2200      	movs	r2, #0
 8001b4e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	2200      	movs	r2, #0
 8001b54:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8001b58:	2300      	movs	r3, #0
}
 8001b5a:	4618      	mov	r0, r3
 8001b5c:	3710      	adds	r7, #16
 8001b5e:	46bd      	mov	sp, r7
 8001b60:	bd80      	pop	{r7, pc}
 8001b62:	bf00      	nop
 8001b64:	000186a0 	.word	0x000186a0
 8001b68:	001e847f 	.word	0x001e847f
 8001b6c:	003d08ff 	.word	0x003d08ff
 8001b70:	431bde83 	.word	0x431bde83
 8001b74:	10624dd3 	.word	0x10624dd3

08001b78 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001b78:	b580      	push	{r7, lr}
 8001b7a:	b088      	sub	sp, #32
 8001b7c:	af02      	add	r7, sp, #8
 8001b7e:	60f8      	str	r0, [r7, #12]
 8001b80:	607a      	str	r2, [r7, #4]
 8001b82:	461a      	mov	r2, r3
 8001b84:	460b      	mov	r3, r1
 8001b86:	817b      	strh	r3, [r7, #10]
 8001b88:	4613      	mov	r3, r2
 8001b8a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001b8c:	f7ff fbd0 	bl	8001330 <HAL_GetTick>
 8001b90:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001b92:	68fb      	ldr	r3, [r7, #12]
 8001b94:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001b98:	b2db      	uxtb	r3, r3
 8001b9a:	2b20      	cmp	r3, #32
 8001b9c:	f040 80e0 	bne.w	8001d60 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001ba0:	697b      	ldr	r3, [r7, #20]
 8001ba2:	9300      	str	r3, [sp, #0]
 8001ba4:	2319      	movs	r3, #25
 8001ba6:	2201      	movs	r2, #1
 8001ba8:	4970      	ldr	r1, [pc, #448]	@ (8001d6c <HAL_I2C_Master_Transmit+0x1f4>)
 8001baa:	68f8      	ldr	r0, [r7, #12]
 8001bac:	f000 f964 	bl	8001e78 <I2C_WaitOnFlagUntilTimeout>
 8001bb0:	4603      	mov	r3, r0
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d001      	beq.n	8001bba <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8001bb6:	2302      	movs	r3, #2
 8001bb8:	e0d3      	b.n	8001d62 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001bba:	68fb      	ldr	r3, [r7, #12]
 8001bbc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001bc0:	2b01      	cmp	r3, #1
 8001bc2:	d101      	bne.n	8001bc8 <HAL_I2C_Master_Transmit+0x50>
 8001bc4:	2302      	movs	r3, #2
 8001bc6:	e0cc      	b.n	8001d62 <HAL_I2C_Master_Transmit+0x1ea>
 8001bc8:	68fb      	ldr	r3, [r7, #12]
 8001bca:	2201      	movs	r2, #1
 8001bcc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001bd0:	68fb      	ldr	r3, [r7, #12]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	f003 0301 	and.w	r3, r3, #1
 8001bda:	2b01      	cmp	r3, #1
 8001bdc:	d007      	beq.n	8001bee <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001bde:	68fb      	ldr	r3, [r7, #12]
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	681a      	ldr	r2, [r3, #0]
 8001be4:	68fb      	ldr	r3, [r7, #12]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	f042 0201 	orr.w	r2, r2, #1
 8001bec:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001bee:	68fb      	ldr	r3, [r7, #12]
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	681a      	ldr	r2, [r3, #0]
 8001bf4:	68fb      	ldr	r3, [r7, #12]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001bfc:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8001bfe:	68fb      	ldr	r3, [r7, #12]
 8001c00:	2221      	movs	r2, #33	@ 0x21
 8001c02:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8001c06:	68fb      	ldr	r3, [r7, #12]
 8001c08:	2210      	movs	r2, #16
 8001c0a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8001c0e:	68fb      	ldr	r3, [r7, #12]
 8001c10:	2200      	movs	r2, #0
 8001c12:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001c14:	68fb      	ldr	r3, [r7, #12]
 8001c16:	687a      	ldr	r2, [r7, #4]
 8001c18:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8001c1a:	68fb      	ldr	r3, [r7, #12]
 8001c1c:	893a      	ldrh	r2, [r7, #8]
 8001c1e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001c20:	68fb      	ldr	r3, [r7, #12]
 8001c22:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001c24:	b29a      	uxth	r2, r3
 8001c26:	68fb      	ldr	r3, [r7, #12]
 8001c28:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001c2a:	68fb      	ldr	r3, [r7, #12]
 8001c2c:	4a50      	ldr	r2, [pc, #320]	@ (8001d70 <HAL_I2C_Master_Transmit+0x1f8>)
 8001c2e:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8001c30:	8979      	ldrh	r1, [r7, #10]
 8001c32:	697b      	ldr	r3, [r7, #20]
 8001c34:	6a3a      	ldr	r2, [r7, #32]
 8001c36:	68f8      	ldr	r0, [r7, #12]
 8001c38:	f000 f89c 	bl	8001d74 <I2C_MasterRequestWrite>
 8001c3c:	4603      	mov	r3, r0
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	d001      	beq.n	8001c46 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8001c42:	2301      	movs	r3, #1
 8001c44:	e08d      	b.n	8001d62 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001c46:	2300      	movs	r3, #0
 8001c48:	613b      	str	r3, [r7, #16]
 8001c4a:	68fb      	ldr	r3, [r7, #12]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	695b      	ldr	r3, [r3, #20]
 8001c50:	613b      	str	r3, [r7, #16]
 8001c52:	68fb      	ldr	r3, [r7, #12]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	699b      	ldr	r3, [r3, #24]
 8001c58:	613b      	str	r3, [r7, #16]
 8001c5a:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8001c5c:	e066      	b.n	8001d2c <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001c5e:	697a      	ldr	r2, [r7, #20]
 8001c60:	6a39      	ldr	r1, [r7, #32]
 8001c62:	68f8      	ldr	r0, [r7, #12]
 8001c64:	f000 fa22 	bl	80020ac <I2C_WaitOnTXEFlagUntilTimeout>
 8001c68:	4603      	mov	r3, r0
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d00d      	beq.n	8001c8a <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001c6e:	68fb      	ldr	r3, [r7, #12]
 8001c70:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c72:	2b04      	cmp	r3, #4
 8001c74:	d107      	bne.n	8001c86 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001c76:	68fb      	ldr	r3, [r7, #12]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	681a      	ldr	r2, [r3, #0]
 8001c7c:	68fb      	ldr	r3, [r7, #12]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001c84:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001c86:	2301      	movs	r3, #1
 8001c88:	e06b      	b.n	8001d62 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001c8a:	68fb      	ldr	r3, [r7, #12]
 8001c8c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c8e:	781a      	ldrb	r2, [r3, #0]
 8001c90:	68fb      	ldr	r3, [r7, #12]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001c96:	68fb      	ldr	r3, [r7, #12]
 8001c98:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c9a:	1c5a      	adds	r2, r3, #1
 8001c9c:	68fb      	ldr	r3, [r7, #12]
 8001c9e:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8001ca0:	68fb      	ldr	r3, [r7, #12]
 8001ca2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001ca4:	b29b      	uxth	r3, r3
 8001ca6:	3b01      	subs	r3, #1
 8001ca8:	b29a      	uxth	r2, r3
 8001caa:	68fb      	ldr	r3, [r7, #12]
 8001cac:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8001cae:	68fb      	ldr	r3, [r7, #12]
 8001cb0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001cb2:	3b01      	subs	r3, #1
 8001cb4:	b29a      	uxth	r2, r3
 8001cb6:	68fb      	ldr	r3, [r7, #12]
 8001cb8:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001cba:	68fb      	ldr	r3, [r7, #12]
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	695b      	ldr	r3, [r3, #20]
 8001cc0:	f003 0304 	and.w	r3, r3, #4
 8001cc4:	2b04      	cmp	r3, #4
 8001cc6:	d11b      	bne.n	8001d00 <HAL_I2C_Master_Transmit+0x188>
 8001cc8:	68fb      	ldr	r3, [r7, #12]
 8001cca:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001ccc:	2b00      	cmp	r3, #0
 8001cce:	d017      	beq.n	8001d00 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001cd0:	68fb      	ldr	r3, [r7, #12]
 8001cd2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001cd4:	781a      	ldrb	r2, [r3, #0]
 8001cd6:	68fb      	ldr	r3, [r7, #12]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001cdc:	68fb      	ldr	r3, [r7, #12]
 8001cde:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ce0:	1c5a      	adds	r2, r3, #1
 8001ce2:	68fb      	ldr	r3, [r7, #12]
 8001ce4:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 8001ce6:	68fb      	ldr	r3, [r7, #12]
 8001ce8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001cea:	b29b      	uxth	r3, r3
 8001cec:	3b01      	subs	r3, #1
 8001cee:	b29a      	uxth	r2, r3
 8001cf0:	68fb      	ldr	r3, [r7, #12]
 8001cf2:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 8001cf4:	68fb      	ldr	r3, [r7, #12]
 8001cf6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001cf8:	3b01      	subs	r3, #1
 8001cfa:	b29a      	uxth	r2, r3
 8001cfc:	68fb      	ldr	r3, [r7, #12]
 8001cfe:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001d00:	697a      	ldr	r2, [r7, #20]
 8001d02:	6a39      	ldr	r1, [r7, #32]
 8001d04:	68f8      	ldr	r0, [r7, #12]
 8001d06:	f000 fa19 	bl	800213c <I2C_WaitOnBTFFlagUntilTimeout>
 8001d0a:	4603      	mov	r3, r0
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	d00d      	beq.n	8001d2c <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001d10:	68fb      	ldr	r3, [r7, #12]
 8001d12:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d14:	2b04      	cmp	r3, #4
 8001d16:	d107      	bne.n	8001d28 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001d18:	68fb      	ldr	r3, [r7, #12]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	681a      	ldr	r2, [r3, #0]
 8001d1e:	68fb      	ldr	r3, [r7, #12]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001d26:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001d28:	2301      	movs	r3, #1
 8001d2a:	e01a      	b.n	8001d62 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8001d2c:	68fb      	ldr	r3, [r7, #12]
 8001d2e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	d194      	bne.n	8001c5e <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001d34:	68fb      	ldr	r3, [r7, #12]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	681a      	ldr	r2, [r3, #0]
 8001d3a:	68fb      	ldr	r3, [r7, #12]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001d42:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001d44:	68fb      	ldr	r3, [r7, #12]
 8001d46:	2220      	movs	r2, #32
 8001d48:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001d4c:	68fb      	ldr	r3, [r7, #12]
 8001d4e:	2200      	movs	r2, #0
 8001d50:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001d54:	68fb      	ldr	r3, [r7, #12]
 8001d56:	2200      	movs	r2, #0
 8001d58:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8001d5c:	2300      	movs	r3, #0
 8001d5e:	e000      	b.n	8001d62 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8001d60:	2302      	movs	r3, #2
  }
}
 8001d62:	4618      	mov	r0, r3
 8001d64:	3718      	adds	r7, #24
 8001d66:	46bd      	mov	sp, r7
 8001d68:	bd80      	pop	{r7, pc}
 8001d6a:	bf00      	nop
 8001d6c:	00100002 	.word	0x00100002
 8001d70:	ffff0000 	.word	0xffff0000

08001d74 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8001d74:	b580      	push	{r7, lr}
 8001d76:	b088      	sub	sp, #32
 8001d78:	af02      	add	r7, sp, #8
 8001d7a:	60f8      	str	r0, [r7, #12]
 8001d7c:	607a      	str	r2, [r7, #4]
 8001d7e:	603b      	str	r3, [r7, #0]
 8001d80:	460b      	mov	r3, r1
 8001d82:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8001d84:	68fb      	ldr	r3, [r7, #12]
 8001d86:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001d88:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8001d8a:	697b      	ldr	r3, [r7, #20]
 8001d8c:	2b08      	cmp	r3, #8
 8001d8e:	d006      	beq.n	8001d9e <I2C_MasterRequestWrite+0x2a>
 8001d90:	697b      	ldr	r3, [r7, #20]
 8001d92:	2b01      	cmp	r3, #1
 8001d94:	d003      	beq.n	8001d9e <I2C_MasterRequestWrite+0x2a>
 8001d96:	697b      	ldr	r3, [r7, #20]
 8001d98:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8001d9c:	d108      	bne.n	8001db0 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001d9e:	68fb      	ldr	r3, [r7, #12]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	681a      	ldr	r2, [r3, #0]
 8001da4:	68fb      	ldr	r3, [r7, #12]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001dac:	601a      	str	r2, [r3, #0]
 8001dae:	e00b      	b.n	8001dc8 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8001db0:	68fb      	ldr	r3, [r7, #12]
 8001db2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001db4:	2b12      	cmp	r3, #18
 8001db6:	d107      	bne.n	8001dc8 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001db8:	68fb      	ldr	r3, [r7, #12]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	681a      	ldr	r2, [r3, #0]
 8001dbe:	68fb      	ldr	r3, [r7, #12]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001dc6:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001dc8:	683b      	ldr	r3, [r7, #0]
 8001dca:	9300      	str	r3, [sp, #0]
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	2200      	movs	r2, #0
 8001dd0:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8001dd4:	68f8      	ldr	r0, [r7, #12]
 8001dd6:	f000 f84f 	bl	8001e78 <I2C_WaitOnFlagUntilTimeout>
 8001dda:	4603      	mov	r3, r0
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	d00d      	beq.n	8001dfc <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001de0:	68fb      	ldr	r3, [r7, #12]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001dea:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001dee:	d103      	bne.n	8001df8 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001df0:	68fb      	ldr	r3, [r7, #12]
 8001df2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001df6:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8001df8:	2303      	movs	r3, #3
 8001dfa:	e035      	b.n	8001e68 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001dfc:	68fb      	ldr	r3, [r7, #12]
 8001dfe:	691b      	ldr	r3, [r3, #16]
 8001e00:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8001e04:	d108      	bne.n	8001e18 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8001e06:	897b      	ldrh	r3, [r7, #10]
 8001e08:	b2db      	uxtb	r3, r3
 8001e0a:	461a      	mov	r2, r3
 8001e0c:	68fb      	ldr	r3, [r7, #12]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8001e14:	611a      	str	r2, [r3, #16]
 8001e16:	e01b      	b.n	8001e50 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8001e18:	897b      	ldrh	r3, [r7, #10]
 8001e1a:	11db      	asrs	r3, r3, #7
 8001e1c:	b2db      	uxtb	r3, r3
 8001e1e:	f003 0306 	and.w	r3, r3, #6
 8001e22:	b2db      	uxtb	r3, r3
 8001e24:	f063 030f 	orn	r3, r3, #15
 8001e28:	b2da      	uxtb	r2, r3
 8001e2a:	68fb      	ldr	r3, [r7, #12]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8001e30:	683b      	ldr	r3, [r7, #0]
 8001e32:	687a      	ldr	r2, [r7, #4]
 8001e34:	490e      	ldr	r1, [pc, #56]	@ (8001e70 <I2C_MasterRequestWrite+0xfc>)
 8001e36:	68f8      	ldr	r0, [r7, #12]
 8001e38:	f000 f898 	bl	8001f6c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001e3c:	4603      	mov	r3, r0
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d001      	beq.n	8001e46 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8001e42:	2301      	movs	r3, #1
 8001e44:	e010      	b.n	8001e68 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8001e46:	897b      	ldrh	r3, [r7, #10]
 8001e48:	b2da      	uxtb	r2, r3
 8001e4a:	68fb      	ldr	r3, [r7, #12]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001e50:	683b      	ldr	r3, [r7, #0]
 8001e52:	687a      	ldr	r2, [r7, #4]
 8001e54:	4907      	ldr	r1, [pc, #28]	@ (8001e74 <I2C_MasterRequestWrite+0x100>)
 8001e56:	68f8      	ldr	r0, [r7, #12]
 8001e58:	f000 f888 	bl	8001f6c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001e5c:	4603      	mov	r3, r0
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d001      	beq.n	8001e66 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8001e62:	2301      	movs	r3, #1
 8001e64:	e000      	b.n	8001e68 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8001e66:	2300      	movs	r3, #0
}
 8001e68:	4618      	mov	r0, r3
 8001e6a:	3718      	adds	r7, #24
 8001e6c:	46bd      	mov	sp, r7
 8001e6e:	bd80      	pop	{r7, pc}
 8001e70:	00010008 	.word	0x00010008
 8001e74:	00010002 	.word	0x00010002

08001e78 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8001e78:	b580      	push	{r7, lr}
 8001e7a:	b084      	sub	sp, #16
 8001e7c:	af00      	add	r7, sp, #0
 8001e7e:	60f8      	str	r0, [r7, #12]
 8001e80:	60b9      	str	r1, [r7, #8]
 8001e82:	603b      	str	r3, [r7, #0]
 8001e84:	4613      	mov	r3, r2
 8001e86:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001e88:	e048      	b.n	8001f1c <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001e8a:	683b      	ldr	r3, [r7, #0]
 8001e8c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e90:	d044      	beq.n	8001f1c <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001e92:	f7ff fa4d 	bl	8001330 <HAL_GetTick>
 8001e96:	4602      	mov	r2, r0
 8001e98:	69bb      	ldr	r3, [r7, #24]
 8001e9a:	1ad3      	subs	r3, r2, r3
 8001e9c:	683a      	ldr	r2, [r7, #0]
 8001e9e:	429a      	cmp	r2, r3
 8001ea0:	d302      	bcc.n	8001ea8 <I2C_WaitOnFlagUntilTimeout+0x30>
 8001ea2:	683b      	ldr	r3, [r7, #0]
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	d139      	bne.n	8001f1c <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8001ea8:	68bb      	ldr	r3, [r7, #8]
 8001eaa:	0c1b      	lsrs	r3, r3, #16
 8001eac:	b2db      	uxtb	r3, r3
 8001eae:	2b01      	cmp	r3, #1
 8001eb0:	d10d      	bne.n	8001ece <I2C_WaitOnFlagUntilTimeout+0x56>
 8001eb2:	68fb      	ldr	r3, [r7, #12]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	695b      	ldr	r3, [r3, #20]
 8001eb8:	43da      	mvns	r2, r3
 8001eba:	68bb      	ldr	r3, [r7, #8]
 8001ebc:	4013      	ands	r3, r2
 8001ebe:	b29b      	uxth	r3, r3
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	bf0c      	ite	eq
 8001ec4:	2301      	moveq	r3, #1
 8001ec6:	2300      	movne	r3, #0
 8001ec8:	b2db      	uxtb	r3, r3
 8001eca:	461a      	mov	r2, r3
 8001ecc:	e00c      	b.n	8001ee8 <I2C_WaitOnFlagUntilTimeout+0x70>
 8001ece:	68fb      	ldr	r3, [r7, #12]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	699b      	ldr	r3, [r3, #24]
 8001ed4:	43da      	mvns	r2, r3
 8001ed6:	68bb      	ldr	r3, [r7, #8]
 8001ed8:	4013      	ands	r3, r2
 8001eda:	b29b      	uxth	r3, r3
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	bf0c      	ite	eq
 8001ee0:	2301      	moveq	r3, #1
 8001ee2:	2300      	movne	r3, #0
 8001ee4:	b2db      	uxtb	r3, r3
 8001ee6:	461a      	mov	r2, r3
 8001ee8:	79fb      	ldrb	r3, [r7, #7]
 8001eea:	429a      	cmp	r2, r3
 8001eec:	d116      	bne.n	8001f1c <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8001eee:	68fb      	ldr	r3, [r7, #12]
 8001ef0:	2200      	movs	r2, #0
 8001ef2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8001ef4:	68fb      	ldr	r3, [r7, #12]
 8001ef6:	2220      	movs	r2, #32
 8001ef8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8001efc:	68fb      	ldr	r3, [r7, #12]
 8001efe:	2200      	movs	r2, #0
 8001f00:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8001f04:	68fb      	ldr	r3, [r7, #12]
 8001f06:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f08:	f043 0220 	orr.w	r2, r3, #32
 8001f0c:	68fb      	ldr	r3, [r7, #12]
 8001f0e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001f10:	68fb      	ldr	r3, [r7, #12]
 8001f12:	2200      	movs	r2, #0
 8001f14:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8001f18:	2301      	movs	r3, #1
 8001f1a:	e023      	b.n	8001f64 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001f1c:	68bb      	ldr	r3, [r7, #8]
 8001f1e:	0c1b      	lsrs	r3, r3, #16
 8001f20:	b2db      	uxtb	r3, r3
 8001f22:	2b01      	cmp	r3, #1
 8001f24:	d10d      	bne.n	8001f42 <I2C_WaitOnFlagUntilTimeout+0xca>
 8001f26:	68fb      	ldr	r3, [r7, #12]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	695b      	ldr	r3, [r3, #20]
 8001f2c:	43da      	mvns	r2, r3
 8001f2e:	68bb      	ldr	r3, [r7, #8]
 8001f30:	4013      	ands	r3, r2
 8001f32:	b29b      	uxth	r3, r3
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	bf0c      	ite	eq
 8001f38:	2301      	moveq	r3, #1
 8001f3a:	2300      	movne	r3, #0
 8001f3c:	b2db      	uxtb	r3, r3
 8001f3e:	461a      	mov	r2, r3
 8001f40:	e00c      	b.n	8001f5c <I2C_WaitOnFlagUntilTimeout+0xe4>
 8001f42:	68fb      	ldr	r3, [r7, #12]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	699b      	ldr	r3, [r3, #24]
 8001f48:	43da      	mvns	r2, r3
 8001f4a:	68bb      	ldr	r3, [r7, #8]
 8001f4c:	4013      	ands	r3, r2
 8001f4e:	b29b      	uxth	r3, r3
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	bf0c      	ite	eq
 8001f54:	2301      	moveq	r3, #1
 8001f56:	2300      	movne	r3, #0
 8001f58:	b2db      	uxtb	r3, r3
 8001f5a:	461a      	mov	r2, r3
 8001f5c:	79fb      	ldrb	r3, [r7, #7]
 8001f5e:	429a      	cmp	r2, r3
 8001f60:	d093      	beq.n	8001e8a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8001f62:	2300      	movs	r3, #0
}
 8001f64:	4618      	mov	r0, r3
 8001f66:	3710      	adds	r7, #16
 8001f68:	46bd      	mov	sp, r7
 8001f6a:	bd80      	pop	{r7, pc}

08001f6c <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8001f6c:	b580      	push	{r7, lr}
 8001f6e:	b084      	sub	sp, #16
 8001f70:	af00      	add	r7, sp, #0
 8001f72:	60f8      	str	r0, [r7, #12]
 8001f74:	60b9      	str	r1, [r7, #8]
 8001f76:	607a      	str	r2, [r7, #4]
 8001f78:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8001f7a:	e071      	b.n	8002060 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001f7c:	68fb      	ldr	r3, [r7, #12]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	695b      	ldr	r3, [r3, #20]
 8001f82:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001f86:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001f8a:	d123      	bne.n	8001fd4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001f8c:	68fb      	ldr	r3, [r7, #12]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	681a      	ldr	r2, [r3, #0]
 8001f92:	68fb      	ldr	r3, [r7, #12]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001f9a:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001f9c:	68fb      	ldr	r3, [r7, #12]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8001fa4:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8001fa6:	68fb      	ldr	r3, [r7, #12]
 8001fa8:	2200      	movs	r2, #0
 8001faa:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8001fac:	68fb      	ldr	r3, [r7, #12]
 8001fae:	2220      	movs	r2, #32
 8001fb0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001fb4:	68fb      	ldr	r3, [r7, #12]
 8001fb6:	2200      	movs	r2, #0
 8001fb8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8001fbc:	68fb      	ldr	r3, [r7, #12]
 8001fbe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001fc0:	f043 0204 	orr.w	r2, r3, #4
 8001fc4:	68fb      	ldr	r3, [r7, #12]
 8001fc6:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001fc8:	68fb      	ldr	r3, [r7, #12]
 8001fca:	2200      	movs	r2, #0
 8001fcc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8001fd0:	2301      	movs	r3, #1
 8001fd2:	e067      	b.n	80020a4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001fda:	d041      	beq.n	8002060 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001fdc:	f7ff f9a8 	bl	8001330 <HAL_GetTick>
 8001fe0:	4602      	mov	r2, r0
 8001fe2:	683b      	ldr	r3, [r7, #0]
 8001fe4:	1ad3      	subs	r3, r2, r3
 8001fe6:	687a      	ldr	r2, [r7, #4]
 8001fe8:	429a      	cmp	r2, r3
 8001fea:	d302      	bcc.n	8001ff2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d136      	bne.n	8002060 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8001ff2:	68bb      	ldr	r3, [r7, #8]
 8001ff4:	0c1b      	lsrs	r3, r3, #16
 8001ff6:	b2db      	uxtb	r3, r3
 8001ff8:	2b01      	cmp	r3, #1
 8001ffa:	d10c      	bne.n	8002016 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8001ffc:	68fb      	ldr	r3, [r7, #12]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	695b      	ldr	r3, [r3, #20]
 8002002:	43da      	mvns	r2, r3
 8002004:	68bb      	ldr	r3, [r7, #8]
 8002006:	4013      	ands	r3, r2
 8002008:	b29b      	uxth	r3, r3
 800200a:	2b00      	cmp	r3, #0
 800200c:	bf14      	ite	ne
 800200e:	2301      	movne	r3, #1
 8002010:	2300      	moveq	r3, #0
 8002012:	b2db      	uxtb	r3, r3
 8002014:	e00b      	b.n	800202e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8002016:	68fb      	ldr	r3, [r7, #12]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	699b      	ldr	r3, [r3, #24]
 800201c:	43da      	mvns	r2, r3
 800201e:	68bb      	ldr	r3, [r7, #8]
 8002020:	4013      	ands	r3, r2
 8002022:	b29b      	uxth	r3, r3
 8002024:	2b00      	cmp	r3, #0
 8002026:	bf14      	ite	ne
 8002028:	2301      	movne	r3, #1
 800202a:	2300      	moveq	r3, #0
 800202c:	b2db      	uxtb	r3, r3
 800202e:	2b00      	cmp	r3, #0
 8002030:	d016      	beq.n	8002060 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002032:	68fb      	ldr	r3, [r7, #12]
 8002034:	2200      	movs	r2, #0
 8002036:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002038:	68fb      	ldr	r3, [r7, #12]
 800203a:	2220      	movs	r2, #32
 800203c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002040:	68fb      	ldr	r3, [r7, #12]
 8002042:	2200      	movs	r2, #0
 8002044:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002048:	68fb      	ldr	r3, [r7, #12]
 800204a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800204c:	f043 0220 	orr.w	r2, r3, #32
 8002050:	68fb      	ldr	r3, [r7, #12]
 8002052:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002054:	68fb      	ldr	r3, [r7, #12]
 8002056:	2200      	movs	r2, #0
 8002058:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800205c:	2301      	movs	r3, #1
 800205e:	e021      	b.n	80020a4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002060:	68bb      	ldr	r3, [r7, #8]
 8002062:	0c1b      	lsrs	r3, r3, #16
 8002064:	b2db      	uxtb	r3, r3
 8002066:	2b01      	cmp	r3, #1
 8002068:	d10c      	bne.n	8002084 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 800206a:	68fb      	ldr	r3, [r7, #12]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	695b      	ldr	r3, [r3, #20]
 8002070:	43da      	mvns	r2, r3
 8002072:	68bb      	ldr	r3, [r7, #8]
 8002074:	4013      	ands	r3, r2
 8002076:	b29b      	uxth	r3, r3
 8002078:	2b00      	cmp	r3, #0
 800207a:	bf14      	ite	ne
 800207c:	2301      	movne	r3, #1
 800207e:	2300      	moveq	r3, #0
 8002080:	b2db      	uxtb	r3, r3
 8002082:	e00b      	b.n	800209c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8002084:	68fb      	ldr	r3, [r7, #12]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	699b      	ldr	r3, [r3, #24]
 800208a:	43da      	mvns	r2, r3
 800208c:	68bb      	ldr	r3, [r7, #8]
 800208e:	4013      	ands	r3, r2
 8002090:	b29b      	uxth	r3, r3
 8002092:	2b00      	cmp	r3, #0
 8002094:	bf14      	ite	ne
 8002096:	2301      	movne	r3, #1
 8002098:	2300      	moveq	r3, #0
 800209a:	b2db      	uxtb	r3, r3
 800209c:	2b00      	cmp	r3, #0
 800209e:	f47f af6d 	bne.w	8001f7c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 80020a2:	2300      	movs	r3, #0
}
 80020a4:	4618      	mov	r0, r3
 80020a6:	3710      	adds	r7, #16
 80020a8:	46bd      	mov	sp, r7
 80020aa:	bd80      	pop	{r7, pc}

080020ac <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80020ac:	b580      	push	{r7, lr}
 80020ae:	b084      	sub	sp, #16
 80020b0:	af00      	add	r7, sp, #0
 80020b2:	60f8      	str	r0, [r7, #12]
 80020b4:	60b9      	str	r1, [r7, #8]
 80020b6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80020b8:	e034      	b.n	8002124 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80020ba:	68f8      	ldr	r0, [r7, #12]
 80020bc:	f000 f886 	bl	80021cc <I2C_IsAcknowledgeFailed>
 80020c0:	4603      	mov	r3, r0
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d001      	beq.n	80020ca <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80020c6:	2301      	movs	r3, #1
 80020c8:	e034      	b.n	8002134 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80020ca:	68bb      	ldr	r3, [r7, #8]
 80020cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80020d0:	d028      	beq.n	8002124 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80020d2:	f7ff f92d 	bl	8001330 <HAL_GetTick>
 80020d6:	4602      	mov	r2, r0
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	1ad3      	subs	r3, r2, r3
 80020dc:	68ba      	ldr	r2, [r7, #8]
 80020de:	429a      	cmp	r2, r3
 80020e0:	d302      	bcc.n	80020e8 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80020e2:	68bb      	ldr	r3, [r7, #8]
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	d11d      	bne.n	8002124 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 80020e8:	68fb      	ldr	r3, [r7, #12]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	695b      	ldr	r3, [r3, #20]
 80020ee:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80020f2:	2b80      	cmp	r3, #128	@ 0x80
 80020f4:	d016      	beq.n	8002124 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80020f6:	68fb      	ldr	r3, [r7, #12]
 80020f8:	2200      	movs	r2, #0
 80020fa:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80020fc:	68fb      	ldr	r3, [r7, #12]
 80020fe:	2220      	movs	r2, #32
 8002100:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002104:	68fb      	ldr	r3, [r7, #12]
 8002106:	2200      	movs	r2, #0
 8002108:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800210c:	68fb      	ldr	r3, [r7, #12]
 800210e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002110:	f043 0220 	orr.w	r2, r3, #32
 8002114:	68fb      	ldr	r3, [r7, #12]
 8002116:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002118:	68fb      	ldr	r3, [r7, #12]
 800211a:	2200      	movs	r2, #0
 800211c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002120:	2301      	movs	r3, #1
 8002122:	e007      	b.n	8002134 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002124:	68fb      	ldr	r3, [r7, #12]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	695b      	ldr	r3, [r3, #20]
 800212a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800212e:	2b80      	cmp	r3, #128	@ 0x80
 8002130:	d1c3      	bne.n	80020ba <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002132:	2300      	movs	r3, #0
}
 8002134:	4618      	mov	r0, r3
 8002136:	3710      	adds	r7, #16
 8002138:	46bd      	mov	sp, r7
 800213a:	bd80      	pop	{r7, pc}

0800213c <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800213c:	b580      	push	{r7, lr}
 800213e:	b084      	sub	sp, #16
 8002140:	af00      	add	r7, sp, #0
 8002142:	60f8      	str	r0, [r7, #12]
 8002144:	60b9      	str	r1, [r7, #8]
 8002146:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002148:	e034      	b.n	80021b4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800214a:	68f8      	ldr	r0, [r7, #12]
 800214c:	f000 f83e 	bl	80021cc <I2C_IsAcknowledgeFailed>
 8002150:	4603      	mov	r3, r0
 8002152:	2b00      	cmp	r3, #0
 8002154:	d001      	beq.n	800215a <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002156:	2301      	movs	r3, #1
 8002158:	e034      	b.n	80021c4 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800215a:	68bb      	ldr	r3, [r7, #8]
 800215c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002160:	d028      	beq.n	80021b4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002162:	f7ff f8e5 	bl	8001330 <HAL_GetTick>
 8002166:	4602      	mov	r2, r0
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	1ad3      	subs	r3, r2, r3
 800216c:	68ba      	ldr	r2, [r7, #8]
 800216e:	429a      	cmp	r2, r3
 8002170:	d302      	bcc.n	8002178 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8002172:	68bb      	ldr	r3, [r7, #8]
 8002174:	2b00      	cmp	r3, #0
 8002176:	d11d      	bne.n	80021b4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8002178:	68fb      	ldr	r3, [r7, #12]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	695b      	ldr	r3, [r3, #20]
 800217e:	f003 0304 	and.w	r3, r3, #4
 8002182:	2b04      	cmp	r3, #4
 8002184:	d016      	beq.n	80021b4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002186:	68fb      	ldr	r3, [r7, #12]
 8002188:	2200      	movs	r2, #0
 800218a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800218c:	68fb      	ldr	r3, [r7, #12]
 800218e:	2220      	movs	r2, #32
 8002190:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	2200      	movs	r2, #0
 8002198:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021a0:	f043 0220 	orr.w	r2, r3, #32
 80021a4:	68fb      	ldr	r3, [r7, #12]
 80021a6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80021a8:	68fb      	ldr	r3, [r7, #12]
 80021aa:	2200      	movs	r2, #0
 80021ac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80021b0:	2301      	movs	r3, #1
 80021b2:	e007      	b.n	80021c4 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80021b4:	68fb      	ldr	r3, [r7, #12]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	695b      	ldr	r3, [r3, #20]
 80021ba:	f003 0304 	and.w	r3, r3, #4
 80021be:	2b04      	cmp	r3, #4
 80021c0:	d1c3      	bne.n	800214a <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80021c2:	2300      	movs	r3, #0
}
 80021c4:	4618      	mov	r0, r3
 80021c6:	3710      	adds	r7, #16
 80021c8:	46bd      	mov	sp, r7
 80021ca:	bd80      	pop	{r7, pc}

080021cc <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80021cc:	b480      	push	{r7}
 80021ce:	b083      	sub	sp, #12
 80021d0:	af00      	add	r7, sp, #0
 80021d2:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	695b      	ldr	r3, [r3, #20]
 80021da:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80021de:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80021e2:	d11b      	bne.n	800221c <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80021ec:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	2200      	movs	r2, #0
 80021f2:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	2220      	movs	r2, #32
 80021f8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	2200      	movs	r2, #0
 8002200:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002208:	f043 0204 	orr.w	r2, r3, #4
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	2200      	movs	r2, #0
 8002214:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8002218:	2301      	movs	r3, #1
 800221a:	e000      	b.n	800221e <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800221c:	2300      	movs	r3, #0
}
 800221e:	4618      	mov	r0, r3
 8002220:	370c      	adds	r7, #12
 8002222:	46bd      	mov	sp, r7
 8002224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002228:	4770      	bx	lr
	...

0800222c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800222c:	b580      	push	{r7, lr}
 800222e:	b086      	sub	sp, #24
 8002230:	af00      	add	r7, sp, #0
 8002232:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	2b00      	cmp	r3, #0
 8002238:	d101      	bne.n	800223e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800223a:	2301      	movs	r3, #1
 800223c:	e267      	b.n	800270e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	f003 0301 	and.w	r3, r3, #1
 8002246:	2b00      	cmp	r3, #0
 8002248:	d075      	beq.n	8002336 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800224a:	4b88      	ldr	r3, [pc, #544]	@ (800246c <HAL_RCC_OscConfig+0x240>)
 800224c:	689b      	ldr	r3, [r3, #8]
 800224e:	f003 030c 	and.w	r3, r3, #12
 8002252:	2b04      	cmp	r3, #4
 8002254:	d00c      	beq.n	8002270 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002256:	4b85      	ldr	r3, [pc, #532]	@ (800246c <HAL_RCC_OscConfig+0x240>)
 8002258:	689b      	ldr	r3, [r3, #8]
 800225a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800225e:	2b08      	cmp	r3, #8
 8002260:	d112      	bne.n	8002288 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002262:	4b82      	ldr	r3, [pc, #520]	@ (800246c <HAL_RCC_OscConfig+0x240>)
 8002264:	685b      	ldr	r3, [r3, #4]
 8002266:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800226a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800226e:	d10b      	bne.n	8002288 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002270:	4b7e      	ldr	r3, [pc, #504]	@ (800246c <HAL_RCC_OscConfig+0x240>)
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002278:	2b00      	cmp	r3, #0
 800227a:	d05b      	beq.n	8002334 <HAL_RCC_OscConfig+0x108>
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	685b      	ldr	r3, [r3, #4]
 8002280:	2b00      	cmp	r3, #0
 8002282:	d157      	bne.n	8002334 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002284:	2301      	movs	r3, #1
 8002286:	e242      	b.n	800270e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	685b      	ldr	r3, [r3, #4]
 800228c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002290:	d106      	bne.n	80022a0 <HAL_RCC_OscConfig+0x74>
 8002292:	4b76      	ldr	r3, [pc, #472]	@ (800246c <HAL_RCC_OscConfig+0x240>)
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	4a75      	ldr	r2, [pc, #468]	@ (800246c <HAL_RCC_OscConfig+0x240>)
 8002298:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800229c:	6013      	str	r3, [r2, #0]
 800229e:	e01d      	b.n	80022dc <HAL_RCC_OscConfig+0xb0>
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	685b      	ldr	r3, [r3, #4]
 80022a4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80022a8:	d10c      	bne.n	80022c4 <HAL_RCC_OscConfig+0x98>
 80022aa:	4b70      	ldr	r3, [pc, #448]	@ (800246c <HAL_RCC_OscConfig+0x240>)
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	4a6f      	ldr	r2, [pc, #444]	@ (800246c <HAL_RCC_OscConfig+0x240>)
 80022b0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80022b4:	6013      	str	r3, [r2, #0]
 80022b6:	4b6d      	ldr	r3, [pc, #436]	@ (800246c <HAL_RCC_OscConfig+0x240>)
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	4a6c      	ldr	r2, [pc, #432]	@ (800246c <HAL_RCC_OscConfig+0x240>)
 80022bc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80022c0:	6013      	str	r3, [r2, #0]
 80022c2:	e00b      	b.n	80022dc <HAL_RCC_OscConfig+0xb0>
 80022c4:	4b69      	ldr	r3, [pc, #420]	@ (800246c <HAL_RCC_OscConfig+0x240>)
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	4a68      	ldr	r2, [pc, #416]	@ (800246c <HAL_RCC_OscConfig+0x240>)
 80022ca:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80022ce:	6013      	str	r3, [r2, #0]
 80022d0:	4b66      	ldr	r3, [pc, #408]	@ (800246c <HAL_RCC_OscConfig+0x240>)
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	4a65      	ldr	r2, [pc, #404]	@ (800246c <HAL_RCC_OscConfig+0x240>)
 80022d6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80022da:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	685b      	ldr	r3, [r3, #4]
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	d013      	beq.n	800230c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022e4:	f7ff f824 	bl	8001330 <HAL_GetTick>
 80022e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80022ea:	e008      	b.n	80022fe <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80022ec:	f7ff f820 	bl	8001330 <HAL_GetTick>
 80022f0:	4602      	mov	r2, r0
 80022f2:	693b      	ldr	r3, [r7, #16]
 80022f4:	1ad3      	subs	r3, r2, r3
 80022f6:	2b64      	cmp	r3, #100	@ 0x64
 80022f8:	d901      	bls.n	80022fe <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80022fa:	2303      	movs	r3, #3
 80022fc:	e207      	b.n	800270e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80022fe:	4b5b      	ldr	r3, [pc, #364]	@ (800246c <HAL_RCC_OscConfig+0x240>)
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002306:	2b00      	cmp	r3, #0
 8002308:	d0f0      	beq.n	80022ec <HAL_RCC_OscConfig+0xc0>
 800230a:	e014      	b.n	8002336 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800230c:	f7ff f810 	bl	8001330 <HAL_GetTick>
 8002310:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002312:	e008      	b.n	8002326 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002314:	f7ff f80c 	bl	8001330 <HAL_GetTick>
 8002318:	4602      	mov	r2, r0
 800231a:	693b      	ldr	r3, [r7, #16]
 800231c:	1ad3      	subs	r3, r2, r3
 800231e:	2b64      	cmp	r3, #100	@ 0x64
 8002320:	d901      	bls.n	8002326 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002322:	2303      	movs	r3, #3
 8002324:	e1f3      	b.n	800270e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002326:	4b51      	ldr	r3, [pc, #324]	@ (800246c <HAL_RCC_OscConfig+0x240>)
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800232e:	2b00      	cmp	r3, #0
 8002330:	d1f0      	bne.n	8002314 <HAL_RCC_OscConfig+0xe8>
 8002332:	e000      	b.n	8002336 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002334:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	f003 0302 	and.w	r3, r3, #2
 800233e:	2b00      	cmp	r3, #0
 8002340:	d063      	beq.n	800240a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8002342:	4b4a      	ldr	r3, [pc, #296]	@ (800246c <HAL_RCC_OscConfig+0x240>)
 8002344:	689b      	ldr	r3, [r3, #8]
 8002346:	f003 030c 	and.w	r3, r3, #12
 800234a:	2b00      	cmp	r3, #0
 800234c:	d00b      	beq.n	8002366 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800234e:	4b47      	ldr	r3, [pc, #284]	@ (800246c <HAL_RCC_OscConfig+0x240>)
 8002350:	689b      	ldr	r3, [r3, #8]
 8002352:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8002356:	2b08      	cmp	r3, #8
 8002358:	d11c      	bne.n	8002394 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800235a:	4b44      	ldr	r3, [pc, #272]	@ (800246c <HAL_RCC_OscConfig+0x240>)
 800235c:	685b      	ldr	r3, [r3, #4]
 800235e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002362:	2b00      	cmp	r3, #0
 8002364:	d116      	bne.n	8002394 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002366:	4b41      	ldr	r3, [pc, #260]	@ (800246c <HAL_RCC_OscConfig+0x240>)
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	f003 0302 	and.w	r3, r3, #2
 800236e:	2b00      	cmp	r3, #0
 8002370:	d005      	beq.n	800237e <HAL_RCC_OscConfig+0x152>
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	68db      	ldr	r3, [r3, #12]
 8002376:	2b01      	cmp	r3, #1
 8002378:	d001      	beq.n	800237e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800237a:	2301      	movs	r3, #1
 800237c:	e1c7      	b.n	800270e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800237e:	4b3b      	ldr	r3, [pc, #236]	@ (800246c <HAL_RCC_OscConfig+0x240>)
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	691b      	ldr	r3, [r3, #16]
 800238a:	00db      	lsls	r3, r3, #3
 800238c:	4937      	ldr	r1, [pc, #220]	@ (800246c <HAL_RCC_OscConfig+0x240>)
 800238e:	4313      	orrs	r3, r2
 8002390:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002392:	e03a      	b.n	800240a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	68db      	ldr	r3, [r3, #12]
 8002398:	2b00      	cmp	r3, #0
 800239a:	d020      	beq.n	80023de <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800239c:	4b34      	ldr	r3, [pc, #208]	@ (8002470 <HAL_RCC_OscConfig+0x244>)
 800239e:	2201      	movs	r2, #1
 80023a0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023a2:	f7fe ffc5 	bl	8001330 <HAL_GetTick>
 80023a6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80023a8:	e008      	b.n	80023bc <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80023aa:	f7fe ffc1 	bl	8001330 <HAL_GetTick>
 80023ae:	4602      	mov	r2, r0
 80023b0:	693b      	ldr	r3, [r7, #16]
 80023b2:	1ad3      	subs	r3, r2, r3
 80023b4:	2b02      	cmp	r3, #2
 80023b6:	d901      	bls.n	80023bc <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80023b8:	2303      	movs	r3, #3
 80023ba:	e1a8      	b.n	800270e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80023bc:	4b2b      	ldr	r3, [pc, #172]	@ (800246c <HAL_RCC_OscConfig+0x240>)
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	f003 0302 	and.w	r3, r3, #2
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	d0f0      	beq.n	80023aa <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80023c8:	4b28      	ldr	r3, [pc, #160]	@ (800246c <HAL_RCC_OscConfig+0x240>)
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	691b      	ldr	r3, [r3, #16]
 80023d4:	00db      	lsls	r3, r3, #3
 80023d6:	4925      	ldr	r1, [pc, #148]	@ (800246c <HAL_RCC_OscConfig+0x240>)
 80023d8:	4313      	orrs	r3, r2
 80023da:	600b      	str	r3, [r1, #0]
 80023dc:	e015      	b.n	800240a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80023de:	4b24      	ldr	r3, [pc, #144]	@ (8002470 <HAL_RCC_OscConfig+0x244>)
 80023e0:	2200      	movs	r2, #0
 80023e2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023e4:	f7fe ffa4 	bl	8001330 <HAL_GetTick>
 80023e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80023ea:	e008      	b.n	80023fe <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80023ec:	f7fe ffa0 	bl	8001330 <HAL_GetTick>
 80023f0:	4602      	mov	r2, r0
 80023f2:	693b      	ldr	r3, [r7, #16]
 80023f4:	1ad3      	subs	r3, r2, r3
 80023f6:	2b02      	cmp	r3, #2
 80023f8:	d901      	bls.n	80023fe <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80023fa:	2303      	movs	r3, #3
 80023fc:	e187      	b.n	800270e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80023fe:	4b1b      	ldr	r3, [pc, #108]	@ (800246c <HAL_RCC_OscConfig+0x240>)
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	f003 0302 	and.w	r3, r3, #2
 8002406:	2b00      	cmp	r3, #0
 8002408:	d1f0      	bne.n	80023ec <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	f003 0308 	and.w	r3, r3, #8
 8002412:	2b00      	cmp	r3, #0
 8002414:	d036      	beq.n	8002484 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	695b      	ldr	r3, [r3, #20]
 800241a:	2b00      	cmp	r3, #0
 800241c:	d016      	beq.n	800244c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800241e:	4b15      	ldr	r3, [pc, #84]	@ (8002474 <HAL_RCC_OscConfig+0x248>)
 8002420:	2201      	movs	r2, #1
 8002422:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002424:	f7fe ff84 	bl	8001330 <HAL_GetTick>
 8002428:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800242a:	e008      	b.n	800243e <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800242c:	f7fe ff80 	bl	8001330 <HAL_GetTick>
 8002430:	4602      	mov	r2, r0
 8002432:	693b      	ldr	r3, [r7, #16]
 8002434:	1ad3      	subs	r3, r2, r3
 8002436:	2b02      	cmp	r3, #2
 8002438:	d901      	bls.n	800243e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800243a:	2303      	movs	r3, #3
 800243c:	e167      	b.n	800270e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800243e:	4b0b      	ldr	r3, [pc, #44]	@ (800246c <HAL_RCC_OscConfig+0x240>)
 8002440:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002442:	f003 0302 	and.w	r3, r3, #2
 8002446:	2b00      	cmp	r3, #0
 8002448:	d0f0      	beq.n	800242c <HAL_RCC_OscConfig+0x200>
 800244a:	e01b      	b.n	8002484 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800244c:	4b09      	ldr	r3, [pc, #36]	@ (8002474 <HAL_RCC_OscConfig+0x248>)
 800244e:	2200      	movs	r2, #0
 8002450:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002452:	f7fe ff6d 	bl	8001330 <HAL_GetTick>
 8002456:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002458:	e00e      	b.n	8002478 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800245a:	f7fe ff69 	bl	8001330 <HAL_GetTick>
 800245e:	4602      	mov	r2, r0
 8002460:	693b      	ldr	r3, [r7, #16]
 8002462:	1ad3      	subs	r3, r2, r3
 8002464:	2b02      	cmp	r3, #2
 8002466:	d907      	bls.n	8002478 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002468:	2303      	movs	r3, #3
 800246a:	e150      	b.n	800270e <HAL_RCC_OscConfig+0x4e2>
 800246c:	40023800 	.word	0x40023800
 8002470:	42470000 	.word	0x42470000
 8002474:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002478:	4b88      	ldr	r3, [pc, #544]	@ (800269c <HAL_RCC_OscConfig+0x470>)
 800247a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800247c:	f003 0302 	and.w	r3, r3, #2
 8002480:	2b00      	cmp	r3, #0
 8002482:	d1ea      	bne.n	800245a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	f003 0304 	and.w	r3, r3, #4
 800248c:	2b00      	cmp	r3, #0
 800248e:	f000 8097 	beq.w	80025c0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002492:	2300      	movs	r3, #0
 8002494:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002496:	4b81      	ldr	r3, [pc, #516]	@ (800269c <HAL_RCC_OscConfig+0x470>)
 8002498:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800249a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d10f      	bne.n	80024c2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80024a2:	2300      	movs	r3, #0
 80024a4:	60bb      	str	r3, [r7, #8]
 80024a6:	4b7d      	ldr	r3, [pc, #500]	@ (800269c <HAL_RCC_OscConfig+0x470>)
 80024a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024aa:	4a7c      	ldr	r2, [pc, #496]	@ (800269c <HAL_RCC_OscConfig+0x470>)
 80024ac:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80024b0:	6413      	str	r3, [r2, #64]	@ 0x40
 80024b2:	4b7a      	ldr	r3, [pc, #488]	@ (800269c <HAL_RCC_OscConfig+0x470>)
 80024b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024b6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80024ba:	60bb      	str	r3, [r7, #8]
 80024bc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80024be:	2301      	movs	r3, #1
 80024c0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80024c2:	4b77      	ldr	r3, [pc, #476]	@ (80026a0 <HAL_RCC_OscConfig+0x474>)
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d118      	bne.n	8002500 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80024ce:	4b74      	ldr	r3, [pc, #464]	@ (80026a0 <HAL_RCC_OscConfig+0x474>)
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	4a73      	ldr	r2, [pc, #460]	@ (80026a0 <HAL_RCC_OscConfig+0x474>)
 80024d4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80024d8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80024da:	f7fe ff29 	bl	8001330 <HAL_GetTick>
 80024de:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80024e0:	e008      	b.n	80024f4 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80024e2:	f7fe ff25 	bl	8001330 <HAL_GetTick>
 80024e6:	4602      	mov	r2, r0
 80024e8:	693b      	ldr	r3, [r7, #16]
 80024ea:	1ad3      	subs	r3, r2, r3
 80024ec:	2b02      	cmp	r3, #2
 80024ee:	d901      	bls.n	80024f4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80024f0:	2303      	movs	r3, #3
 80024f2:	e10c      	b.n	800270e <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80024f4:	4b6a      	ldr	r3, [pc, #424]	@ (80026a0 <HAL_RCC_OscConfig+0x474>)
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d0f0      	beq.n	80024e2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	689b      	ldr	r3, [r3, #8]
 8002504:	2b01      	cmp	r3, #1
 8002506:	d106      	bne.n	8002516 <HAL_RCC_OscConfig+0x2ea>
 8002508:	4b64      	ldr	r3, [pc, #400]	@ (800269c <HAL_RCC_OscConfig+0x470>)
 800250a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800250c:	4a63      	ldr	r2, [pc, #396]	@ (800269c <HAL_RCC_OscConfig+0x470>)
 800250e:	f043 0301 	orr.w	r3, r3, #1
 8002512:	6713      	str	r3, [r2, #112]	@ 0x70
 8002514:	e01c      	b.n	8002550 <HAL_RCC_OscConfig+0x324>
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	689b      	ldr	r3, [r3, #8]
 800251a:	2b05      	cmp	r3, #5
 800251c:	d10c      	bne.n	8002538 <HAL_RCC_OscConfig+0x30c>
 800251e:	4b5f      	ldr	r3, [pc, #380]	@ (800269c <HAL_RCC_OscConfig+0x470>)
 8002520:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002522:	4a5e      	ldr	r2, [pc, #376]	@ (800269c <HAL_RCC_OscConfig+0x470>)
 8002524:	f043 0304 	orr.w	r3, r3, #4
 8002528:	6713      	str	r3, [r2, #112]	@ 0x70
 800252a:	4b5c      	ldr	r3, [pc, #368]	@ (800269c <HAL_RCC_OscConfig+0x470>)
 800252c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800252e:	4a5b      	ldr	r2, [pc, #364]	@ (800269c <HAL_RCC_OscConfig+0x470>)
 8002530:	f043 0301 	orr.w	r3, r3, #1
 8002534:	6713      	str	r3, [r2, #112]	@ 0x70
 8002536:	e00b      	b.n	8002550 <HAL_RCC_OscConfig+0x324>
 8002538:	4b58      	ldr	r3, [pc, #352]	@ (800269c <HAL_RCC_OscConfig+0x470>)
 800253a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800253c:	4a57      	ldr	r2, [pc, #348]	@ (800269c <HAL_RCC_OscConfig+0x470>)
 800253e:	f023 0301 	bic.w	r3, r3, #1
 8002542:	6713      	str	r3, [r2, #112]	@ 0x70
 8002544:	4b55      	ldr	r3, [pc, #340]	@ (800269c <HAL_RCC_OscConfig+0x470>)
 8002546:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002548:	4a54      	ldr	r2, [pc, #336]	@ (800269c <HAL_RCC_OscConfig+0x470>)
 800254a:	f023 0304 	bic.w	r3, r3, #4
 800254e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	689b      	ldr	r3, [r3, #8]
 8002554:	2b00      	cmp	r3, #0
 8002556:	d015      	beq.n	8002584 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002558:	f7fe feea 	bl	8001330 <HAL_GetTick>
 800255c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800255e:	e00a      	b.n	8002576 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002560:	f7fe fee6 	bl	8001330 <HAL_GetTick>
 8002564:	4602      	mov	r2, r0
 8002566:	693b      	ldr	r3, [r7, #16]
 8002568:	1ad3      	subs	r3, r2, r3
 800256a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800256e:	4293      	cmp	r3, r2
 8002570:	d901      	bls.n	8002576 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002572:	2303      	movs	r3, #3
 8002574:	e0cb      	b.n	800270e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002576:	4b49      	ldr	r3, [pc, #292]	@ (800269c <HAL_RCC_OscConfig+0x470>)
 8002578:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800257a:	f003 0302 	and.w	r3, r3, #2
 800257e:	2b00      	cmp	r3, #0
 8002580:	d0ee      	beq.n	8002560 <HAL_RCC_OscConfig+0x334>
 8002582:	e014      	b.n	80025ae <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002584:	f7fe fed4 	bl	8001330 <HAL_GetTick>
 8002588:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800258a:	e00a      	b.n	80025a2 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800258c:	f7fe fed0 	bl	8001330 <HAL_GetTick>
 8002590:	4602      	mov	r2, r0
 8002592:	693b      	ldr	r3, [r7, #16]
 8002594:	1ad3      	subs	r3, r2, r3
 8002596:	f241 3288 	movw	r2, #5000	@ 0x1388
 800259a:	4293      	cmp	r3, r2
 800259c:	d901      	bls.n	80025a2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800259e:	2303      	movs	r3, #3
 80025a0:	e0b5      	b.n	800270e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80025a2:	4b3e      	ldr	r3, [pc, #248]	@ (800269c <HAL_RCC_OscConfig+0x470>)
 80025a4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80025a6:	f003 0302 	and.w	r3, r3, #2
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d1ee      	bne.n	800258c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80025ae:	7dfb      	ldrb	r3, [r7, #23]
 80025b0:	2b01      	cmp	r3, #1
 80025b2:	d105      	bne.n	80025c0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80025b4:	4b39      	ldr	r3, [pc, #228]	@ (800269c <HAL_RCC_OscConfig+0x470>)
 80025b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025b8:	4a38      	ldr	r2, [pc, #224]	@ (800269c <HAL_RCC_OscConfig+0x470>)
 80025ba:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80025be:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	699b      	ldr	r3, [r3, #24]
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	f000 80a1 	beq.w	800270c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80025ca:	4b34      	ldr	r3, [pc, #208]	@ (800269c <HAL_RCC_OscConfig+0x470>)
 80025cc:	689b      	ldr	r3, [r3, #8]
 80025ce:	f003 030c 	and.w	r3, r3, #12
 80025d2:	2b08      	cmp	r3, #8
 80025d4:	d05c      	beq.n	8002690 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	699b      	ldr	r3, [r3, #24]
 80025da:	2b02      	cmp	r3, #2
 80025dc:	d141      	bne.n	8002662 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80025de:	4b31      	ldr	r3, [pc, #196]	@ (80026a4 <HAL_RCC_OscConfig+0x478>)
 80025e0:	2200      	movs	r2, #0
 80025e2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025e4:	f7fe fea4 	bl	8001330 <HAL_GetTick>
 80025e8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80025ea:	e008      	b.n	80025fe <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80025ec:	f7fe fea0 	bl	8001330 <HAL_GetTick>
 80025f0:	4602      	mov	r2, r0
 80025f2:	693b      	ldr	r3, [r7, #16]
 80025f4:	1ad3      	subs	r3, r2, r3
 80025f6:	2b02      	cmp	r3, #2
 80025f8:	d901      	bls.n	80025fe <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80025fa:	2303      	movs	r3, #3
 80025fc:	e087      	b.n	800270e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80025fe:	4b27      	ldr	r3, [pc, #156]	@ (800269c <HAL_RCC_OscConfig+0x470>)
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002606:	2b00      	cmp	r3, #0
 8002608:	d1f0      	bne.n	80025ec <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	69da      	ldr	r2, [r3, #28]
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	6a1b      	ldr	r3, [r3, #32]
 8002612:	431a      	orrs	r2, r3
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002618:	019b      	lsls	r3, r3, #6
 800261a:	431a      	orrs	r2, r3
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002620:	085b      	lsrs	r3, r3, #1
 8002622:	3b01      	subs	r3, #1
 8002624:	041b      	lsls	r3, r3, #16
 8002626:	431a      	orrs	r2, r3
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800262c:	061b      	lsls	r3, r3, #24
 800262e:	491b      	ldr	r1, [pc, #108]	@ (800269c <HAL_RCC_OscConfig+0x470>)
 8002630:	4313      	orrs	r3, r2
 8002632:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002634:	4b1b      	ldr	r3, [pc, #108]	@ (80026a4 <HAL_RCC_OscConfig+0x478>)
 8002636:	2201      	movs	r2, #1
 8002638:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800263a:	f7fe fe79 	bl	8001330 <HAL_GetTick>
 800263e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002640:	e008      	b.n	8002654 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002642:	f7fe fe75 	bl	8001330 <HAL_GetTick>
 8002646:	4602      	mov	r2, r0
 8002648:	693b      	ldr	r3, [r7, #16]
 800264a:	1ad3      	subs	r3, r2, r3
 800264c:	2b02      	cmp	r3, #2
 800264e:	d901      	bls.n	8002654 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002650:	2303      	movs	r3, #3
 8002652:	e05c      	b.n	800270e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002654:	4b11      	ldr	r3, [pc, #68]	@ (800269c <HAL_RCC_OscConfig+0x470>)
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800265c:	2b00      	cmp	r3, #0
 800265e:	d0f0      	beq.n	8002642 <HAL_RCC_OscConfig+0x416>
 8002660:	e054      	b.n	800270c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002662:	4b10      	ldr	r3, [pc, #64]	@ (80026a4 <HAL_RCC_OscConfig+0x478>)
 8002664:	2200      	movs	r2, #0
 8002666:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002668:	f7fe fe62 	bl	8001330 <HAL_GetTick>
 800266c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800266e:	e008      	b.n	8002682 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002670:	f7fe fe5e 	bl	8001330 <HAL_GetTick>
 8002674:	4602      	mov	r2, r0
 8002676:	693b      	ldr	r3, [r7, #16]
 8002678:	1ad3      	subs	r3, r2, r3
 800267a:	2b02      	cmp	r3, #2
 800267c:	d901      	bls.n	8002682 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800267e:	2303      	movs	r3, #3
 8002680:	e045      	b.n	800270e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002682:	4b06      	ldr	r3, [pc, #24]	@ (800269c <HAL_RCC_OscConfig+0x470>)
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800268a:	2b00      	cmp	r3, #0
 800268c:	d1f0      	bne.n	8002670 <HAL_RCC_OscConfig+0x444>
 800268e:	e03d      	b.n	800270c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	699b      	ldr	r3, [r3, #24]
 8002694:	2b01      	cmp	r3, #1
 8002696:	d107      	bne.n	80026a8 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002698:	2301      	movs	r3, #1
 800269a:	e038      	b.n	800270e <HAL_RCC_OscConfig+0x4e2>
 800269c:	40023800 	.word	0x40023800
 80026a0:	40007000 	.word	0x40007000
 80026a4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80026a8:	4b1b      	ldr	r3, [pc, #108]	@ (8002718 <HAL_RCC_OscConfig+0x4ec>)
 80026aa:	685b      	ldr	r3, [r3, #4]
 80026ac:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	699b      	ldr	r3, [r3, #24]
 80026b2:	2b01      	cmp	r3, #1
 80026b4:	d028      	beq.n	8002708 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80026c0:	429a      	cmp	r2, r3
 80026c2:	d121      	bne.n	8002708 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80026ce:	429a      	cmp	r2, r3
 80026d0:	d11a      	bne.n	8002708 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80026d2:	68fa      	ldr	r2, [r7, #12]
 80026d4:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80026d8:	4013      	ands	r3, r2
 80026da:	687a      	ldr	r2, [r7, #4]
 80026dc:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80026de:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80026e0:	4293      	cmp	r3, r2
 80026e2:	d111      	bne.n	8002708 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80026ee:	085b      	lsrs	r3, r3, #1
 80026f0:	3b01      	subs	r3, #1
 80026f2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80026f4:	429a      	cmp	r2, r3
 80026f6:	d107      	bne.n	8002708 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002702:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002704:	429a      	cmp	r2, r3
 8002706:	d001      	beq.n	800270c <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8002708:	2301      	movs	r3, #1
 800270a:	e000      	b.n	800270e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800270c:	2300      	movs	r3, #0
}
 800270e:	4618      	mov	r0, r3
 8002710:	3718      	adds	r7, #24
 8002712:	46bd      	mov	sp, r7
 8002714:	bd80      	pop	{r7, pc}
 8002716:	bf00      	nop
 8002718:	40023800 	.word	0x40023800

0800271c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800271c:	b580      	push	{r7, lr}
 800271e:	b084      	sub	sp, #16
 8002720:	af00      	add	r7, sp, #0
 8002722:	6078      	str	r0, [r7, #4]
 8002724:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	2b00      	cmp	r3, #0
 800272a:	d101      	bne.n	8002730 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800272c:	2301      	movs	r3, #1
 800272e:	e0cc      	b.n	80028ca <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002730:	4b68      	ldr	r3, [pc, #416]	@ (80028d4 <HAL_RCC_ClockConfig+0x1b8>)
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	f003 0307 	and.w	r3, r3, #7
 8002738:	683a      	ldr	r2, [r7, #0]
 800273a:	429a      	cmp	r2, r3
 800273c:	d90c      	bls.n	8002758 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800273e:	4b65      	ldr	r3, [pc, #404]	@ (80028d4 <HAL_RCC_ClockConfig+0x1b8>)
 8002740:	683a      	ldr	r2, [r7, #0]
 8002742:	b2d2      	uxtb	r2, r2
 8002744:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002746:	4b63      	ldr	r3, [pc, #396]	@ (80028d4 <HAL_RCC_ClockConfig+0x1b8>)
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	f003 0307 	and.w	r3, r3, #7
 800274e:	683a      	ldr	r2, [r7, #0]
 8002750:	429a      	cmp	r2, r3
 8002752:	d001      	beq.n	8002758 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002754:	2301      	movs	r3, #1
 8002756:	e0b8      	b.n	80028ca <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	f003 0302 	and.w	r3, r3, #2
 8002760:	2b00      	cmp	r3, #0
 8002762:	d020      	beq.n	80027a6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	f003 0304 	and.w	r3, r3, #4
 800276c:	2b00      	cmp	r3, #0
 800276e:	d005      	beq.n	800277c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002770:	4b59      	ldr	r3, [pc, #356]	@ (80028d8 <HAL_RCC_ClockConfig+0x1bc>)
 8002772:	689b      	ldr	r3, [r3, #8]
 8002774:	4a58      	ldr	r2, [pc, #352]	@ (80028d8 <HAL_RCC_ClockConfig+0x1bc>)
 8002776:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800277a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	f003 0308 	and.w	r3, r3, #8
 8002784:	2b00      	cmp	r3, #0
 8002786:	d005      	beq.n	8002794 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002788:	4b53      	ldr	r3, [pc, #332]	@ (80028d8 <HAL_RCC_ClockConfig+0x1bc>)
 800278a:	689b      	ldr	r3, [r3, #8]
 800278c:	4a52      	ldr	r2, [pc, #328]	@ (80028d8 <HAL_RCC_ClockConfig+0x1bc>)
 800278e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8002792:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002794:	4b50      	ldr	r3, [pc, #320]	@ (80028d8 <HAL_RCC_ClockConfig+0x1bc>)
 8002796:	689b      	ldr	r3, [r3, #8]
 8002798:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	689b      	ldr	r3, [r3, #8]
 80027a0:	494d      	ldr	r1, [pc, #308]	@ (80028d8 <HAL_RCC_ClockConfig+0x1bc>)
 80027a2:	4313      	orrs	r3, r2
 80027a4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	f003 0301 	and.w	r3, r3, #1
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d044      	beq.n	800283c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	685b      	ldr	r3, [r3, #4]
 80027b6:	2b01      	cmp	r3, #1
 80027b8:	d107      	bne.n	80027ca <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80027ba:	4b47      	ldr	r3, [pc, #284]	@ (80028d8 <HAL_RCC_ClockConfig+0x1bc>)
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d119      	bne.n	80027fa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80027c6:	2301      	movs	r3, #1
 80027c8:	e07f      	b.n	80028ca <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	685b      	ldr	r3, [r3, #4]
 80027ce:	2b02      	cmp	r3, #2
 80027d0:	d003      	beq.n	80027da <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80027d6:	2b03      	cmp	r3, #3
 80027d8:	d107      	bne.n	80027ea <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80027da:	4b3f      	ldr	r3, [pc, #252]	@ (80028d8 <HAL_RCC_ClockConfig+0x1bc>)
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d109      	bne.n	80027fa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80027e6:	2301      	movs	r3, #1
 80027e8:	e06f      	b.n	80028ca <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80027ea:	4b3b      	ldr	r3, [pc, #236]	@ (80028d8 <HAL_RCC_ClockConfig+0x1bc>)
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	f003 0302 	and.w	r3, r3, #2
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d101      	bne.n	80027fa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80027f6:	2301      	movs	r3, #1
 80027f8:	e067      	b.n	80028ca <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80027fa:	4b37      	ldr	r3, [pc, #220]	@ (80028d8 <HAL_RCC_ClockConfig+0x1bc>)
 80027fc:	689b      	ldr	r3, [r3, #8]
 80027fe:	f023 0203 	bic.w	r2, r3, #3
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	685b      	ldr	r3, [r3, #4]
 8002806:	4934      	ldr	r1, [pc, #208]	@ (80028d8 <HAL_RCC_ClockConfig+0x1bc>)
 8002808:	4313      	orrs	r3, r2
 800280a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800280c:	f7fe fd90 	bl	8001330 <HAL_GetTick>
 8002810:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002812:	e00a      	b.n	800282a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002814:	f7fe fd8c 	bl	8001330 <HAL_GetTick>
 8002818:	4602      	mov	r2, r0
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	1ad3      	subs	r3, r2, r3
 800281e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002822:	4293      	cmp	r3, r2
 8002824:	d901      	bls.n	800282a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002826:	2303      	movs	r3, #3
 8002828:	e04f      	b.n	80028ca <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800282a:	4b2b      	ldr	r3, [pc, #172]	@ (80028d8 <HAL_RCC_ClockConfig+0x1bc>)
 800282c:	689b      	ldr	r3, [r3, #8]
 800282e:	f003 020c 	and.w	r2, r3, #12
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	685b      	ldr	r3, [r3, #4]
 8002836:	009b      	lsls	r3, r3, #2
 8002838:	429a      	cmp	r2, r3
 800283a:	d1eb      	bne.n	8002814 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800283c:	4b25      	ldr	r3, [pc, #148]	@ (80028d4 <HAL_RCC_ClockConfig+0x1b8>)
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	f003 0307 	and.w	r3, r3, #7
 8002844:	683a      	ldr	r2, [r7, #0]
 8002846:	429a      	cmp	r2, r3
 8002848:	d20c      	bcs.n	8002864 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800284a:	4b22      	ldr	r3, [pc, #136]	@ (80028d4 <HAL_RCC_ClockConfig+0x1b8>)
 800284c:	683a      	ldr	r2, [r7, #0]
 800284e:	b2d2      	uxtb	r2, r2
 8002850:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002852:	4b20      	ldr	r3, [pc, #128]	@ (80028d4 <HAL_RCC_ClockConfig+0x1b8>)
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	f003 0307 	and.w	r3, r3, #7
 800285a:	683a      	ldr	r2, [r7, #0]
 800285c:	429a      	cmp	r2, r3
 800285e:	d001      	beq.n	8002864 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002860:	2301      	movs	r3, #1
 8002862:	e032      	b.n	80028ca <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	f003 0304 	and.w	r3, r3, #4
 800286c:	2b00      	cmp	r3, #0
 800286e:	d008      	beq.n	8002882 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002870:	4b19      	ldr	r3, [pc, #100]	@ (80028d8 <HAL_RCC_ClockConfig+0x1bc>)
 8002872:	689b      	ldr	r3, [r3, #8]
 8002874:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	68db      	ldr	r3, [r3, #12]
 800287c:	4916      	ldr	r1, [pc, #88]	@ (80028d8 <HAL_RCC_ClockConfig+0x1bc>)
 800287e:	4313      	orrs	r3, r2
 8002880:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	f003 0308 	and.w	r3, r3, #8
 800288a:	2b00      	cmp	r3, #0
 800288c:	d009      	beq.n	80028a2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800288e:	4b12      	ldr	r3, [pc, #72]	@ (80028d8 <HAL_RCC_ClockConfig+0x1bc>)
 8002890:	689b      	ldr	r3, [r3, #8]
 8002892:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	691b      	ldr	r3, [r3, #16]
 800289a:	00db      	lsls	r3, r3, #3
 800289c:	490e      	ldr	r1, [pc, #56]	@ (80028d8 <HAL_RCC_ClockConfig+0x1bc>)
 800289e:	4313      	orrs	r3, r2
 80028a0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80028a2:	f000 f821 	bl	80028e8 <HAL_RCC_GetSysClockFreq>
 80028a6:	4602      	mov	r2, r0
 80028a8:	4b0b      	ldr	r3, [pc, #44]	@ (80028d8 <HAL_RCC_ClockConfig+0x1bc>)
 80028aa:	689b      	ldr	r3, [r3, #8]
 80028ac:	091b      	lsrs	r3, r3, #4
 80028ae:	f003 030f 	and.w	r3, r3, #15
 80028b2:	490a      	ldr	r1, [pc, #40]	@ (80028dc <HAL_RCC_ClockConfig+0x1c0>)
 80028b4:	5ccb      	ldrb	r3, [r1, r3]
 80028b6:	fa22 f303 	lsr.w	r3, r2, r3
 80028ba:	4a09      	ldr	r2, [pc, #36]	@ (80028e0 <HAL_RCC_ClockConfig+0x1c4>)
 80028bc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 80028be:	4b09      	ldr	r3, [pc, #36]	@ (80028e4 <HAL_RCC_ClockConfig+0x1c8>)
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	4618      	mov	r0, r3
 80028c4:	f7fe fcf0 	bl	80012a8 <HAL_InitTick>

  return HAL_OK;
 80028c8:	2300      	movs	r3, #0
}
 80028ca:	4618      	mov	r0, r3
 80028cc:	3710      	adds	r7, #16
 80028ce:	46bd      	mov	sp, r7
 80028d0:	bd80      	pop	{r7, pc}
 80028d2:	bf00      	nop
 80028d4:	40023c00 	.word	0x40023c00
 80028d8:	40023800 	.word	0x40023800
 80028dc:	0800495c 	.word	0x0800495c
 80028e0:	20000000 	.word	0x20000000
 80028e4:	20000004 	.word	0x20000004

080028e8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80028e8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80028ec:	b090      	sub	sp, #64	@ 0x40
 80028ee:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80028f0:	2300      	movs	r3, #0
 80028f2:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 80028f4:	2300      	movs	r3, #0
 80028f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 80028f8:	2300      	movs	r3, #0
 80028fa:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 80028fc:	2300      	movs	r3, #0
 80028fe:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002900:	4b59      	ldr	r3, [pc, #356]	@ (8002a68 <HAL_RCC_GetSysClockFreq+0x180>)
 8002902:	689b      	ldr	r3, [r3, #8]
 8002904:	f003 030c 	and.w	r3, r3, #12
 8002908:	2b08      	cmp	r3, #8
 800290a:	d00d      	beq.n	8002928 <HAL_RCC_GetSysClockFreq+0x40>
 800290c:	2b08      	cmp	r3, #8
 800290e:	f200 80a1 	bhi.w	8002a54 <HAL_RCC_GetSysClockFreq+0x16c>
 8002912:	2b00      	cmp	r3, #0
 8002914:	d002      	beq.n	800291c <HAL_RCC_GetSysClockFreq+0x34>
 8002916:	2b04      	cmp	r3, #4
 8002918:	d003      	beq.n	8002922 <HAL_RCC_GetSysClockFreq+0x3a>
 800291a:	e09b      	b.n	8002a54 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800291c:	4b53      	ldr	r3, [pc, #332]	@ (8002a6c <HAL_RCC_GetSysClockFreq+0x184>)
 800291e:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002920:	e09b      	b.n	8002a5a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002922:	4b53      	ldr	r3, [pc, #332]	@ (8002a70 <HAL_RCC_GetSysClockFreq+0x188>)
 8002924:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002926:	e098      	b.n	8002a5a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002928:	4b4f      	ldr	r3, [pc, #316]	@ (8002a68 <HAL_RCC_GetSysClockFreq+0x180>)
 800292a:	685b      	ldr	r3, [r3, #4]
 800292c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002930:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002932:	4b4d      	ldr	r3, [pc, #308]	@ (8002a68 <HAL_RCC_GetSysClockFreq+0x180>)
 8002934:	685b      	ldr	r3, [r3, #4]
 8002936:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800293a:	2b00      	cmp	r3, #0
 800293c:	d028      	beq.n	8002990 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800293e:	4b4a      	ldr	r3, [pc, #296]	@ (8002a68 <HAL_RCC_GetSysClockFreq+0x180>)
 8002940:	685b      	ldr	r3, [r3, #4]
 8002942:	099b      	lsrs	r3, r3, #6
 8002944:	2200      	movs	r2, #0
 8002946:	623b      	str	r3, [r7, #32]
 8002948:	627a      	str	r2, [r7, #36]	@ 0x24
 800294a:	6a3b      	ldr	r3, [r7, #32]
 800294c:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8002950:	2100      	movs	r1, #0
 8002952:	4b47      	ldr	r3, [pc, #284]	@ (8002a70 <HAL_RCC_GetSysClockFreq+0x188>)
 8002954:	fb03 f201 	mul.w	r2, r3, r1
 8002958:	2300      	movs	r3, #0
 800295a:	fb00 f303 	mul.w	r3, r0, r3
 800295e:	4413      	add	r3, r2
 8002960:	4a43      	ldr	r2, [pc, #268]	@ (8002a70 <HAL_RCC_GetSysClockFreq+0x188>)
 8002962:	fba0 1202 	umull	r1, r2, r0, r2
 8002966:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002968:	460a      	mov	r2, r1
 800296a:	62ba      	str	r2, [r7, #40]	@ 0x28
 800296c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800296e:	4413      	add	r3, r2
 8002970:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002972:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002974:	2200      	movs	r2, #0
 8002976:	61bb      	str	r3, [r7, #24]
 8002978:	61fa      	str	r2, [r7, #28]
 800297a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800297e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8002982:	f7fd fc7d 	bl	8000280 <__aeabi_uldivmod>
 8002986:	4602      	mov	r2, r0
 8002988:	460b      	mov	r3, r1
 800298a:	4613      	mov	r3, r2
 800298c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800298e:	e053      	b.n	8002a38 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002990:	4b35      	ldr	r3, [pc, #212]	@ (8002a68 <HAL_RCC_GetSysClockFreq+0x180>)
 8002992:	685b      	ldr	r3, [r3, #4]
 8002994:	099b      	lsrs	r3, r3, #6
 8002996:	2200      	movs	r2, #0
 8002998:	613b      	str	r3, [r7, #16]
 800299a:	617a      	str	r2, [r7, #20]
 800299c:	693b      	ldr	r3, [r7, #16]
 800299e:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80029a2:	f04f 0b00 	mov.w	fp, #0
 80029a6:	4652      	mov	r2, sl
 80029a8:	465b      	mov	r3, fp
 80029aa:	f04f 0000 	mov.w	r0, #0
 80029ae:	f04f 0100 	mov.w	r1, #0
 80029b2:	0159      	lsls	r1, r3, #5
 80029b4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80029b8:	0150      	lsls	r0, r2, #5
 80029ba:	4602      	mov	r2, r0
 80029bc:	460b      	mov	r3, r1
 80029be:	ebb2 080a 	subs.w	r8, r2, sl
 80029c2:	eb63 090b 	sbc.w	r9, r3, fp
 80029c6:	f04f 0200 	mov.w	r2, #0
 80029ca:	f04f 0300 	mov.w	r3, #0
 80029ce:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80029d2:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80029d6:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80029da:	ebb2 0408 	subs.w	r4, r2, r8
 80029de:	eb63 0509 	sbc.w	r5, r3, r9
 80029e2:	f04f 0200 	mov.w	r2, #0
 80029e6:	f04f 0300 	mov.w	r3, #0
 80029ea:	00eb      	lsls	r3, r5, #3
 80029ec:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80029f0:	00e2      	lsls	r2, r4, #3
 80029f2:	4614      	mov	r4, r2
 80029f4:	461d      	mov	r5, r3
 80029f6:	eb14 030a 	adds.w	r3, r4, sl
 80029fa:	603b      	str	r3, [r7, #0]
 80029fc:	eb45 030b 	adc.w	r3, r5, fp
 8002a00:	607b      	str	r3, [r7, #4]
 8002a02:	f04f 0200 	mov.w	r2, #0
 8002a06:	f04f 0300 	mov.w	r3, #0
 8002a0a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002a0e:	4629      	mov	r1, r5
 8002a10:	028b      	lsls	r3, r1, #10
 8002a12:	4621      	mov	r1, r4
 8002a14:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002a18:	4621      	mov	r1, r4
 8002a1a:	028a      	lsls	r2, r1, #10
 8002a1c:	4610      	mov	r0, r2
 8002a1e:	4619      	mov	r1, r3
 8002a20:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002a22:	2200      	movs	r2, #0
 8002a24:	60bb      	str	r3, [r7, #8]
 8002a26:	60fa      	str	r2, [r7, #12]
 8002a28:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002a2c:	f7fd fc28 	bl	8000280 <__aeabi_uldivmod>
 8002a30:	4602      	mov	r2, r0
 8002a32:	460b      	mov	r3, r1
 8002a34:	4613      	mov	r3, r2
 8002a36:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8002a38:	4b0b      	ldr	r3, [pc, #44]	@ (8002a68 <HAL_RCC_GetSysClockFreq+0x180>)
 8002a3a:	685b      	ldr	r3, [r3, #4]
 8002a3c:	0c1b      	lsrs	r3, r3, #16
 8002a3e:	f003 0303 	and.w	r3, r3, #3
 8002a42:	3301      	adds	r3, #1
 8002a44:	005b      	lsls	r3, r3, #1
 8002a46:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8002a48:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8002a4a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002a4c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a50:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002a52:	e002      	b.n	8002a5a <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002a54:	4b05      	ldr	r3, [pc, #20]	@ (8002a6c <HAL_RCC_GetSysClockFreq+0x184>)
 8002a56:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002a58:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002a5a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8002a5c:	4618      	mov	r0, r3
 8002a5e:	3740      	adds	r7, #64	@ 0x40
 8002a60:	46bd      	mov	sp, r7
 8002a62:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002a66:	bf00      	nop
 8002a68:	40023800 	.word	0x40023800
 8002a6c:	00f42400 	.word	0x00f42400
 8002a70:	017d7840 	.word	0x017d7840

08002a74 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002a74:	b480      	push	{r7}
 8002a76:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002a78:	4b03      	ldr	r3, [pc, #12]	@ (8002a88 <HAL_RCC_GetHCLKFreq+0x14>)
 8002a7a:	681b      	ldr	r3, [r3, #0]
}
 8002a7c:	4618      	mov	r0, r3
 8002a7e:	46bd      	mov	sp, r7
 8002a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a84:	4770      	bx	lr
 8002a86:	bf00      	nop
 8002a88:	20000000 	.word	0x20000000

08002a8c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002a8c:	b580      	push	{r7, lr}
 8002a8e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002a90:	f7ff fff0 	bl	8002a74 <HAL_RCC_GetHCLKFreq>
 8002a94:	4602      	mov	r2, r0
 8002a96:	4b05      	ldr	r3, [pc, #20]	@ (8002aac <HAL_RCC_GetPCLK1Freq+0x20>)
 8002a98:	689b      	ldr	r3, [r3, #8]
 8002a9a:	0a9b      	lsrs	r3, r3, #10
 8002a9c:	f003 0307 	and.w	r3, r3, #7
 8002aa0:	4903      	ldr	r1, [pc, #12]	@ (8002ab0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002aa2:	5ccb      	ldrb	r3, [r1, r3]
 8002aa4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002aa8:	4618      	mov	r0, r3
 8002aaa:	bd80      	pop	{r7, pc}
 8002aac:	40023800 	.word	0x40023800
 8002ab0:	0800496c 	.word	0x0800496c

08002ab4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002ab4:	b580      	push	{r7, lr}
 8002ab6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002ab8:	f7ff ffdc 	bl	8002a74 <HAL_RCC_GetHCLKFreq>
 8002abc:	4602      	mov	r2, r0
 8002abe:	4b05      	ldr	r3, [pc, #20]	@ (8002ad4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002ac0:	689b      	ldr	r3, [r3, #8]
 8002ac2:	0b5b      	lsrs	r3, r3, #13
 8002ac4:	f003 0307 	and.w	r3, r3, #7
 8002ac8:	4903      	ldr	r1, [pc, #12]	@ (8002ad8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002aca:	5ccb      	ldrb	r3, [r1, r3]
 8002acc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002ad0:	4618      	mov	r0, r3
 8002ad2:	bd80      	pop	{r7, pc}
 8002ad4:	40023800 	.word	0x40023800
 8002ad8:	0800496c 	.word	0x0800496c

08002adc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002adc:	b580      	push	{r7, lr}
 8002ade:	b082      	sub	sp, #8
 8002ae0:	af00      	add	r7, sp, #0
 8002ae2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d101      	bne.n	8002aee <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002aea:	2301      	movs	r3, #1
 8002aec:	e041      	b.n	8002b72 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002af4:	b2db      	uxtb	r3, r3
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d106      	bne.n	8002b08 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	2200      	movs	r2, #0
 8002afe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002b02:	6878      	ldr	r0, [r7, #4]
 8002b04:	f7fe f91a 	bl	8000d3c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	2202      	movs	r2, #2
 8002b0c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681a      	ldr	r2, [r3, #0]
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	3304      	adds	r3, #4
 8002b18:	4619      	mov	r1, r3
 8002b1a:	4610      	mov	r0, r2
 8002b1c:	f000 fcbc 	bl	8003498 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	2201      	movs	r2, #1
 8002b24:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	2201      	movs	r2, #1
 8002b2c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	2201      	movs	r2, #1
 8002b34:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	2201      	movs	r2, #1
 8002b3c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	2201      	movs	r2, #1
 8002b44:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	2201      	movs	r2, #1
 8002b4c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	2201      	movs	r2, #1
 8002b54:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	2201      	movs	r2, #1
 8002b5c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	2201      	movs	r2, #1
 8002b64:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	2201      	movs	r2, #1
 8002b6c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002b70:	2300      	movs	r3, #0
}
 8002b72:	4618      	mov	r0, r3
 8002b74:	3708      	adds	r7, #8
 8002b76:	46bd      	mov	sp, r7
 8002b78:	bd80      	pop	{r7, pc}
	...

08002b7c <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8002b7c:	b480      	push	{r7}
 8002b7e:	b085      	sub	sp, #20
 8002b80:	af00      	add	r7, sp, #0
 8002b82:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002b8a:	b2db      	uxtb	r3, r3
 8002b8c:	2b01      	cmp	r3, #1
 8002b8e:	d001      	beq.n	8002b94 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8002b90:	2301      	movs	r3, #1
 8002b92:	e03c      	b.n	8002c0e <HAL_TIM_Base_Start+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	2202      	movs	r2, #2
 8002b98:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	4a1e      	ldr	r2, [pc, #120]	@ (8002c1c <HAL_TIM_Base_Start+0xa0>)
 8002ba2:	4293      	cmp	r3, r2
 8002ba4:	d018      	beq.n	8002bd8 <HAL_TIM_Base_Start+0x5c>
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002bae:	d013      	beq.n	8002bd8 <HAL_TIM_Base_Start+0x5c>
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	4a1a      	ldr	r2, [pc, #104]	@ (8002c20 <HAL_TIM_Base_Start+0xa4>)
 8002bb6:	4293      	cmp	r3, r2
 8002bb8:	d00e      	beq.n	8002bd8 <HAL_TIM_Base_Start+0x5c>
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	4a19      	ldr	r2, [pc, #100]	@ (8002c24 <HAL_TIM_Base_Start+0xa8>)
 8002bc0:	4293      	cmp	r3, r2
 8002bc2:	d009      	beq.n	8002bd8 <HAL_TIM_Base_Start+0x5c>
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	4a17      	ldr	r2, [pc, #92]	@ (8002c28 <HAL_TIM_Base_Start+0xac>)
 8002bca:	4293      	cmp	r3, r2
 8002bcc:	d004      	beq.n	8002bd8 <HAL_TIM_Base_Start+0x5c>
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	4a16      	ldr	r2, [pc, #88]	@ (8002c2c <HAL_TIM_Base_Start+0xb0>)
 8002bd4:	4293      	cmp	r3, r2
 8002bd6:	d111      	bne.n	8002bfc <HAL_TIM_Base_Start+0x80>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	689b      	ldr	r3, [r3, #8]
 8002bde:	f003 0307 	and.w	r3, r3, #7
 8002be2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	2b06      	cmp	r3, #6
 8002be8:	d010      	beq.n	8002c0c <HAL_TIM_Base_Start+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	681a      	ldr	r2, [r3, #0]
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	f042 0201 	orr.w	r2, r2, #1
 8002bf8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002bfa:	e007      	b.n	8002c0c <HAL_TIM_Base_Start+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	681a      	ldr	r2, [r3, #0]
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	f042 0201 	orr.w	r2, r2, #1
 8002c0a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002c0c:	2300      	movs	r3, #0
}
 8002c0e:	4618      	mov	r0, r3
 8002c10:	3714      	adds	r7, #20
 8002c12:	46bd      	mov	sp, r7
 8002c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c18:	4770      	bx	lr
 8002c1a:	bf00      	nop
 8002c1c:	40010000 	.word	0x40010000
 8002c20:	40000400 	.word	0x40000400
 8002c24:	40000800 	.word	0x40000800
 8002c28:	40000c00 	.word	0x40000c00
 8002c2c:	40014000 	.word	0x40014000

08002c30 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8002c30:	b580      	push	{r7, lr}
 8002c32:	b082      	sub	sp, #8
 8002c34:	af00      	add	r7, sp, #0
 8002c36:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d101      	bne.n	8002c42 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8002c3e:	2301      	movs	r3, #1
 8002c40:	e041      	b.n	8002cc6 <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002c48:	b2db      	uxtb	r3, r3
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d106      	bne.n	8002c5c <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	2200      	movs	r2, #0
 8002c52:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8002c56:	6878      	ldr	r0, [r7, #4]
 8002c58:	f000 f839 	bl	8002cce <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	2202      	movs	r2, #2
 8002c60:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681a      	ldr	r2, [r3, #0]
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	3304      	adds	r3, #4
 8002c6c:	4619      	mov	r1, r3
 8002c6e:	4610      	mov	r0, r2
 8002c70:	f000 fc12 	bl	8003498 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	2201      	movs	r2, #1
 8002c78:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	2201      	movs	r2, #1
 8002c80:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	2201      	movs	r2, #1
 8002c88:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	2201      	movs	r2, #1
 8002c90:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	2201      	movs	r2, #1
 8002c98:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	2201      	movs	r2, #1
 8002ca0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	2201      	movs	r2, #1
 8002ca8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	2201      	movs	r2, #1
 8002cb0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	2201      	movs	r2, #1
 8002cb8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	2201      	movs	r2, #1
 8002cc0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002cc4:	2300      	movs	r3, #0
}
 8002cc6:	4618      	mov	r0, r3
 8002cc8:	3708      	adds	r7, #8
 8002cca:	46bd      	mov	sp, r7
 8002ccc:	bd80      	pop	{r7, pc}

08002cce <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8002cce:	b480      	push	{r7}
 8002cd0:	b083      	sub	sp, #12
 8002cd2:	af00      	add	r7, sp, #0
 8002cd4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8002cd6:	bf00      	nop
 8002cd8:	370c      	adds	r7, #12
 8002cda:	46bd      	mov	sp, r7
 8002cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ce0:	4770      	bx	lr
	...

08002ce4 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002ce4:	b580      	push	{r7, lr}
 8002ce6:	b084      	sub	sp, #16
 8002ce8:	af00      	add	r7, sp, #0
 8002cea:	6078      	str	r0, [r7, #4]
 8002cec:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002cee:	2300      	movs	r3, #0
 8002cf0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8002cf2:	683b      	ldr	r3, [r7, #0]
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d104      	bne.n	8002d02 <HAL_TIM_IC_Start_IT+0x1e>
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8002cfe:	b2db      	uxtb	r3, r3
 8002d00:	e013      	b.n	8002d2a <HAL_TIM_IC_Start_IT+0x46>
 8002d02:	683b      	ldr	r3, [r7, #0]
 8002d04:	2b04      	cmp	r3, #4
 8002d06:	d104      	bne.n	8002d12 <HAL_TIM_IC_Start_IT+0x2e>
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8002d0e:	b2db      	uxtb	r3, r3
 8002d10:	e00b      	b.n	8002d2a <HAL_TIM_IC_Start_IT+0x46>
 8002d12:	683b      	ldr	r3, [r7, #0]
 8002d14:	2b08      	cmp	r3, #8
 8002d16:	d104      	bne.n	8002d22 <HAL_TIM_IC_Start_IT+0x3e>
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002d1e:	b2db      	uxtb	r3, r3
 8002d20:	e003      	b.n	8002d2a <HAL_TIM_IC_Start_IT+0x46>
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002d28:	b2db      	uxtb	r3, r3
 8002d2a:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8002d2c:	683b      	ldr	r3, [r7, #0]
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d104      	bne.n	8002d3c <HAL_TIM_IC_Start_IT+0x58>
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8002d38:	b2db      	uxtb	r3, r3
 8002d3a:	e013      	b.n	8002d64 <HAL_TIM_IC_Start_IT+0x80>
 8002d3c:	683b      	ldr	r3, [r7, #0]
 8002d3e:	2b04      	cmp	r3, #4
 8002d40:	d104      	bne.n	8002d4c <HAL_TIM_IC_Start_IT+0x68>
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8002d48:	b2db      	uxtb	r3, r3
 8002d4a:	e00b      	b.n	8002d64 <HAL_TIM_IC_Start_IT+0x80>
 8002d4c:	683b      	ldr	r3, [r7, #0]
 8002d4e:	2b08      	cmp	r3, #8
 8002d50:	d104      	bne.n	8002d5c <HAL_TIM_IC_Start_IT+0x78>
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8002d58:	b2db      	uxtb	r3, r3
 8002d5a:	e003      	b.n	8002d64 <HAL_TIM_IC_Start_IT+0x80>
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8002d62:	b2db      	uxtb	r3, r3
 8002d64:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8002d66:	7bbb      	ldrb	r3, [r7, #14]
 8002d68:	2b01      	cmp	r3, #1
 8002d6a:	d102      	bne.n	8002d72 <HAL_TIM_IC_Start_IT+0x8e>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8002d6c:	7b7b      	ldrb	r3, [r7, #13]
 8002d6e:	2b01      	cmp	r3, #1
 8002d70:	d001      	beq.n	8002d76 <HAL_TIM_IC_Start_IT+0x92>
  {
    return HAL_ERROR;
 8002d72:	2301      	movs	r3, #1
 8002d74:	e0c2      	b.n	8002efc <HAL_TIM_IC_Start_IT+0x218>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002d76:	683b      	ldr	r3, [r7, #0]
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d104      	bne.n	8002d86 <HAL_TIM_IC_Start_IT+0xa2>
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	2202      	movs	r2, #2
 8002d80:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002d84:	e013      	b.n	8002dae <HAL_TIM_IC_Start_IT+0xca>
 8002d86:	683b      	ldr	r3, [r7, #0]
 8002d88:	2b04      	cmp	r3, #4
 8002d8a:	d104      	bne.n	8002d96 <HAL_TIM_IC_Start_IT+0xb2>
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	2202      	movs	r2, #2
 8002d90:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002d94:	e00b      	b.n	8002dae <HAL_TIM_IC_Start_IT+0xca>
 8002d96:	683b      	ldr	r3, [r7, #0]
 8002d98:	2b08      	cmp	r3, #8
 8002d9a:	d104      	bne.n	8002da6 <HAL_TIM_IC_Start_IT+0xc2>
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	2202      	movs	r2, #2
 8002da0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002da4:	e003      	b.n	8002dae <HAL_TIM_IC_Start_IT+0xca>
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	2202      	movs	r2, #2
 8002daa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002dae:	683b      	ldr	r3, [r7, #0]
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d104      	bne.n	8002dbe <HAL_TIM_IC_Start_IT+0xda>
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	2202      	movs	r2, #2
 8002db8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002dbc:	e013      	b.n	8002de6 <HAL_TIM_IC_Start_IT+0x102>
 8002dbe:	683b      	ldr	r3, [r7, #0]
 8002dc0:	2b04      	cmp	r3, #4
 8002dc2:	d104      	bne.n	8002dce <HAL_TIM_IC_Start_IT+0xea>
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	2202      	movs	r2, #2
 8002dc8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002dcc:	e00b      	b.n	8002de6 <HAL_TIM_IC_Start_IT+0x102>
 8002dce:	683b      	ldr	r3, [r7, #0]
 8002dd0:	2b08      	cmp	r3, #8
 8002dd2:	d104      	bne.n	8002dde <HAL_TIM_IC_Start_IT+0xfa>
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	2202      	movs	r2, #2
 8002dd8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002ddc:	e003      	b.n	8002de6 <HAL_TIM_IC_Start_IT+0x102>
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	2202      	movs	r2, #2
 8002de2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  switch (Channel)
 8002de6:	683b      	ldr	r3, [r7, #0]
 8002de8:	2b0c      	cmp	r3, #12
 8002dea:	d841      	bhi.n	8002e70 <HAL_TIM_IC_Start_IT+0x18c>
 8002dec:	a201      	add	r2, pc, #4	@ (adr r2, 8002df4 <HAL_TIM_IC_Start_IT+0x110>)
 8002dee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002df2:	bf00      	nop
 8002df4:	08002e29 	.word	0x08002e29
 8002df8:	08002e71 	.word	0x08002e71
 8002dfc:	08002e71 	.word	0x08002e71
 8002e00:	08002e71 	.word	0x08002e71
 8002e04:	08002e3b 	.word	0x08002e3b
 8002e08:	08002e71 	.word	0x08002e71
 8002e0c:	08002e71 	.word	0x08002e71
 8002e10:	08002e71 	.word	0x08002e71
 8002e14:	08002e4d 	.word	0x08002e4d
 8002e18:	08002e71 	.word	0x08002e71
 8002e1c:	08002e71 	.word	0x08002e71
 8002e20:	08002e71 	.word	0x08002e71
 8002e24:	08002e5f 	.word	0x08002e5f
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	68da      	ldr	r2, [r3, #12]
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	f042 0202 	orr.w	r2, r2, #2
 8002e36:	60da      	str	r2, [r3, #12]
      break;
 8002e38:	e01d      	b.n	8002e76 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	68da      	ldr	r2, [r3, #12]
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	f042 0204 	orr.w	r2, r2, #4
 8002e48:	60da      	str	r2, [r3, #12]
      break;
 8002e4a:	e014      	b.n	8002e76 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	68da      	ldr	r2, [r3, #12]
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	f042 0208 	orr.w	r2, r2, #8
 8002e5a:	60da      	str	r2, [r3, #12]
      break;
 8002e5c:	e00b      	b.n	8002e76 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	68da      	ldr	r2, [r3, #12]
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	f042 0210 	orr.w	r2, r2, #16
 8002e6c:	60da      	str	r2, [r3, #12]
      break;
 8002e6e:	e002      	b.n	8002e76 <HAL_TIM_IC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 8002e70:	2301      	movs	r3, #1
 8002e72:	73fb      	strb	r3, [r7, #15]
      break;
 8002e74:	bf00      	nop
  }

  if (status == HAL_OK)
 8002e76:	7bfb      	ldrb	r3, [r7, #15]
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	d13e      	bne.n	8002efa <HAL_TIM_IC_Start_IT+0x216>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	2201      	movs	r2, #1
 8002e82:	6839      	ldr	r1, [r7, #0]
 8002e84:	4618      	mov	r0, r3
 8002e86:	f000 fd45 	bl	8003914 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	4a1d      	ldr	r2, [pc, #116]	@ (8002f04 <HAL_TIM_IC_Start_IT+0x220>)
 8002e90:	4293      	cmp	r3, r2
 8002e92:	d018      	beq.n	8002ec6 <HAL_TIM_IC_Start_IT+0x1e2>
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002e9c:	d013      	beq.n	8002ec6 <HAL_TIM_IC_Start_IT+0x1e2>
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	4a19      	ldr	r2, [pc, #100]	@ (8002f08 <HAL_TIM_IC_Start_IT+0x224>)
 8002ea4:	4293      	cmp	r3, r2
 8002ea6:	d00e      	beq.n	8002ec6 <HAL_TIM_IC_Start_IT+0x1e2>
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	4a17      	ldr	r2, [pc, #92]	@ (8002f0c <HAL_TIM_IC_Start_IT+0x228>)
 8002eae:	4293      	cmp	r3, r2
 8002eb0:	d009      	beq.n	8002ec6 <HAL_TIM_IC_Start_IT+0x1e2>
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	4a16      	ldr	r2, [pc, #88]	@ (8002f10 <HAL_TIM_IC_Start_IT+0x22c>)
 8002eb8:	4293      	cmp	r3, r2
 8002eba:	d004      	beq.n	8002ec6 <HAL_TIM_IC_Start_IT+0x1e2>
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	4a14      	ldr	r2, [pc, #80]	@ (8002f14 <HAL_TIM_IC_Start_IT+0x230>)
 8002ec2:	4293      	cmp	r3, r2
 8002ec4:	d111      	bne.n	8002eea <HAL_TIM_IC_Start_IT+0x206>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	689b      	ldr	r3, [r3, #8]
 8002ecc:	f003 0307 	and.w	r3, r3, #7
 8002ed0:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002ed2:	68bb      	ldr	r3, [r7, #8]
 8002ed4:	2b06      	cmp	r3, #6
 8002ed6:	d010      	beq.n	8002efa <HAL_TIM_IC_Start_IT+0x216>
      {
        __HAL_TIM_ENABLE(htim);
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	681a      	ldr	r2, [r3, #0]
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	f042 0201 	orr.w	r2, r2, #1
 8002ee6:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002ee8:	e007      	b.n	8002efa <HAL_TIM_IC_Start_IT+0x216>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	681a      	ldr	r2, [r3, #0]
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	f042 0201 	orr.w	r2, r2, #1
 8002ef8:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8002efa:	7bfb      	ldrb	r3, [r7, #15]
}
 8002efc:	4618      	mov	r0, r3
 8002efe:	3710      	adds	r7, #16
 8002f00:	46bd      	mov	sp, r7
 8002f02:	bd80      	pop	{r7, pc}
 8002f04:	40010000 	.word	0x40010000
 8002f08:	40000400 	.word	0x40000400
 8002f0c:	40000800 	.word	0x40000800
 8002f10:	40000c00 	.word	0x40000c00
 8002f14:	40014000 	.word	0x40014000

08002f18 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002f18:	b580      	push	{r7, lr}
 8002f1a:	b084      	sub	sp, #16
 8002f1c:	af00      	add	r7, sp, #0
 8002f1e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	68db      	ldr	r3, [r3, #12]
 8002f26:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	691b      	ldr	r3, [r3, #16]
 8002f2e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8002f30:	68bb      	ldr	r3, [r7, #8]
 8002f32:	f003 0302 	and.w	r3, r3, #2
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d020      	beq.n	8002f7c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	f003 0302 	and.w	r3, r3, #2
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	d01b      	beq.n	8002f7c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	f06f 0202 	mvn.w	r2, #2
 8002f4c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	2201      	movs	r2, #1
 8002f52:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	699b      	ldr	r3, [r3, #24]
 8002f5a:	f003 0303 	and.w	r3, r3, #3
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d003      	beq.n	8002f6a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002f62:	6878      	ldr	r0, [r7, #4]
 8002f64:	f7fe f870 	bl	8001048 <HAL_TIM_IC_CaptureCallback>
 8002f68:	e005      	b.n	8002f76 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002f6a:	6878      	ldr	r0, [r7, #4]
 8002f6c:	f000 fa76 	bl	800345c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002f70:	6878      	ldr	r0, [r7, #4]
 8002f72:	f000 fa7d 	bl	8003470 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	2200      	movs	r2, #0
 8002f7a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8002f7c:	68bb      	ldr	r3, [r7, #8]
 8002f7e:	f003 0304 	and.w	r3, r3, #4
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d020      	beq.n	8002fc8 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	f003 0304 	and.w	r3, r3, #4
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	d01b      	beq.n	8002fc8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	f06f 0204 	mvn.w	r2, #4
 8002f98:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	2202      	movs	r2, #2
 8002f9e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	699b      	ldr	r3, [r3, #24]
 8002fa6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d003      	beq.n	8002fb6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002fae:	6878      	ldr	r0, [r7, #4]
 8002fb0:	f7fe f84a 	bl	8001048 <HAL_TIM_IC_CaptureCallback>
 8002fb4:	e005      	b.n	8002fc2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002fb6:	6878      	ldr	r0, [r7, #4]
 8002fb8:	f000 fa50 	bl	800345c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002fbc:	6878      	ldr	r0, [r7, #4]
 8002fbe:	f000 fa57 	bl	8003470 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	2200      	movs	r2, #0
 8002fc6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8002fc8:	68bb      	ldr	r3, [r7, #8]
 8002fca:	f003 0308 	and.w	r3, r3, #8
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d020      	beq.n	8003014 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	f003 0308 	and.w	r3, r3, #8
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d01b      	beq.n	8003014 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	f06f 0208 	mvn.w	r2, #8
 8002fe4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	2204      	movs	r2, #4
 8002fea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	69db      	ldr	r3, [r3, #28]
 8002ff2:	f003 0303 	and.w	r3, r3, #3
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d003      	beq.n	8003002 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002ffa:	6878      	ldr	r0, [r7, #4]
 8002ffc:	f7fe f824 	bl	8001048 <HAL_TIM_IC_CaptureCallback>
 8003000:	e005      	b.n	800300e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003002:	6878      	ldr	r0, [r7, #4]
 8003004:	f000 fa2a 	bl	800345c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003008:	6878      	ldr	r0, [r7, #4]
 800300a:	f000 fa31 	bl	8003470 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	2200      	movs	r2, #0
 8003012:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8003014:	68bb      	ldr	r3, [r7, #8]
 8003016:	f003 0310 	and.w	r3, r3, #16
 800301a:	2b00      	cmp	r3, #0
 800301c:	d020      	beq.n	8003060 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	f003 0310 	and.w	r3, r3, #16
 8003024:	2b00      	cmp	r3, #0
 8003026:	d01b      	beq.n	8003060 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	f06f 0210 	mvn.w	r2, #16
 8003030:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	2208      	movs	r2, #8
 8003036:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	69db      	ldr	r3, [r3, #28]
 800303e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003042:	2b00      	cmp	r3, #0
 8003044:	d003      	beq.n	800304e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003046:	6878      	ldr	r0, [r7, #4]
 8003048:	f7fd fffe 	bl	8001048 <HAL_TIM_IC_CaptureCallback>
 800304c:	e005      	b.n	800305a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800304e:	6878      	ldr	r0, [r7, #4]
 8003050:	f000 fa04 	bl	800345c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003054:	6878      	ldr	r0, [r7, #4]
 8003056:	f000 fa0b 	bl	8003470 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	2200      	movs	r2, #0
 800305e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8003060:	68bb      	ldr	r3, [r7, #8]
 8003062:	f003 0301 	and.w	r3, r3, #1
 8003066:	2b00      	cmp	r3, #0
 8003068:	d00c      	beq.n	8003084 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	f003 0301 	and.w	r3, r3, #1
 8003070:	2b00      	cmp	r3, #0
 8003072:	d007      	beq.n	8003084 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	f06f 0201 	mvn.w	r2, #1
 800307c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800307e:	6878      	ldr	r0, [r7, #4]
 8003080:	f000 f9e2 	bl	8003448 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8003084:	68bb      	ldr	r3, [r7, #8]
 8003086:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800308a:	2b00      	cmp	r3, #0
 800308c:	d00c      	beq.n	80030a8 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003094:	2b00      	cmp	r3, #0
 8003096:	d007      	beq.n	80030a8 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80030a0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80030a2:	6878      	ldr	r0, [r7, #4]
 80030a4:	f000 fcd4 	bl	8003a50 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80030a8:	68bb      	ldr	r3, [r7, #8]
 80030aa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d00c      	beq.n	80030cc <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	d007      	beq.n	80030cc <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80030c4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80030c6:	6878      	ldr	r0, [r7, #4]
 80030c8:	f000 f9dc 	bl	8003484 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80030cc:	68bb      	ldr	r3, [r7, #8]
 80030ce:	f003 0320 	and.w	r3, r3, #32
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d00c      	beq.n	80030f0 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	f003 0320 	and.w	r3, r3, #32
 80030dc:	2b00      	cmp	r3, #0
 80030de:	d007      	beq.n	80030f0 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	f06f 0220 	mvn.w	r2, #32
 80030e8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80030ea:	6878      	ldr	r0, [r7, #4]
 80030ec:	f000 fca6 	bl	8003a3c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80030f0:	bf00      	nop
 80030f2:	3710      	adds	r7, #16
 80030f4:	46bd      	mov	sp, r7
 80030f6:	bd80      	pop	{r7, pc}

080030f8 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 80030f8:	b580      	push	{r7, lr}
 80030fa:	b086      	sub	sp, #24
 80030fc:	af00      	add	r7, sp, #0
 80030fe:	60f8      	str	r0, [r7, #12]
 8003100:	60b9      	str	r1, [r7, #8]
 8003102:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003104:	2300      	movs	r3, #0
 8003106:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800310e:	2b01      	cmp	r3, #1
 8003110:	d101      	bne.n	8003116 <HAL_TIM_IC_ConfigChannel+0x1e>
 8003112:	2302      	movs	r3, #2
 8003114:	e088      	b.n	8003228 <HAL_TIM_IC_ConfigChannel+0x130>
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	2201      	movs	r2, #1
 800311a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if (Channel == TIM_CHANNEL_1)
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	2b00      	cmp	r3, #0
 8003122:	d11b      	bne.n	800315c <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8003128:	68bb      	ldr	r3, [r7, #8]
 800312a:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 800312c:	68bb      	ldr	r3, [r7, #8]
 800312e:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8003130:	68bb      	ldr	r3, [r7, #8]
 8003132:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 8003134:	f000 fa36 	bl	80035a4 <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	699a      	ldr	r2, [r3, #24]
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	f022 020c 	bic.w	r2, r2, #12
 8003146:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	6999      	ldr	r1, [r3, #24]
 800314e:	68bb      	ldr	r3, [r7, #8]
 8003150:	689a      	ldr	r2, [r3, #8]
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	430a      	orrs	r2, r1
 8003158:	619a      	str	r2, [r3, #24]
 800315a:	e060      	b.n	800321e <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	2b04      	cmp	r3, #4
 8003160:	d11c      	bne.n	800319c <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8003166:	68bb      	ldr	r3, [r7, #8]
 8003168:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 800316a:	68bb      	ldr	r3, [r7, #8]
 800316c:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 800316e:	68bb      	ldr	r3, [r7, #8]
 8003170:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 8003172:	f000 faae 	bl	80036d2 <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	699a      	ldr	r2, [r3, #24]
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 8003184:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	6999      	ldr	r1, [r3, #24]
 800318c:	68bb      	ldr	r3, [r7, #8]
 800318e:	689b      	ldr	r3, [r3, #8]
 8003190:	021a      	lsls	r2, r3, #8
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	430a      	orrs	r2, r1
 8003198:	619a      	str	r2, [r3, #24]
 800319a:	e040      	b.n	800321e <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	2b08      	cmp	r3, #8
 80031a0:	d11b      	bne.n	80031da <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80031a6:	68bb      	ldr	r3, [r7, #8]
 80031a8:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80031aa:	68bb      	ldr	r3, [r7, #8]
 80031ac:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80031ae:	68bb      	ldr	r3, [r7, #8]
 80031b0:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 80031b2:	f000 fafb 	bl	80037ac <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	69da      	ldr	r2, [r3, #28]
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	f022 020c 	bic.w	r2, r2, #12
 80031c4:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	69d9      	ldr	r1, [r3, #28]
 80031cc:	68bb      	ldr	r3, [r7, #8]
 80031ce:	689a      	ldr	r2, [r3, #8]
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	430a      	orrs	r2, r1
 80031d6:	61da      	str	r2, [r3, #28]
 80031d8:	e021      	b.n	800321e <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	2b0c      	cmp	r3, #12
 80031de:	d11c      	bne.n	800321a <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80031e4:	68bb      	ldr	r3, [r7, #8]
 80031e6:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80031e8:	68bb      	ldr	r3, [r7, #8]
 80031ea:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80031ec:	68bb      	ldr	r3, [r7, #8]
 80031ee:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 80031f0:	f000 fb18 	bl	8003824 <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	69da      	ldr	r2, [r3, #28]
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 8003202:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	69d9      	ldr	r1, [r3, #28]
 800320a:	68bb      	ldr	r3, [r7, #8]
 800320c:	689b      	ldr	r3, [r3, #8]
 800320e:	021a      	lsls	r2, r3, #8
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	430a      	orrs	r2, r1
 8003216:	61da      	str	r2, [r3, #28]
 8003218:	e001      	b.n	800321e <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 800321a:	2301      	movs	r3, #1
 800321c:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	2200      	movs	r2, #0
 8003222:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003226:	7dfb      	ldrb	r3, [r7, #23]
}
 8003228:	4618      	mov	r0, r3
 800322a:	3718      	adds	r7, #24
 800322c:	46bd      	mov	sp, r7
 800322e:	bd80      	pop	{r7, pc}

08003230 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003230:	b580      	push	{r7, lr}
 8003232:	b084      	sub	sp, #16
 8003234:	af00      	add	r7, sp, #0
 8003236:	6078      	str	r0, [r7, #4]
 8003238:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800323a:	2300      	movs	r3, #0
 800323c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003244:	2b01      	cmp	r3, #1
 8003246:	d101      	bne.n	800324c <HAL_TIM_ConfigClockSource+0x1c>
 8003248:	2302      	movs	r3, #2
 800324a:	e0b4      	b.n	80033b6 <HAL_TIM_ConfigClockSource+0x186>
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	2201      	movs	r2, #1
 8003250:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	2202      	movs	r2, #2
 8003258:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	689b      	ldr	r3, [r3, #8]
 8003262:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003264:	68bb      	ldr	r3, [r7, #8]
 8003266:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800326a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800326c:	68bb      	ldr	r3, [r7, #8]
 800326e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003272:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	68ba      	ldr	r2, [r7, #8]
 800327a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800327c:	683b      	ldr	r3, [r7, #0]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003284:	d03e      	beq.n	8003304 <HAL_TIM_ConfigClockSource+0xd4>
 8003286:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800328a:	f200 8087 	bhi.w	800339c <HAL_TIM_ConfigClockSource+0x16c>
 800328e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003292:	f000 8086 	beq.w	80033a2 <HAL_TIM_ConfigClockSource+0x172>
 8003296:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800329a:	d87f      	bhi.n	800339c <HAL_TIM_ConfigClockSource+0x16c>
 800329c:	2b70      	cmp	r3, #112	@ 0x70
 800329e:	d01a      	beq.n	80032d6 <HAL_TIM_ConfigClockSource+0xa6>
 80032a0:	2b70      	cmp	r3, #112	@ 0x70
 80032a2:	d87b      	bhi.n	800339c <HAL_TIM_ConfigClockSource+0x16c>
 80032a4:	2b60      	cmp	r3, #96	@ 0x60
 80032a6:	d050      	beq.n	800334a <HAL_TIM_ConfigClockSource+0x11a>
 80032a8:	2b60      	cmp	r3, #96	@ 0x60
 80032aa:	d877      	bhi.n	800339c <HAL_TIM_ConfigClockSource+0x16c>
 80032ac:	2b50      	cmp	r3, #80	@ 0x50
 80032ae:	d03c      	beq.n	800332a <HAL_TIM_ConfigClockSource+0xfa>
 80032b0:	2b50      	cmp	r3, #80	@ 0x50
 80032b2:	d873      	bhi.n	800339c <HAL_TIM_ConfigClockSource+0x16c>
 80032b4:	2b40      	cmp	r3, #64	@ 0x40
 80032b6:	d058      	beq.n	800336a <HAL_TIM_ConfigClockSource+0x13a>
 80032b8:	2b40      	cmp	r3, #64	@ 0x40
 80032ba:	d86f      	bhi.n	800339c <HAL_TIM_ConfigClockSource+0x16c>
 80032bc:	2b30      	cmp	r3, #48	@ 0x30
 80032be:	d064      	beq.n	800338a <HAL_TIM_ConfigClockSource+0x15a>
 80032c0:	2b30      	cmp	r3, #48	@ 0x30
 80032c2:	d86b      	bhi.n	800339c <HAL_TIM_ConfigClockSource+0x16c>
 80032c4:	2b20      	cmp	r3, #32
 80032c6:	d060      	beq.n	800338a <HAL_TIM_ConfigClockSource+0x15a>
 80032c8:	2b20      	cmp	r3, #32
 80032ca:	d867      	bhi.n	800339c <HAL_TIM_ConfigClockSource+0x16c>
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	d05c      	beq.n	800338a <HAL_TIM_ConfigClockSource+0x15a>
 80032d0:	2b10      	cmp	r3, #16
 80032d2:	d05a      	beq.n	800338a <HAL_TIM_ConfigClockSource+0x15a>
 80032d4:	e062      	b.n	800339c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80032da:	683b      	ldr	r3, [r7, #0]
 80032dc:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80032de:	683b      	ldr	r3, [r7, #0]
 80032e0:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80032e2:	683b      	ldr	r3, [r7, #0]
 80032e4:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80032e6:	f000 faf5 	bl	80038d4 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	689b      	ldr	r3, [r3, #8]
 80032f0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80032f2:	68bb      	ldr	r3, [r7, #8]
 80032f4:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80032f8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	68ba      	ldr	r2, [r7, #8]
 8003300:	609a      	str	r2, [r3, #8]
      break;
 8003302:	e04f      	b.n	80033a4 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003308:	683b      	ldr	r3, [r7, #0]
 800330a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800330c:	683b      	ldr	r3, [r7, #0]
 800330e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003310:	683b      	ldr	r3, [r7, #0]
 8003312:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003314:	f000 fade 	bl	80038d4 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	689a      	ldr	r2, [r3, #8]
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003326:	609a      	str	r2, [r3, #8]
      break;
 8003328:	e03c      	b.n	80033a4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800332e:	683b      	ldr	r3, [r7, #0]
 8003330:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003332:	683b      	ldr	r3, [r7, #0]
 8003334:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003336:	461a      	mov	r2, r3
 8003338:	f000 f99c 	bl	8003674 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	2150      	movs	r1, #80	@ 0x50
 8003342:	4618      	mov	r0, r3
 8003344:	f000 faab 	bl	800389e <TIM_ITRx_SetConfig>
      break;
 8003348:	e02c      	b.n	80033a4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800334e:	683b      	ldr	r3, [r7, #0]
 8003350:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003352:	683b      	ldr	r3, [r7, #0]
 8003354:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003356:	461a      	mov	r2, r3
 8003358:	f000 f9f8 	bl	800374c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	2160      	movs	r1, #96	@ 0x60
 8003362:	4618      	mov	r0, r3
 8003364:	f000 fa9b 	bl	800389e <TIM_ITRx_SetConfig>
      break;
 8003368:	e01c      	b.n	80033a4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800336e:	683b      	ldr	r3, [r7, #0]
 8003370:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003372:	683b      	ldr	r3, [r7, #0]
 8003374:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003376:	461a      	mov	r2, r3
 8003378:	f000 f97c 	bl	8003674 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	2140      	movs	r1, #64	@ 0x40
 8003382:	4618      	mov	r0, r3
 8003384:	f000 fa8b 	bl	800389e <TIM_ITRx_SetConfig>
      break;
 8003388:	e00c      	b.n	80033a4 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	681a      	ldr	r2, [r3, #0]
 800338e:	683b      	ldr	r3, [r7, #0]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	4619      	mov	r1, r3
 8003394:	4610      	mov	r0, r2
 8003396:	f000 fa82 	bl	800389e <TIM_ITRx_SetConfig>
      break;
 800339a:	e003      	b.n	80033a4 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800339c:	2301      	movs	r3, #1
 800339e:	73fb      	strb	r3, [r7, #15]
      break;
 80033a0:	e000      	b.n	80033a4 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80033a2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	2201      	movs	r2, #1
 80033a8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	2200      	movs	r2, #0
 80033b0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80033b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80033b6:	4618      	mov	r0, r3
 80033b8:	3710      	adds	r7, #16
 80033ba:	46bd      	mov	sp, r7
 80033bc:	bd80      	pop	{r7, pc}
	...

080033c0 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(const TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80033c0:	b480      	push	{r7}
 80033c2:	b085      	sub	sp, #20
 80033c4:	af00      	add	r7, sp, #0
 80033c6:	6078      	str	r0, [r7, #4]
 80033c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 80033ca:	2300      	movs	r3, #0
 80033cc:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 80033ce:	683b      	ldr	r3, [r7, #0]
 80033d0:	2b0c      	cmp	r3, #12
 80033d2:	d831      	bhi.n	8003438 <HAL_TIM_ReadCapturedValue+0x78>
 80033d4:	a201      	add	r2, pc, #4	@ (adr r2, 80033dc <HAL_TIM_ReadCapturedValue+0x1c>)
 80033d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80033da:	bf00      	nop
 80033dc:	08003411 	.word	0x08003411
 80033e0:	08003439 	.word	0x08003439
 80033e4:	08003439 	.word	0x08003439
 80033e8:	08003439 	.word	0x08003439
 80033ec:	0800341b 	.word	0x0800341b
 80033f0:	08003439 	.word	0x08003439
 80033f4:	08003439 	.word	0x08003439
 80033f8:	08003439 	.word	0x08003439
 80033fc:	08003425 	.word	0x08003425
 8003400:	08003439 	.word	0x08003439
 8003404:	08003439 	.word	0x08003439
 8003408:	08003439 	.word	0x08003439
 800340c:	0800342f 	.word	0x0800342f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003416:	60fb      	str	r3, [r7, #12]

      break;
 8003418:	e00f      	b.n	800343a <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003420:	60fb      	str	r3, [r7, #12]

      break;
 8003422:	e00a      	b.n	800343a <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800342a:	60fb      	str	r3, [r7, #12]

      break;
 800342c:	e005      	b.n	800343a <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003434:	60fb      	str	r3, [r7, #12]

      break;
 8003436:	e000      	b.n	800343a <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 8003438:	bf00      	nop
  }

  return tmpreg;
 800343a:	68fb      	ldr	r3, [r7, #12]
}
 800343c:	4618      	mov	r0, r3
 800343e:	3714      	adds	r7, #20
 8003440:	46bd      	mov	sp, r7
 8003442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003446:	4770      	bx	lr

08003448 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003448:	b480      	push	{r7}
 800344a:	b083      	sub	sp, #12
 800344c:	af00      	add	r7, sp, #0
 800344e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8003450:	bf00      	nop
 8003452:	370c      	adds	r7, #12
 8003454:	46bd      	mov	sp, r7
 8003456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800345a:	4770      	bx	lr

0800345c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800345c:	b480      	push	{r7}
 800345e:	b083      	sub	sp, #12
 8003460:	af00      	add	r7, sp, #0
 8003462:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003464:	bf00      	nop
 8003466:	370c      	adds	r7, #12
 8003468:	46bd      	mov	sp, r7
 800346a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800346e:	4770      	bx	lr

08003470 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003470:	b480      	push	{r7}
 8003472:	b083      	sub	sp, #12
 8003474:	af00      	add	r7, sp, #0
 8003476:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003478:	bf00      	nop
 800347a:	370c      	adds	r7, #12
 800347c:	46bd      	mov	sp, r7
 800347e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003482:	4770      	bx	lr

08003484 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003484:	b480      	push	{r7}
 8003486:	b083      	sub	sp, #12
 8003488:	af00      	add	r7, sp, #0
 800348a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800348c:	bf00      	nop
 800348e:	370c      	adds	r7, #12
 8003490:	46bd      	mov	sp, r7
 8003492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003496:	4770      	bx	lr

08003498 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003498:	b480      	push	{r7}
 800349a:	b085      	sub	sp, #20
 800349c:	af00      	add	r7, sp, #0
 800349e:	6078      	str	r0, [r7, #4]
 80034a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	4a37      	ldr	r2, [pc, #220]	@ (8003588 <TIM_Base_SetConfig+0xf0>)
 80034ac:	4293      	cmp	r3, r2
 80034ae:	d00f      	beq.n	80034d0 <TIM_Base_SetConfig+0x38>
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80034b6:	d00b      	beq.n	80034d0 <TIM_Base_SetConfig+0x38>
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	4a34      	ldr	r2, [pc, #208]	@ (800358c <TIM_Base_SetConfig+0xf4>)
 80034bc:	4293      	cmp	r3, r2
 80034be:	d007      	beq.n	80034d0 <TIM_Base_SetConfig+0x38>
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	4a33      	ldr	r2, [pc, #204]	@ (8003590 <TIM_Base_SetConfig+0xf8>)
 80034c4:	4293      	cmp	r3, r2
 80034c6:	d003      	beq.n	80034d0 <TIM_Base_SetConfig+0x38>
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	4a32      	ldr	r2, [pc, #200]	@ (8003594 <TIM_Base_SetConfig+0xfc>)
 80034cc:	4293      	cmp	r3, r2
 80034ce:	d108      	bne.n	80034e2 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80034d6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80034d8:	683b      	ldr	r3, [r7, #0]
 80034da:	685b      	ldr	r3, [r3, #4]
 80034dc:	68fa      	ldr	r2, [r7, #12]
 80034de:	4313      	orrs	r3, r2
 80034e0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	4a28      	ldr	r2, [pc, #160]	@ (8003588 <TIM_Base_SetConfig+0xf0>)
 80034e6:	4293      	cmp	r3, r2
 80034e8:	d01b      	beq.n	8003522 <TIM_Base_SetConfig+0x8a>
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80034f0:	d017      	beq.n	8003522 <TIM_Base_SetConfig+0x8a>
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	4a25      	ldr	r2, [pc, #148]	@ (800358c <TIM_Base_SetConfig+0xf4>)
 80034f6:	4293      	cmp	r3, r2
 80034f8:	d013      	beq.n	8003522 <TIM_Base_SetConfig+0x8a>
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	4a24      	ldr	r2, [pc, #144]	@ (8003590 <TIM_Base_SetConfig+0xf8>)
 80034fe:	4293      	cmp	r3, r2
 8003500:	d00f      	beq.n	8003522 <TIM_Base_SetConfig+0x8a>
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	4a23      	ldr	r2, [pc, #140]	@ (8003594 <TIM_Base_SetConfig+0xfc>)
 8003506:	4293      	cmp	r3, r2
 8003508:	d00b      	beq.n	8003522 <TIM_Base_SetConfig+0x8a>
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	4a22      	ldr	r2, [pc, #136]	@ (8003598 <TIM_Base_SetConfig+0x100>)
 800350e:	4293      	cmp	r3, r2
 8003510:	d007      	beq.n	8003522 <TIM_Base_SetConfig+0x8a>
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	4a21      	ldr	r2, [pc, #132]	@ (800359c <TIM_Base_SetConfig+0x104>)
 8003516:	4293      	cmp	r3, r2
 8003518:	d003      	beq.n	8003522 <TIM_Base_SetConfig+0x8a>
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	4a20      	ldr	r2, [pc, #128]	@ (80035a0 <TIM_Base_SetConfig+0x108>)
 800351e:	4293      	cmp	r3, r2
 8003520:	d108      	bne.n	8003534 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003528:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800352a:	683b      	ldr	r3, [r7, #0]
 800352c:	68db      	ldr	r3, [r3, #12]
 800352e:	68fa      	ldr	r2, [r7, #12]
 8003530:	4313      	orrs	r3, r2
 8003532:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800353a:	683b      	ldr	r3, [r7, #0]
 800353c:	695b      	ldr	r3, [r3, #20]
 800353e:	4313      	orrs	r3, r2
 8003540:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003542:	683b      	ldr	r3, [r7, #0]
 8003544:	689a      	ldr	r2, [r3, #8]
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800354a:	683b      	ldr	r3, [r7, #0]
 800354c:	681a      	ldr	r2, [r3, #0]
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	4a0c      	ldr	r2, [pc, #48]	@ (8003588 <TIM_Base_SetConfig+0xf0>)
 8003556:	4293      	cmp	r3, r2
 8003558:	d103      	bne.n	8003562 <TIM_Base_SetConfig+0xca>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800355a:	683b      	ldr	r3, [r7, #0]
 800355c:	691a      	ldr	r2, [r3, #16]
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	f043 0204 	orr.w	r2, r3, #4
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	2201      	movs	r2, #1
 8003572:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	68fa      	ldr	r2, [r7, #12]
 8003578:	601a      	str	r2, [r3, #0]
}
 800357a:	bf00      	nop
 800357c:	3714      	adds	r7, #20
 800357e:	46bd      	mov	sp, r7
 8003580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003584:	4770      	bx	lr
 8003586:	bf00      	nop
 8003588:	40010000 	.word	0x40010000
 800358c:	40000400 	.word	0x40000400
 8003590:	40000800 	.word	0x40000800
 8003594:	40000c00 	.word	0x40000c00
 8003598:	40014000 	.word	0x40014000
 800359c:	40014400 	.word	0x40014400
 80035a0:	40014800 	.word	0x40014800

080035a4 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 80035a4:	b480      	push	{r7}
 80035a6:	b087      	sub	sp, #28
 80035a8:	af00      	add	r7, sp, #0
 80035aa:	60f8      	str	r0, [r7, #12]
 80035ac:	60b9      	str	r1, [r7, #8]
 80035ae:	607a      	str	r2, [r7, #4]
 80035b0:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	6a1b      	ldr	r3, [r3, #32]
 80035b6:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	6a1b      	ldr	r3, [r3, #32]
 80035bc:	f023 0201 	bic.w	r2, r3, #1
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	699b      	ldr	r3, [r3, #24]
 80035c8:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	4a24      	ldr	r2, [pc, #144]	@ (8003660 <TIM_TI1_SetConfig+0xbc>)
 80035ce:	4293      	cmp	r3, r2
 80035d0:	d013      	beq.n	80035fa <TIM_TI1_SetConfig+0x56>
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80035d8:	d00f      	beq.n	80035fa <TIM_TI1_SetConfig+0x56>
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	4a21      	ldr	r2, [pc, #132]	@ (8003664 <TIM_TI1_SetConfig+0xc0>)
 80035de:	4293      	cmp	r3, r2
 80035e0:	d00b      	beq.n	80035fa <TIM_TI1_SetConfig+0x56>
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	4a20      	ldr	r2, [pc, #128]	@ (8003668 <TIM_TI1_SetConfig+0xc4>)
 80035e6:	4293      	cmp	r3, r2
 80035e8:	d007      	beq.n	80035fa <TIM_TI1_SetConfig+0x56>
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	4a1f      	ldr	r2, [pc, #124]	@ (800366c <TIM_TI1_SetConfig+0xc8>)
 80035ee:	4293      	cmp	r3, r2
 80035f0:	d003      	beq.n	80035fa <TIM_TI1_SetConfig+0x56>
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	4a1e      	ldr	r2, [pc, #120]	@ (8003670 <TIM_TI1_SetConfig+0xcc>)
 80035f6:	4293      	cmp	r3, r2
 80035f8:	d101      	bne.n	80035fe <TIM_TI1_SetConfig+0x5a>
 80035fa:	2301      	movs	r3, #1
 80035fc:	e000      	b.n	8003600 <TIM_TI1_SetConfig+0x5c>
 80035fe:	2300      	movs	r3, #0
 8003600:	2b00      	cmp	r3, #0
 8003602:	d008      	beq.n	8003616 <TIM_TI1_SetConfig+0x72>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8003604:	697b      	ldr	r3, [r7, #20]
 8003606:	f023 0303 	bic.w	r3, r3, #3
 800360a:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 800360c:	697a      	ldr	r2, [r7, #20]
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	4313      	orrs	r3, r2
 8003612:	617b      	str	r3, [r7, #20]
 8003614:	e003      	b.n	800361e <TIM_TI1_SetConfig+0x7a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8003616:	697b      	ldr	r3, [r7, #20]
 8003618:	f043 0301 	orr.w	r3, r3, #1
 800361c:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800361e:	697b      	ldr	r3, [r7, #20]
 8003620:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003624:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8003626:	683b      	ldr	r3, [r7, #0]
 8003628:	011b      	lsls	r3, r3, #4
 800362a:	b2db      	uxtb	r3, r3
 800362c:	697a      	ldr	r2, [r7, #20]
 800362e:	4313      	orrs	r3, r2
 8003630:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003632:	693b      	ldr	r3, [r7, #16]
 8003634:	f023 030a 	bic.w	r3, r3, #10
 8003638:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 800363a:	68bb      	ldr	r3, [r7, #8]
 800363c:	f003 030a 	and.w	r3, r3, #10
 8003640:	693a      	ldr	r2, [r7, #16]
 8003642:	4313      	orrs	r3, r2
 8003644:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	697a      	ldr	r2, [r7, #20]
 800364a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	693a      	ldr	r2, [r7, #16]
 8003650:	621a      	str	r2, [r3, #32]
}
 8003652:	bf00      	nop
 8003654:	371c      	adds	r7, #28
 8003656:	46bd      	mov	sp, r7
 8003658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800365c:	4770      	bx	lr
 800365e:	bf00      	nop
 8003660:	40010000 	.word	0x40010000
 8003664:	40000400 	.word	0x40000400
 8003668:	40000800 	.word	0x40000800
 800366c:	40000c00 	.word	0x40000c00
 8003670:	40014000 	.word	0x40014000

08003674 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003674:	b480      	push	{r7}
 8003676:	b087      	sub	sp, #28
 8003678:	af00      	add	r7, sp, #0
 800367a:	60f8      	str	r0, [r7, #12]
 800367c:	60b9      	str	r1, [r7, #8]
 800367e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	6a1b      	ldr	r3, [r3, #32]
 8003684:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	6a1b      	ldr	r3, [r3, #32]
 800368a:	f023 0201 	bic.w	r2, r3, #1
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	699b      	ldr	r3, [r3, #24]
 8003696:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003698:	693b      	ldr	r3, [r7, #16]
 800369a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800369e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	011b      	lsls	r3, r3, #4
 80036a4:	693a      	ldr	r2, [r7, #16]
 80036a6:	4313      	orrs	r3, r2
 80036a8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80036aa:	697b      	ldr	r3, [r7, #20]
 80036ac:	f023 030a 	bic.w	r3, r3, #10
 80036b0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80036b2:	697a      	ldr	r2, [r7, #20]
 80036b4:	68bb      	ldr	r3, [r7, #8]
 80036b6:	4313      	orrs	r3, r2
 80036b8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	693a      	ldr	r2, [r7, #16]
 80036be:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	697a      	ldr	r2, [r7, #20]
 80036c4:	621a      	str	r2, [r3, #32]
}
 80036c6:	bf00      	nop
 80036c8:	371c      	adds	r7, #28
 80036ca:	46bd      	mov	sp, r7
 80036cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036d0:	4770      	bx	lr

080036d2 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80036d2:	b480      	push	{r7}
 80036d4:	b087      	sub	sp, #28
 80036d6:	af00      	add	r7, sp, #0
 80036d8:	60f8      	str	r0, [r7, #12]
 80036da:	60b9      	str	r1, [r7, #8]
 80036dc:	607a      	str	r2, [r7, #4]
 80036de:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	6a1b      	ldr	r3, [r3, #32]
 80036e4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	6a1b      	ldr	r3, [r3, #32]
 80036ea:	f023 0210 	bic.w	r2, r3, #16
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	699b      	ldr	r3, [r3, #24]
 80036f6:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 80036f8:	693b      	ldr	r3, [r7, #16]
 80036fa:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80036fe:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	021b      	lsls	r3, r3, #8
 8003704:	693a      	ldr	r2, [r7, #16]
 8003706:	4313      	orrs	r3, r2
 8003708:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800370a:	693b      	ldr	r3, [r7, #16]
 800370c:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8003710:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8003712:	683b      	ldr	r3, [r7, #0]
 8003714:	031b      	lsls	r3, r3, #12
 8003716:	b29b      	uxth	r3, r3
 8003718:	693a      	ldr	r2, [r7, #16]
 800371a:	4313      	orrs	r3, r2
 800371c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800371e:	697b      	ldr	r3, [r7, #20]
 8003720:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8003724:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8003726:	68bb      	ldr	r3, [r7, #8]
 8003728:	011b      	lsls	r3, r3, #4
 800372a:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 800372e:	697a      	ldr	r2, [r7, #20]
 8003730:	4313      	orrs	r3, r2
 8003732:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	693a      	ldr	r2, [r7, #16]
 8003738:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	697a      	ldr	r2, [r7, #20]
 800373e:	621a      	str	r2, [r3, #32]
}
 8003740:	bf00      	nop
 8003742:	371c      	adds	r7, #28
 8003744:	46bd      	mov	sp, r7
 8003746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800374a:	4770      	bx	lr

0800374c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800374c:	b480      	push	{r7}
 800374e:	b087      	sub	sp, #28
 8003750:	af00      	add	r7, sp, #0
 8003752:	60f8      	str	r0, [r7, #12]
 8003754:	60b9      	str	r1, [r7, #8]
 8003756:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	6a1b      	ldr	r3, [r3, #32]
 800375c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	6a1b      	ldr	r3, [r3, #32]
 8003762:	f023 0210 	bic.w	r2, r3, #16
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	699b      	ldr	r3, [r3, #24]
 800376e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003770:	693b      	ldr	r3, [r7, #16]
 8003772:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8003776:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	031b      	lsls	r3, r3, #12
 800377c:	693a      	ldr	r2, [r7, #16]
 800377e:	4313      	orrs	r3, r2
 8003780:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003782:	697b      	ldr	r3, [r7, #20]
 8003784:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8003788:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800378a:	68bb      	ldr	r3, [r7, #8]
 800378c:	011b      	lsls	r3, r3, #4
 800378e:	697a      	ldr	r2, [r7, #20]
 8003790:	4313      	orrs	r3, r2
 8003792:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	693a      	ldr	r2, [r7, #16]
 8003798:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	697a      	ldr	r2, [r7, #20]
 800379e:	621a      	str	r2, [r3, #32]
}
 80037a0:	bf00      	nop
 80037a2:	371c      	adds	r7, #28
 80037a4:	46bd      	mov	sp, r7
 80037a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037aa:	4770      	bx	lr

080037ac <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80037ac:	b480      	push	{r7}
 80037ae:	b087      	sub	sp, #28
 80037b0:	af00      	add	r7, sp, #0
 80037b2:	60f8      	str	r0, [r7, #12]
 80037b4:	60b9      	str	r1, [r7, #8]
 80037b6:	607a      	str	r2, [r7, #4]
 80037b8:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	6a1b      	ldr	r3, [r3, #32]
 80037be:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	6a1b      	ldr	r3, [r3, #32]
 80037c4:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	69db      	ldr	r3, [r3, #28]
 80037d0:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 80037d2:	693b      	ldr	r3, [r7, #16]
 80037d4:	f023 0303 	bic.w	r3, r3, #3
 80037d8:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= TIM_ICSelection;
 80037da:	693a      	ldr	r2, [r7, #16]
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	4313      	orrs	r3, r2
 80037e0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 80037e2:	693b      	ldr	r3, [r7, #16]
 80037e4:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80037e8:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 80037ea:	683b      	ldr	r3, [r7, #0]
 80037ec:	011b      	lsls	r3, r3, #4
 80037ee:	b2db      	uxtb	r3, r3
 80037f0:	693a      	ldr	r2, [r7, #16]
 80037f2:	4313      	orrs	r3, r2
 80037f4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 80037f6:	697b      	ldr	r3, [r7, #20]
 80037f8:	f423 6320 	bic.w	r3, r3, #2560	@ 0xa00
 80037fc:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 80037fe:	68bb      	ldr	r3, [r7, #8]
 8003800:	021b      	lsls	r3, r3, #8
 8003802:	f403 6320 	and.w	r3, r3, #2560	@ 0xa00
 8003806:	697a      	ldr	r2, [r7, #20]
 8003808:	4313      	orrs	r3, r2
 800380a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	693a      	ldr	r2, [r7, #16]
 8003810:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	697a      	ldr	r2, [r7, #20]
 8003816:	621a      	str	r2, [r3, #32]
}
 8003818:	bf00      	nop
 800381a:	371c      	adds	r7, #28
 800381c:	46bd      	mov	sp, r7
 800381e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003822:	4770      	bx	lr

08003824 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8003824:	b480      	push	{r7}
 8003826:	b087      	sub	sp, #28
 8003828:	af00      	add	r7, sp, #0
 800382a:	60f8      	str	r0, [r7, #12]
 800382c:	60b9      	str	r1, [r7, #8]
 800382e:	607a      	str	r2, [r7, #4]
 8003830:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	6a1b      	ldr	r3, [r3, #32]
 8003836:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	6a1b      	ldr	r3, [r3, #32]
 800383c:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	69db      	ldr	r3, [r3, #28]
 8003848:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 800384a:	693b      	ldr	r3, [r7, #16]
 800384c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003850:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	021b      	lsls	r3, r3, #8
 8003856:	693a      	ldr	r2, [r7, #16]
 8003858:	4313      	orrs	r3, r2
 800385a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 800385c:	693b      	ldr	r3, [r7, #16]
 800385e:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8003862:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8003864:	683b      	ldr	r3, [r7, #0]
 8003866:	031b      	lsls	r3, r3, #12
 8003868:	b29b      	uxth	r3, r3
 800386a:	693a      	ldr	r2, [r7, #16]
 800386c:	4313      	orrs	r3, r2
 800386e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8003870:	697b      	ldr	r3, [r7, #20]
 8003872:	f423 4320 	bic.w	r3, r3, #40960	@ 0xa000
 8003876:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8003878:	68bb      	ldr	r3, [r7, #8]
 800387a:	031b      	lsls	r3, r3, #12
 800387c:	f403 4320 	and.w	r3, r3, #40960	@ 0xa000
 8003880:	697a      	ldr	r2, [r7, #20]
 8003882:	4313      	orrs	r3, r2
 8003884:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	693a      	ldr	r2, [r7, #16]
 800388a:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	697a      	ldr	r2, [r7, #20]
 8003890:	621a      	str	r2, [r3, #32]
}
 8003892:	bf00      	nop
 8003894:	371c      	adds	r7, #28
 8003896:	46bd      	mov	sp, r7
 8003898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800389c:	4770      	bx	lr

0800389e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800389e:	b480      	push	{r7}
 80038a0:	b085      	sub	sp, #20
 80038a2:	af00      	add	r7, sp, #0
 80038a4:	6078      	str	r0, [r7, #4]
 80038a6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	689b      	ldr	r3, [r3, #8]
 80038ac:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80038b4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80038b6:	683a      	ldr	r2, [r7, #0]
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	4313      	orrs	r3, r2
 80038bc:	f043 0307 	orr.w	r3, r3, #7
 80038c0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	68fa      	ldr	r2, [r7, #12]
 80038c6:	609a      	str	r2, [r3, #8]
}
 80038c8:	bf00      	nop
 80038ca:	3714      	adds	r7, #20
 80038cc:	46bd      	mov	sp, r7
 80038ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038d2:	4770      	bx	lr

080038d4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80038d4:	b480      	push	{r7}
 80038d6:	b087      	sub	sp, #28
 80038d8:	af00      	add	r7, sp, #0
 80038da:	60f8      	str	r0, [r7, #12]
 80038dc:	60b9      	str	r1, [r7, #8]
 80038de:	607a      	str	r2, [r7, #4]
 80038e0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	689b      	ldr	r3, [r3, #8]
 80038e6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80038e8:	697b      	ldr	r3, [r7, #20]
 80038ea:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80038ee:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80038f0:	683b      	ldr	r3, [r7, #0]
 80038f2:	021a      	lsls	r2, r3, #8
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	431a      	orrs	r2, r3
 80038f8:	68bb      	ldr	r3, [r7, #8]
 80038fa:	4313      	orrs	r3, r2
 80038fc:	697a      	ldr	r2, [r7, #20]
 80038fe:	4313      	orrs	r3, r2
 8003900:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	697a      	ldr	r2, [r7, #20]
 8003906:	609a      	str	r2, [r3, #8]
}
 8003908:	bf00      	nop
 800390a:	371c      	adds	r7, #28
 800390c:	46bd      	mov	sp, r7
 800390e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003912:	4770      	bx	lr

08003914 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003914:	b480      	push	{r7}
 8003916:	b087      	sub	sp, #28
 8003918:	af00      	add	r7, sp, #0
 800391a:	60f8      	str	r0, [r7, #12]
 800391c:	60b9      	str	r1, [r7, #8]
 800391e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003920:	68bb      	ldr	r3, [r7, #8]
 8003922:	f003 031f 	and.w	r3, r3, #31
 8003926:	2201      	movs	r2, #1
 8003928:	fa02 f303 	lsl.w	r3, r2, r3
 800392c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	6a1a      	ldr	r2, [r3, #32]
 8003932:	697b      	ldr	r3, [r7, #20]
 8003934:	43db      	mvns	r3, r3
 8003936:	401a      	ands	r2, r3
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	6a1a      	ldr	r2, [r3, #32]
 8003940:	68bb      	ldr	r3, [r7, #8]
 8003942:	f003 031f 	and.w	r3, r3, #31
 8003946:	6879      	ldr	r1, [r7, #4]
 8003948:	fa01 f303 	lsl.w	r3, r1, r3
 800394c:	431a      	orrs	r2, r3
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	621a      	str	r2, [r3, #32]
}
 8003952:	bf00      	nop
 8003954:	371c      	adds	r7, #28
 8003956:	46bd      	mov	sp, r7
 8003958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800395c:	4770      	bx	lr
	...

08003960 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003960:	b480      	push	{r7}
 8003962:	b085      	sub	sp, #20
 8003964:	af00      	add	r7, sp, #0
 8003966:	6078      	str	r0, [r7, #4]
 8003968:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003970:	2b01      	cmp	r3, #1
 8003972:	d101      	bne.n	8003978 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003974:	2302      	movs	r3, #2
 8003976:	e050      	b.n	8003a1a <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	2201      	movs	r2, #1
 800397c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	2202      	movs	r2, #2
 8003984:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	685b      	ldr	r3, [r3, #4]
 800398e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	689b      	ldr	r3, [r3, #8]
 8003996:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800399e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80039a0:	683b      	ldr	r3, [r7, #0]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	68fa      	ldr	r2, [r7, #12]
 80039a6:	4313      	orrs	r3, r2
 80039a8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	68fa      	ldr	r2, [r7, #12]
 80039b0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	4a1c      	ldr	r2, [pc, #112]	@ (8003a28 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80039b8:	4293      	cmp	r3, r2
 80039ba:	d018      	beq.n	80039ee <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80039c4:	d013      	beq.n	80039ee <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	4a18      	ldr	r2, [pc, #96]	@ (8003a2c <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80039cc:	4293      	cmp	r3, r2
 80039ce:	d00e      	beq.n	80039ee <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	4a16      	ldr	r2, [pc, #88]	@ (8003a30 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80039d6:	4293      	cmp	r3, r2
 80039d8:	d009      	beq.n	80039ee <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	4a15      	ldr	r2, [pc, #84]	@ (8003a34 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80039e0:	4293      	cmp	r3, r2
 80039e2:	d004      	beq.n	80039ee <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	4a13      	ldr	r2, [pc, #76]	@ (8003a38 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80039ea:	4293      	cmp	r3, r2
 80039ec:	d10c      	bne.n	8003a08 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80039ee:	68bb      	ldr	r3, [r7, #8]
 80039f0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80039f4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80039f6:	683b      	ldr	r3, [r7, #0]
 80039f8:	685b      	ldr	r3, [r3, #4]
 80039fa:	68ba      	ldr	r2, [r7, #8]
 80039fc:	4313      	orrs	r3, r2
 80039fe:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	68ba      	ldr	r2, [r7, #8]
 8003a06:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	2201      	movs	r2, #1
 8003a0c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	2200      	movs	r2, #0
 8003a14:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8003a18:	2300      	movs	r3, #0
}
 8003a1a:	4618      	mov	r0, r3
 8003a1c:	3714      	adds	r7, #20
 8003a1e:	46bd      	mov	sp, r7
 8003a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a24:	4770      	bx	lr
 8003a26:	bf00      	nop
 8003a28:	40010000 	.word	0x40010000
 8003a2c:	40000400 	.word	0x40000400
 8003a30:	40000800 	.word	0x40000800
 8003a34:	40000c00 	.word	0x40000c00
 8003a38:	40014000 	.word	0x40014000

08003a3c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003a3c:	b480      	push	{r7}
 8003a3e:	b083      	sub	sp, #12
 8003a40:	af00      	add	r7, sp, #0
 8003a42:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003a44:	bf00      	nop
 8003a46:	370c      	adds	r7, #12
 8003a48:	46bd      	mov	sp, r7
 8003a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a4e:	4770      	bx	lr

08003a50 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003a50:	b480      	push	{r7}
 8003a52:	b083      	sub	sp, #12
 8003a54:	af00      	add	r7, sp, #0
 8003a56:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003a58:	bf00      	nop
 8003a5a:	370c      	adds	r7, #12
 8003a5c:	46bd      	mov	sp, r7
 8003a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a62:	4770      	bx	lr

08003a64 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003a64:	b580      	push	{r7, lr}
 8003a66:	b082      	sub	sp, #8
 8003a68:	af00      	add	r7, sp, #0
 8003a6a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d101      	bne.n	8003a76 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003a72:	2301      	movs	r3, #1
 8003a74:	e042      	b.n	8003afc <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003a7c:	b2db      	uxtb	r3, r3
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d106      	bne.n	8003a90 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	2200      	movs	r2, #0
 8003a86:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003a8a:	6878      	ldr	r0, [r7, #4]
 8003a8c:	f7fd f9ba 	bl	8000e04 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	2224      	movs	r2, #36	@ 0x24
 8003a94:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	68da      	ldr	r2, [r3, #12]
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003aa6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003aa8:	6878      	ldr	r0, [r7, #4]
 8003aaa:	f000 f82b 	bl	8003b04 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	691a      	ldr	r2, [r3, #16]
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003abc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	695a      	ldr	r2, [r3, #20]
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003acc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	68da      	ldr	r2, [r3, #12]
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003adc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	2200      	movs	r2, #0
 8003ae2:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	2220      	movs	r2, #32
 8003ae8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	2220      	movs	r2, #32
 8003af0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	2200      	movs	r2, #0
 8003af8:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8003afa:	2300      	movs	r3, #0
}
 8003afc:	4618      	mov	r0, r3
 8003afe:	3708      	adds	r7, #8
 8003b00:	46bd      	mov	sp, r7
 8003b02:	bd80      	pop	{r7, pc}

08003b04 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003b04:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003b08:	b0c0      	sub	sp, #256	@ 0x100
 8003b0a:	af00      	add	r7, sp, #0
 8003b0c:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003b10:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	691b      	ldr	r3, [r3, #16]
 8003b18:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8003b1c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003b20:	68d9      	ldr	r1, [r3, #12]
 8003b22:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003b26:	681a      	ldr	r2, [r3, #0]
 8003b28:	ea40 0301 	orr.w	r3, r0, r1
 8003b2c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003b2e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003b32:	689a      	ldr	r2, [r3, #8]
 8003b34:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003b38:	691b      	ldr	r3, [r3, #16]
 8003b3a:	431a      	orrs	r2, r3
 8003b3c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003b40:	695b      	ldr	r3, [r3, #20]
 8003b42:	431a      	orrs	r2, r3
 8003b44:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003b48:	69db      	ldr	r3, [r3, #28]
 8003b4a:	4313      	orrs	r3, r2
 8003b4c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003b50:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	68db      	ldr	r3, [r3, #12]
 8003b58:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8003b5c:	f021 010c 	bic.w	r1, r1, #12
 8003b60:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003b64:	681a      	ldr	r2, [r3, #0]
 8003b66:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8003b6a:	430b      	orrs	r3, r1
 8003b6c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003b6e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	695b      	ldr	r3, [r3, #20]
 8003b76:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8003b7a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003b7e:	6999      	ldr	r1, [r3, #24]
 8003b80:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003b84:	681a      	ldr	r2, [r3, #0]
 8003b86:	ea40 0301 	orr.w	r3, r0, r1
 8003b8a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003b8c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003b90:	681a      	ldr	r2, [r3, #0]
 8003b92:	4b8f      	ldr	r3, [pc, #572]	@ (8003dd0 <UART_SetConfig+0x2cc>)
 8003b94:	429a      	cmp	r2, r3
 8003b96:	d005      	beq.n	8003ba4 <UART_SetConfig+0xa0>
 8003b98:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003b9c:	681a      	ldr	r2, [r3, #0]
 8003b9e:	4b8d      	ldr	r3, [pc, #564]	@ (8003dd4 <UART_SetConfig+0x2d0>)
 8003ba0:	429a      	cmp	r2, r3
 8003ba2:	d104      	bne.n	8003bae <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003ba4:	f7fe ff86 	bl	8002ab4 <HAL_RCC_GetPCLK2Freq>
 8003ba8:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8003bac:	e003      	b.n	8003bb6 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003bae:	f7fe ff6d 	bl	8002a8c <HAL_RCC_GetPCLK1Freq>
 8003bb2:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003bb6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003bba:	69db      	ldr	r3, [r3, #28]
 8003bbc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003bc0:	f040 810c 	bne.w	8003ddc <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003bc4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003bc8:	2200      	movs	r2, #0
 8003bca:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8003bce:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8003bd2:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8003bd6:	4622      	mov	r2, r4
 8003bd8:	462b      	mov	r3, r5
 8003bda:	1891      	adds	r1, r2, r2
 8003bdc:	65b9      	str	r1, [r7, #88]	@ 0x58
 8003bde:	415b      	adcs	r3, r3
 8003be0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003be2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8003be6:	4621      	mov	r1, r4
 8003be8:	eb12 0801 	adds.w	r8, r2, r1
 8003bec:	4629      	mov	r1, r5
 8003bee:	eb43 0901 	adc.w	r9, r3, r1
 8003bf2:	f04f 0200 	mov.w	r2, #0
 8003bf6:	f04f 0300 	mov.w	r3, #0
 8003bfa:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003bfe:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003c02:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003c06:	4690      	mov	r8, r2
 8003c08:	4699      	mov	r9, r3
 8003c0a:	4623      	mov	r3, r4
 8003c0c:	eb18 0303 	adds.w	r3, r8, r3
 8003c10:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8003c14:	462b      	mov	r3, r5
 8003c16:	eb49 0303 	adc.w	r3, r9, r3
 8003c1a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8003c1e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003c22:	685b      	ldr	r3, [r3, #4]
 8003c24:	2200      	movs	r2, #0
 8003c26:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8003c2a:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8003c2e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8003c32:	460b      	mov	r3, r1
 8003c34:	18db      	adds	r3, r3, r3
 8003c36:	653b      	str	r3, [r7, #80]	@ 0x50
 8003c38:	4613      	mov	r3, r2
 8003c3a:	eb42 0303 	adc.w	r3, r2, r3
 8003c3e:	657b      	str	r3, [r7, #84]	@ 0x54
 8003c40:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8003c44:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8003c48:	f7fc fb1a 	bl	8000280 <__aeabi_uldivmod>
 8003c4c:	4602      	mov	r2, r0
 8003c4e:	460b      	mov	r3, r1
 8003c50:	4b61      	ldr	r3, [pc, #388]	@ (8003dd8 <UART_SetConfig+0x2d4>)
 8003c52:	fba3 2302 	umull	r2, r3, r3, r2
 8003c56:	095b      	lsrs	r3, r3, #5
 8003c58:	011c      	lsls	r4, r3, #4
 8003c5a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003c5e:	2200      	movs	r2, #0
 8003c60:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003c64:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8003c68:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8003c6c:	4642      	mov	r2, r8
 8003c6e:	464b      	mov	r3, r9
 8003c70:	1891      	adds	r1, r2, r2
 8003c72:	64b9      	str	r1, [r7, #72]	@ 0x48
 8003c74:	415b      	adcs	r3, r3
 8003c76:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003c78:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8003c7c:	4641      	mov	r1, r8
 8003c7e:	eb12 0a01 	adds.w	sl, r2, r1
 8003c82:	4649      	mov	r1, r9
 8003c84:	eb43 0b01 	adc.w	fp, r3, r1
 8003c88:	f04f 0200 	mov.w	r2, #0
 8003c8c:	f04f 0300 	mov.w	r3, #0
 8003c90:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003c94:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003c98:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003c9c:	4692      	mov	sl, r2
 8003c9e:	469b      	mov	fp, r3
 8003ca0:	4643      	mov	r3, r8
 8003ca2:	eb1a 0303 	adds.w	r3, sl, r3
 8003ca6:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003caa:	464b      	mov	r3, r9
 8003cac:	eb4b 0303 	adc.w	r3, fp, r3
 8003cb0:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8003cb4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003cb8:	685b      	ldr	r3, [r3, #4]
 8003cba:	2200      	movs	r2, #0
 8003cbc:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003cc0:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8003cc4:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8003cc8:	460b      	mov	r3, r1
 8003cca:	18db      	adds	r3, r3, r3
 8003ccc:	643b      	str	r3, [r7, #64]	@ 0x40
 8003cce:	4613      	mov	r3, r2
 8003cd0:	eb42 0303 	adc.w	r3, r2, r3
 8003cd4:	647b      	str	r3, [r7, #68]	@ 0x44
 8003cd6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8003cda:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8003cde:	f7fc facf 	bl	8000280 <__aeabi_uldivmod>
 8003ce2:	4602      	mov	r2, r0
 8003ce4:	460b      	mov	r3, r1
 8003ce6:	4611      	mov	r1, r2
 8003ce8:	4b3b      	ldr	r3, [pc, #236]	@ (8003dd8 <UART_SetConfig+0x2d4>)
 8003cea:	fba3 2301 	umull	r2, r3, r3, r1
 8003cee:	095b      	lsrs	r3, r3, #5
 8003cf0:	2264      	movs	r2, #100	@ 0x64
 8003cf2:	fb02 f303 	mul.w	r3, r2, r3
 8003cf6:	1acb      	subs	r3, r1, r3
 8003cf8:	00db      	lsls	r3, r3, #3
 8003cfa:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8003cfe:	4b36      	ldr	r3, [pc, #216]	@ (8003dd8 <UART_SetConfig+0x2d4>)
 8003d00:	fba3 2302 	umull	r2, r3, r3, r2
 8003d04:	095b      	lsrs	r3, r3, #5
 8003d06:	005b      	lsls	r3, r3, #1
 8003d08:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8003d0c:	441c      	add	r4, r3
 8003d0e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003d12:	2200      	movs	r2, #0
 8003d14:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003d18:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8003d1c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8003d20:	4642      	mov	r2, r8
 8003d22:	464b      	mov	r3, r9
 8003d24:	1891      	adds	r1, r2, r2
 8003d26:	63b9      	str	r1, [r7, #56]	@ 0x38
 8003d28:	415b      	adcs	r3, r3
 8003d2a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003d2c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8003d30:	4641      	mov	r1, r8
 8003d32:	1851      	adds	r1, r2, r1
 8003d34:	6339      	str	r1, [r7, #48]	@ 0x30
 8003d36:	4649      	mov	r1, r9
 8003d38:	414b      	adcs	r3, r1
 8003d3a:	637b      	str	r3, [r7, #52]	@ 0x34
 8003d3c:	f04f 0200 	mov.w	r2, #0
 8003d40:	f04f 0300 	mov.w	r3, #0
 8003d44:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8003d48:	4659      	mov	r1, fp
 8003d4a:	00cb      	lsls	r3, r1, #3
 8003d4c:	4651      	mov	r1, sl
 8003d4e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003d52:	4651      	mov	r1, sl
 8003d54:	00ca      	lsls	r2, r1, #3
 8003d56:	4610      	mov	r0, r2
 8003d58:	4619      	mov	r1, r3
 8003d5a:	4603      	mov	r3, r0
 8003d5c:	4642      	mov	r2, r8
 8003d5e:	189b      	adds	r3, r3, r2
 8003d60:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003d64:	464b      	mov	r3, r9
 8003d66:	460a      	mov	r2, r1
 8003d68:	eb42 0303 	adc.w	r3, r2, r3
 8003d6c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003d70:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003d74:	685b      	ldr	r3, [r3, #4]
 8003d76:	2200      	movs	r2, #0
 8003d78:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8003d7c:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8003d80:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8003d84:	460b      	mov	r3, r1
 8003d86:	18db      	adds	r3, r3, r3
 8003d88:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003d8a:	4613      	mov	r3, r2
 8003d8c:	eb42 0303 	adc.w	r3, r2, r3
 8003d90:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003d92:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8003d96:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8003d9a:	f7fc fa71 	bl	8000280 <__aeabi_uldivmod>
 8003d9e:	4602      	mov	r2, r0
 8003da0:	460b      	mov	r3, r1
 8003da2:	4b0d      	ldr	r3, [pc, #52]	@ (8003dd8 <UART_SetConfig+0x2d4>)
 8003da4:	fba3 1302 	umull	r1, r3, r3, r2
 8003da8:	095b      	lsrs	r3, r3, #5
 8003daa:	2164      	movs	r1, #100	@ 0x64
 8003dac:	fb01 f303 	mul.w	r3, r1, r3
 8003db0:	1ad3      	subs	r3, r2, r3
 8003db2:	00db      	lsls	r3, r3, #3
 8003db4:	3332      	adds	r3, #50	@ 0x32
 8003db6:	4a08      	ldr	r2, [pc, #32]	@ (8003dd8 <UART_SetConfig+0x2d4>)
 8003db8:	fba2 2303 	umull	r2, r3, r2, r3
 8003dbc:	095b      	lsrs	r3, r3, #5
 8003dbe:	f003 0207 	and.w	r2, r3, #7
 8003dc2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	4422      	add	r2, r4
 8003dca:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003dcc:	e106      	b.n	8003fdc <UART_SetConfig+0x4d8>
 8003dce:	bf00      	nop
 8003dd0:	40011000 	.word	0x40011000
 8003dd4:	40011400 	.word	0x40011400
 8003dd8:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003ddc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003de0:	2200      	movs	r2, #0
 8003de2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8003de6:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8003dea:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8003dee:	4642      	mov	r2, r8
 8003df0:	464b      	mov	r3, r9
 8003df2:	1891      	adds	r1, r2, r2
 8003df4:	6239      	str	r1, [r7, #32]
 8003df6:	415b      	adcs	r3, r3
 8003df8:	627b      	str	r3, [r7, #36]	@ 0x24
 8003dfa:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003dfe:	4641      	mov	r1, r8
 8003e00:	1854      	adds	r4, r2, r1
 8003e02:	4649      	mov	r1, r9
 8003e04:	eb43 0501 	adc.w	r5, r3, r1
 8003e08:	f04f 0200 	mov.w	r2, #0
 8003e0c:	f04f 0300 	mov.w	r3, #0
 8003e10:	00eb      	lsls	r3, r5, #3
 8003e12:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003e16:	00e2      	lsls	r2, r4, #3
 8003e18:	4614      	mov	r4, r2
 8003e1a:	461d      	mov	r5, r3
 8003e1c:	4643      	mov	r3, r8
 8003e1e:	18e3      	adds	r3, r4, r3
 8003e20:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8003e24:	464b      	mov	r3, r9
 8003e26:	eb45 0303 	adc.w	r3, r5, r3
 8003e2a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8003e2e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003e32:	685b      	ldr	r3, [r3, #4]
 8003e34:	2200      	movs	r2, #0
 8003e36:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8003e3a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8003e3e:	f04f 0200 	mov.w	r2, #0
 8003e42:	f04f 0300 	mov.w	r3, #0
 8003e46:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8003e4a:	4629      	mov	r1, r5
 8003e4c:	008b      	lsls	r3, r1, #2
 8003e4e:	4621      	mov	r1, r4
 8003e50:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003e54:	4621      	mov	r1, r4
 8003e56:	008a      	lsls	r2, r1, #2
 8003e58:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8003e5c:	f7fc fa10 	bl	8000280 <__aeabi_uldivmod>
 8003e60:	4602      	mov	r2, r0
 8003e62:	460b      	mov	r3, r1
 8003e64:	4b60      	ldr	r3, [pc, #384]	@ (8003fe8 <UART_SetConfig+0x4e4>)
 8003e66:	fba3 2302 	umull	r2, r3, r3, r2
 8003e6a:	095b      	lsrs	r3, r3, #5
 8003e6c:	011c      	lsls	r4, r3, #4
 8003e6e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003e72:	2200      	movs	r2, #0
 8003e74:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8003e78:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8003e7c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8003e80:	4642      	mov	r2, r8
 8003e82:	464b      	mov	r3, r9
 8003e84:	1891      	adds	r1, r2, r2
 8003e86:	61b9      	str	r1, [r7, #24]
 8003e88:	415b      	adcs	r3, r3
 8003e8a:	61fb      	str	r3, [r7, #28]
 8003e8c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003e90:	4641      	mov	r1, r8
 8003e92:	1851      	adds	r1, r2, r1
 8003e94:	6139      	str	r1, [r7, #16]
 8003e96:	4649      	mov	r1, r9
 8003e98:	414b      	adcs	r3, r1
 8003e9a:	617b      	str	r3, [r7, #20]
 8003e9c:	f04f 0200 	mov.w	r2, #0
 8003ea0:	f04f 0300 	mov.w	r3, #0
 8003ea4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003ea8:	4659      	mov	r1, fp
 8003eaa:	00cb      	lsls	r3, r1, #3
 8003eac:	4651      	mov	r1, sl
 8003eae:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003eb2:	4651      	mov	r1, sl
 8003eb4:	00ca      	lsls	r2, r1, #3
 8003eb6:	4610      	mov	r0, r2
 8003eb8:	4619      	mov	r1, r3
 8003eba:	4603      	mov	r3, r0
 8003ebc:	4642      	mov	r2, r8
 8003ebe:	189b      	adds	r3, r3, r2
 8003ec0:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8003ec4:	464b      	mov	r3, r9
 8003ec6:	460a      	mov	r2, r1
 8003ec8:	eb42 0303 	adc.w	r3, r2, r3
 8003ecc:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8003ed0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003ed4:	685b      	ldr	r3, [r3, #4]
 8003ed6:	2200      	movs	r2, #0
 8003ed8:	67bb      	str	r3, [r7, #120]	@ 0x78
 8003eda:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8003edc:	f04f 0200 	mov.w	r2, #0
 8003ee0:	f04f 0300 	mov.w	r3, #0
 8003ee4:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8003ee8:	4649      	mov	r1, r9
 8003eea:	008b      	lsls	r3, r1, #2
 8003eec:	4641      	mov	r1, r8
 8003eee:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003ef2:	4641      	mov	r1, r8
 8003ef4:	008a      	lsls	r2, r1, #2
 8003ef6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8003efa:	f7fc f9c1 	bl	8000280 <__aeabi_uldivmod>
 8003efe:	4602      	mov	r2, r0
 8003f00:	460b      	mov	r3, r1
 8003f02:	4611      	mov	r1, r2
 8003f04:	4b38      	ldr	r3, [pc, #224]	@ (8003fe8 <UART_SetConfig+0x4e4>)
 8003f06:	fba3 2301 	umull	r2, r3, r3, r1
 8003f0a:	095b      	lsrs	r3, r3, #5
 8003f0c:	2264      	movs	r2, #100	@ 0x64
 8003f0e:	fb02 f303 	mul.w	r3, r2, r3
 8003f12:	1acb      	subs	r3, r1, r3
 8003f14:	011b      	lsls	r3, r3, #4
 8003f16:	3332      	adds	r3, #50	@ 0x32
 8003f18:	4a33      	ldr	r2, [pc, #204]	@ (8003fe8 <UART_SetConfig+0x4e4>)
 8003f1a:	fba2 2303 	umull	r2, r3, r2, r3
 8003f1e:	095b      	lsrs	r3, r3, #5
 8003f20:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003f24:	441c      	add	r4, r3
 8003f26:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003f2a:	2200      	movs	r2, #0
 8003f2c:	673b      	str	r3, [r7, #112]	@ 0x70
 8003f2e:	677a      	str	r2, [r7, #116]	@ 0x74
 8003f30:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8003f34:	4642      	mov	r2, r8
 8003f36:	464b      	mov	r3, r9
 8003f38:	1891      	adds	r1, r2, r2
 8003f3a:	60b9      	str	r1, [r7, #8]
 8003f3c:	415b      	adcs	r3, r3
 8003f3e:	60fb      	str	r3, [r7, #12]
 8003f40:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003f44:	4641      	mov	r1, r8
 8003f46:	1851      	adds	r1, r2, r1
 8003f48:	6039      	str	r1, [r7, #0]
 8003f4a:	4649      	mov	r1, r9
 8003f4c:	414b      	adcs	r3, r1
 8003f4e:	607b      	str	r3, [r7, #4]
 8003f50:	f04f 0200 	mov.w	r2, #0
 8003f54:	f04f 0300 	mov.w	r3, #0
 8003f58:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003f5c:	4659      	mov	r1, fp
 8003f5e:	00cb      	lsls	r3, r1, #3
 8003f60:	4651      	mov	r1, sl
 8003f62:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003f66:	4651      	mov	r1, sl
 8003f68:	00ca      	lsls	r2, r1, #3
 8003f6a:	4610      	mov	r0, r2
 8003f6c:	4619      	mov	r1, r3
 8003f6e:	4603      	mov	r3, r0
 8003f70:	4642      	mov	r2, r8
 8003f72:	189b      	adds	r3, r3, r2
 8003f74:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003f76:	464b      	mov	r3, r9
 8003f78:	460a      	mov	r2, r1
 8003f7a:	eb42 0303 	adc.w	r3, r2, r3
 8003f7e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8003f80:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003f84:	685b      	ldr	r3, [r3, #4]
 8003f86:	2200      	movs	r2, #0
 8003f88:	663b      	str	r3, [r7, #96]	@ 0x60
 8003f8a:	667a      	str	r2, [r7, #100]	@ 0x64
 8003f8c:	f04f 0200 	mov.w	r2, #0
 8003f90:	f04f 0300 	mov.w	r3, #0
 8003f94:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8003f98:	4649      	mov	r1, r9
 8003f9a:	008b      	lsls	r3, r1, #2
 8003f9c:	4641      	mov	r1, r8
 8003f9e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003fa2:	4641      	mov	r1, r8
 8003fa4:	008a      	lsls	r2, r1, #2
 8003fa6:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8003faa:	f7fc f969 	bl	8000280 <__aeabi_uldivmod>
 8003fae:	4602      	mov	r2, r0
 8003fb0:	460b      	mov	r3, r1
 8003fb2:	4b0d      	ldr	r3, [pc, #52]	@ (8003fe8 <UART_SetConfig+0x4e4>)
 8003fb4:	fba3 1302 	umull	r1, r3, r3, r2
 8003fb8:	095b      	lsrs	r3, r3, #5
 8003fba:	2164      	movs	r1, #100	@ 0x64
 8003fbc:	fb01 f303 	mul.w	r3, r1, r3
 8003fc0:	1ad3      	subs	r3, r2, r3
 8003fc2:	011b      	lsls	r3, r3, #4
 8003fc4:	3332      	adds	r3, #50	@ 0x32
 8003fc6:	4a08      	ldr	r2, [pc, #32]	@ (8003fe8 <UART_SetConfig+0x4e4>)
 8003fc8:	fba2 2303 	umull	r2, r3, r2, r3
 8003fcc:	095b      	lsrs	r3, r3, #5
 8003fce:	f003 020f 	and.w	r2, r3, #15
 8003fd2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	4422      	add	r2, r4
 8003fda:	609a      	str	r2, [r3, #8]
}
 8003fdc:	bf00      	nop
 8003fde:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8003fe2:	46bd      	mov	sp, r7
 8003fe4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003fe8:	51eb851f 	.word	0x51eb851f

08003fec <siprintf>:
 8003fec:	b40e      	push	{r1, r2, r3}
 8003fee:	b510      	push	{r4, lr}
 8003ff0:	b09d      	sub	sp, #116	@ 0x74
 8003ff2:	ab1f      	add	r3, sp, #124	@ 0x7c
 8003ff4:	9002      	str	r0, [sp, #8]
 8003ff6:	9006      	str	r0, [sp, #24]
 8003ff8:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8003ffc:	480a      	ldr	r0, [pc, #40]	@ (8004028 <siprintf+0x3c>)
 8003ffe:	9107      	str	r1, [sp, #28]
 8004000:	9104      	str	r1, [sp, #16]
 8004002:	490a      	ldr	r1, [pc, #40]	@ (800402c <siprintf+0x40>)
 8004004:	f853 2b04 	ldr.w	r2, [r3], #4
 8004008:	9105      	str	r1, [sp, #20]
 800400a:	2400      	movs	r4, #0
 800400c:	a902      	add	r1, sp, #8
 800400e:	6800      	ldr	r0, [r0, #0]
 8004010:	9301      	str	r3, [sp, #4]
 8004012:	941b      	str	r4, [sp, #108]	@ 0x6c
 8004014:	f000 f994 	bl	8004340 <_svfiprintf_r>
 8004018:	9b02      	ldr	r3, [sp, #8]
 800401a:	701c      	strb	r4, [r3, #0]
 800401c:	b01d      	add	sp, #116	@ 0x74
 800401e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004022:	b003      	add	sp, #12
 8004024:	4770      	bx	lr
 8004026:	bf00      	nop
 8004028:	2000000c 	.word	0x2000000c
 800402c:	ffff0208 	.word	0xffff0208

08004030 <memset>:
 8004030:	4402      	add	r2, r0
 8004032:	4603      	mov	r3, r0
 8004034:	4293      	cmp	r3, r2
 8004036:	d100      	bne.n	800403a <memset+0xa>
 8004038:	4770      	bx	lr
 800403a:	f803 1b01 	strb.w	r1, [r3], #1
 800403e:	e7f9      	b.n	8004034 <memset+0x4>

08004040 <__errno>:
 8004040:	4b01      	ldr	r3, [pc, #4]	@ (8004048 <__errno+0x8>)
 8004042:	6818      	ldr	r0, [r3, #0]
 8004044:	4770      	bx	lr
 8004046:	bf00      	nop
 8004048:	2000000c 	.word	0x2000000c

0800404c <__libc_init_array>:
 800404c:	b570      	push	{r4, r5, r6, lr}
 800404e:	4d0d      	ldr	r5, [pc, #52]	@ (8004084 <__libc_init_array+0x38>)
 8004050:	4c0d      	ldr	r4, [pc, #52]	@ (8004088 <__libc_init_array+0x3c>)
 8004052:	1b64      	subs	r4, r4, r5
 8004054:	10a4      	asrs	r4, r4, #2
 8004056:	2600      	movs	r6, #0
 8004058:	42a6      	cmp	r6, r4
 800405a:	d109      	bne.n	8004070 <__libc_init_array+0x24>
 800405c:	4d0b      	ldr	r5, [pc, #44]	@ (800408c <__libc_init_array+0x40>)
 800405e:	4c0c      	ldr	r4, [pc, #48]	@ (8004090 <__libc_init_array+0x44>)
 8004060:	f000 fc64 	bl	800492c <_init>
 8004064:	1b64      	subs	r4, r4, r5
 8004066:	10a4      	asrs	r4, r4, #2
 8004068:	2600      	movs	r6, #0
 800406a:	42a6      	cmp	r6, r4
 800406c:	d105      	bne.n	800407a <__libc_init_array+0x2e>
 800406e:	bd70      	pop	{r4, r5, r6, pc}
 8004070:	f855 3b04 	ldr.w	r3, [r5], #4
 8004074:	4798      	blx	r3
 8004076:	3601      	adds	r6, #1
 8004078:	e7ee      	b.n	8004058 <__libc_init_array+0xc>
 800407a:	f855 3b04 	ldr.w	r3, [r5], #4
 800407e:	4798      	blx	r3
 8004080:	3601      	adds	r6, #1
 8004082:	e7f2      	b.n	800406a <__libc_init_array+0x1e>
 8004084:	080049b0 	.word	0x080049b0
 8004088:	080049b0 	.word	0x080049b0
 800408c:	080049b0 	.word	0x080049b0
 8004090:	080049b4 	.word	0x080049b4

08004094 <__retarget_lock_acquire_recursive>:
 8004094:	4770      	bx	lr

08004096 <__retarget_lock_release_recursive>:
 8004096:	4770      	bx	lr

08004098 <_free_r>:
 8004098:	b538      	push	{r3, r4, r5, lr}
 800409a:	4605      	mov	r5, r0
 800409c:	2900      	cmp	r1, #0
 800409e:	d041      	beq.n	8004124 <_free_r+0x8c>
 80040a0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80040a4:	1f0c      	subs	r4, r1, #4
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	bfb8      	it	lt
 80040aa:	18e4      	addlt	r4, r4, r3
 80040ac:	f000 f8e0 	bl	8004270 <__malloc_lock>
 80040b0:	4a1d      	ldr	r2, [pc, #116]	@ (8004128 <_free_r+0x90>)
 80040b2:	6813      	ldr	r3, [r2, #0]
 80040b4:	b933      	cbnz	r3, 80040c4 <_free_r+0x2c>
 80040b6:	6063      	str	r3, [r4, #4]
 80040b8:	6014      	str	r4, [r2, #0]
 80040ba:	4628      	mov	r0, r5
 80040bc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80040c0:	f000 b8dc 	b.w	800427c <__malloc_unlock>
 80040c4:	42a3      	cmp	r3, r4
 80040c6:	d908      	bls.n	80040da <_free_r+0x42>
 80040c8:	6820      	ldr	r0, [r4, #0]
 80040ca:	1821      	adds	r1, r4, r0
 80040cc:	428b      	cmp	r3, r1
 80040ce:	bf01      	itttt	eq
 80040d0:	6819      	ldreq	r1, [r3, #0]
 80040d2:	685b      	ldreq	r3, [r3, #4]
 80040d4:	1809      	addeq	r1, r1, r0
 80040d6:	6021      	streq	r1, [r4, #0]
 80040d8:	e7ed      	b.n	80040b6 <_free_r+0x1e>
 80040da:	461a      	mov	r2, r3
 80040dc:	685b      	ldr	r3, [r3, #4]
 80040de:	b10b      	cbz	r3, 80040e4 <_free_r+0x4c>
 80040e0:	42a3      	cmp	r3, r4
 80040e2:	d9fa      	bls.n	80040da <_free_r+0x42>
 80040e4:	6811      	ldr	r1, [r2, #0]
 80040e6:	1850      	adds	r0, r2, r1
 80040e8:	42a0      	cmp	r0, r4
 80040ea:	d10b      	bne.n	8004104 <_free_r+0x6c>
 80040ec:	6820      	ldr	r0, [r4, #0]
 80040ee:	4401      	add	r1, r0
 80040f0:	1850      	adds	r0, r2, r1
 80040f2:	4283      	cmp	r3, r0
 80040f4:	6011      	str	r1, [r2, #0]
 80040f6:	d1e0      	bne.n	80040ba <_free_r+0x22>
 80040f8:	6818      	ldr	r0, [r3, #0]
 80040fa:	685b      	ldr	r3, [r3, #4]
 80040fc:	6053      	str	r3, [r2, #4]
 80040fe:	4408      	add	r0, r1
 8004100:	6010      	str	r0, [r2, #0]
 8004102:	e7da      	b.n	80040ba <_free_r+0x22>
 8004104:	d902      	bls.n	800410c <_free_r+0x74>
 8004106:	230c      	movs	r3, #12
 8004108:	602b      	str	r3, [r5, #0]
 800410a:	e7d6      	b.n	80040ba <_free_r+0x22>
 800410c:	6820      	ldr	r0, [r4, #0]
 800410e:	1821      	adds	r1, r4, r0
 8004110:	428b      	cmp	r3, r1
 8004112:	bf04      	itt	eq
 8004114:	6819      	ldreq	r1, [r3, #0]
 8004116:	685b      	ldreq	r3, [r3, #4]
 8004118:	6063      	str	r3, [r4, #4]
 800411a:	bf04      	itt	eq
 800411c:	1809      	addeq	r1, r1, r0
 800411e:	6021      	streq	r1, [r4, #0]
 8004120:	6054      	str	r4, [r2, #4]
 8004122:	e7ca      	b.n	80040ba <_free_r+0x22>
 8004124:	bd38      	pop	{r3, r4, r5, pc}
 8004126:	bf00      	nop
 8004128:	20000314 	.word	0x20000314

0800412c <sbrk_aligned>:
 800412c:	b570      	push	{r4, r5, r6, lr}
 800412e:	4e0f      	ldr	r6, [pc, #60]	@ (800416c <sbrk_aligned+0x40>)
 8004130:	460c      	mov	r4, r1
 8004132:	6831      	ldr	r1, [r6, #0]
 8004134:	4605      	mov	r5, r0
 8004136:	b911      	cbnz	r1, 800413e <sbrk_aligned+0x12>
 8004138:	f000 fba4 	bl	8004884 <_sbrk_r>
 800413c:	6030      	str	r0, [r6, #0]
 800413e:	4621      	mov	r1, r4
 8004140:	4628      	mov	r0, r5
 8004142:	f000 fb9f 	bl	8004884 <_sbrk_r>
 8004146:	1c43      	adds	r3, r0, #1
 8004148:	d103      	bne.n	8004152 <sbrk_aligned+0x26>
 800414a:	f04f 34ff 	mov.w	r4, #4294967295
 800414e:	4620      	mov	r0, r4
 8004150:	bd70      	pop	{r4, r5, r6, pc}
 8004152:	1cc4      	adds	r4, r0, #3
 8004154:	f024 0403 	bic.w	r4, r4, #3
 8004158:	42a0      	cmp	r0, r4
 800415a:	d0f8      	beq.n	800414e <sbrk_aligned+0x22>
 800415c:	1a21      	subs	r1, r4, r0
 800415e:	4628      	mov	r0, r5
 8004160:	f000 fb90 	bl	8004884 <_sbrk_r>
 8004164:	3001      	adds	r0, #1
 8004166:	d1f2      	bne.n	800414e <sbrk_aligned+0x22>
 8004168:	e7ef      	b.n	800414a <sbrk_aligned+0x1e>
 800416a:	bf00      	nop
 800416c:	20000310 	.word	0x20000310

08004170 <_malloc_r>:
 8004170:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004174:	1ccd      	adds	r5, r1, #3
 8004176:	f025 0503 	bic.w	r5, r5, #3
 800417a:	3508      	adds	r5, #8
 800417c:	2d0c      	cmp	r5, #12
 800417e:	bf38      	it	cc
 8004180:	250c      	movcc	r5, #12
 8004182:	2d00      	cmp	r5, #0
 8004184:	4606      	mov	r6, r0
 8004186:	db01      	blt.n	800418c <_malloc_r+0x1c>
 8004188:	42a9      	cmp	r1, r5
 800418a:	d904      	bls.n	8004196 <_malloc_r+0x26>
 800418c:	230c      	movs	r3, #12
 800418e:	6033      	str	r3, [r6, #0]
 8004190:	2000      	movs	r0, #0
 8004192:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004196:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800426c <_malloc_r+0xfc>
 800419a:	f000 f869 	bl	8004270 <__malloc_lock>
 800419e:	f8d8 3000 	ldr.w	r3, [r8]
 80041a2:	461c      	mov	r4, r3
 80041a4:	bb44      	cbnz	r4, 80041f8 <_malloc_r+0x88>
 80041a6:	4629      	mov	r1, r5
 80041a8:	4630      	mov	r0, r6
 80041aa:	f7ff ffbf 	bl	800412c <sbrk_aligned>
 80041ae:	1c43      	adds	r3, r0, #1
 80041b0:	4604      	mov	r4, r0
 80041b2:	d158      	bne.n	8004266 <_malloc_r+0xf6>
 80041b4:	f8d8 4000 	ldr.w	r4, [r8]
 80041b8:	4627      	mov	r7, r4
 80041ba:	2f00      	cmp	r7, #0
 80041bc:	d143      	bne.n	8004246 <_malloc_r+0xd6>
 80041be:	2c00      	cmp	r4, #0
 80041c0:	d04b      	beq.n	800425a <_malloc_r+0xea>
 80041c2:	6823      	ldr	r3, [r4, #0]
 80041c4:	4639      	mov	r1, r7
 80041c6:	4630      	mov	r0, r6
 80041c8:	eb04 0903 	add.w	r9, r4, r3
 80041cc:	f000 fb5a 	bl	8004884 <_sbrk_r>
 80041d0:	4581      	cmp	r9, r0
 80041d2:	d142      	bne.n	800425a <_malloc_r+0xea>
 80041d4:	6821      	ldr	r1, [r4, #0]
 80041d6:	1a6d      	subs	r5, r5, r1
 80041d8:	4629      	mov	r1, r5
 80041da:	4630      	mov	r0, r6
 80041dc:	f7ff ffa6 	bl	800412c <sbrk_aligned>
 80041e0:	3001      	adds	r0, #1
 80041e2:	d03a      	beq.n	800425a <_malloc_r+0xea>
 80041e4:	6823      	ldr	r3, [r4, #0]
 80041e6:	442b      	add	r3, r5
 80041e8:	6023      	str	r3, [r4, #0]
 80041ea:	f8d8 3000 	ldr.w	r3, [r8]
 80041ee:	685a      	ldr	r2, [r3, #4]
 80041f0:	bb62      	cbnz	r2, 800424c <_malloc_r+0xdc>
 80041f2:	f8c8 7000 	str.w	r7, [r8]
 80041f6:	e00f      	b.n	8004218 <_malloc_r+0xa8>
 80041f8:	6822      	ldr	r2, [r4, #0]
 80041fa:	1b52      	subs	r2, r2, r5
 80041fc:	d420      	bmi.n	8004240 <_malloc_r+0xd0>
 80041fe:	2a0b      	cmp	r2, #11
 8004200:	d917      	bls.n	8004232 <_malloc_r+0xc2>
 8004202:	1961      	adds	r1, r4, r5
 8004204:	42a3      	cmp	r3, r4
 8004206:	6025      	str	r5, [r4, #0]
 8004208:	bf18      	it	ne
 800420a:	6059      	strne	r1, [r3, #4]
 800420c:	6863      	ldr	r3, [r4, #4]
 800420e:	bf08      	it	eq
 8004210:	f8c8 1000 	streq.w	r1, [r8]
 8004214:	5162      	str	r2, [r4, r5]
 8004216:	604b      	str	r3, [r1, #4]
 8004218:	4630      	mov	r0, r6
 800421a:	f000 f82f 	bl	800427c <__malloc_unlock>
 800421e:	f104 000b 	add.w	r0, r4, #11
 8004222:	1d23      	adds	r3, r4, #4
 8004224:	f020 0007 	bic.w	r0, r0, #7
 8004228:	1ac2      	subs	r2, r0, r3
 800422a:	bf1c      	itt	ne
 800422c:	1a1b      	subne	r3, r3, r0
 800422e:	50a3      	strne	r3, [r4, r2]
 8004230:	e7af      	b.n	8004192 <_malloc_r+0x22>
 8004232:	6862      	ldr	r2, [r4, #4]
 8004234:	42a3      	cmp	r3, r4
 8004236:	bf0c      	ite	eq
 8004238:	f8c8 2000 	streq.w	r2, [r8]
 800423c:	605a      	strne	r2, [r3, #4]
 800423e:	e7eb      	b.n	8004218 <_malloc_r+0xa8>
 8004240:	4623      	mov	r3, r4
 8004242:	6864      	ldr	r4, [r4, #4]
 8004244:	e7ae      	b.n	80041a4 <_malloc_r+0x34>
 8004246:	463c      	mov	r4, r7
 8004248:	687f      	ldr	r7, [r7, #4]
 800424a:	e7b6      	b.n	80041ba <_malloc_r+0x4a>
 800424c:	461a      	mov	r2, r3
 800424e:	685b      	ldr	r3, [r3, #4]
 8004250:	42a3      	cmp	r3, r4
 8004252:	d1fb      	bne.n	800424c <_malloc_r+0xdc>
 8004254:	2300      	movs	r3, #0
 8004256:	6053      	str	r3, [r2, #4]
 8004258:	e7de      	b.n	8004218 <_malloc_r+0xa8>
 800425a:	230c      	movs	r3, #12
 800425c:	6033      	str	r3, [r6, #0]
 800425e:	4630      	mov	r0, r6
 8004260:	f000 f80c 	bl	800427c <__malloc_unlock>
 8004264:	e794      	b.n	8004190 <_malloc_r+0x20>
 8004266:	6005      	str	r5, [r0, #0]
 8004268:	e7d6      	b.n	8004218 <_malloc_r+0xa8>
 800426a:	bf00      	nop
 800426c:	20000314 	.word	0x20000314

08004270 <__malloc_lock>:
 8004270:	4801      	ldr	r0, [pc, #4]	@ (8004278 <__malloc_lock+0x8>)
 8004272:	f7ff bf0f 	b.w	8004094 <__retarget_lock_acquire_recursive>
 8004276:	bf00      	nop
 8004278:	2000030c 	.word	0x2000030c

0800427c <__malloc_unlock>:
 800427c:	4801      	ldr	r0, [pc, #4]	@ (8004284 <__malloc_unlock+0x8>)
 800427e:	f7ff bf0a 	b.w	8004096 <__retarget_lock_release_recursive>
 8004282:	bf00      	nop
 8004284:	2000030c 	.word	0x2000030c

08004288 <__ssputs_r>:
 8004288:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800428c:	688e      	ldr	r6, [r1, #8]
 800428e:	461f      	mov	r7, r3
 8004290:	42be      	cmp	r6, r7
 8004292:	680b      	ldr	r3, [r1, #0]
 8004294:	4682      	mov	sl, r0
 8004296:	460c      	mov	r4, r1
 8004298:	4690      	mov	r8, r2
 800429a:	d82d      	bhi.n	80042f8 <__ssputs_r+0x70>
 800429c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80042a0:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80042a4:	d026      	beq.n	80042f4 <__ssputs_r+0x6c>
 80042a6:	6965      	ldr	r5, [r4, #20]
 80042a8:	6909      	ldr	r1, [r1, #16]
 80042aa:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80042ae:	eba3 0901 	sub.w	r9, r3, r1
 80042b2:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80042b6:	1c7b      	adds	r3, r7, #1
 80042b8:	444b      	add	r3, r9
 80042ba:	106d      	asrs	r5, r5, #1
 80042bc:	429d      	cmp	r5, r3
 80042be:	bf38      	it	cc
 80042c0:	461d      	movcc	r5, r3
 80042c2:	0553      	lsls	r3, r2, #21
 80042c4:	d527      	bpl.n	8004316 <__ssputs_r+0x8e>
 80042c6:	4629      	mov	r1, r5
 80042c8:	f7ff ff52 	bl	8004170 <_malloc_r>
 80042cc:	4606      	mov	r6, r0
 80042ce:	b360      	cbz	r0, 800432a <__ssputs_r+0xa2>
 80042d0:	6921      	ldr	r1, [r4, #16]
 80042d2:	464a      	mov	r2, r9
 80042d4:	f000 fae6 	bl	80048a4 <memcpy>
 80042d8:	89a3      	ldrh	r3, [r4, #12]
 80042da:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80042de:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80042e2:	81a3      	strh	r3, [r4, #12]
 80042e4:	6126      	str	r6, [r4, #16]
 80042e6:	6165      	str	r5, [r4, #20]
 80042e8:	444e      	add	r6, r9
 80042ea:	eba5 0509 	sub.w	r5, r5, r9
 80042ee:	6026      	str	r6, [r4, #0]
 80042f0:	60a5      	str	r5, [r4, #8]
 80042f2:	463e      	mov	r6, r7
 80042f4:	42be      	cmp	r6, r7
 80042f6:	d900      	bls.n	80042fa <__ssputs_r+0x72>
 80042f8:	463e      	mov	r6, r7
 80042fa:	6820      	ldr	r0, [r4, #0]
 80042fc:	4632      	mov	r2, r6
 80042fe:	4641      	mov	r1, r8
 8004300:	f000 faa6 	bl	8004850 <memmove>
 8004304:	68a3      	ldr	r3, [r4, #8]
 8004306:	1b9b      	subs	r3, r3, r6
 8004308:	60a3      	str	r3, [r4, #8]
 800430a:	6823      	ldr	r3, [r4, #0]
 800430c:	4433      	add	r3, r6
 800430e:	6023      	str	r3, [r4, #0]
 8004310:	2000      	movs	r0, #0
 8004312:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004316:	462a      	mov	r2, r5
 8004318:	f000 fad2 	bl	80048c0 <_realloc_r>
 800431c:	4606      	mov	r6, r0
 800431e:	2800      	cmp	r0, #0
 8004320:	d1e0      	bne.n	80042e4 <__ssputs_r+0x5c>
 8004322:	6921      	ldr	r1, [r4, #16]
 8004324:	4650      	mov	r0, sl
 8004326:	f7ff feb7 	bl	8004098 <_free_r>
 800432a:	230c      	movs	r3, #12
 800432c:	f8ca 3000 	str.w	r3, [sl]
 8004330:	89a3      	ldrh	r3, [r4, #12]
 8004332:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004336:	81a3      	strh	r3, [r4, #12]
 8004338:	f04f 30ff 	mov.w	r0, #4294967295
 800433c:	e7e9      	b.n	8004312 <__ssputs_r+0x8a>
	...

08004340 <_svfiprintf_r>:
 8004340:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004344:	4698      	mov	r8, r3
 8004346:	898b      	ldrh	r3, [r1, #12]
 8004348:	061b      	lsls	r3, r3, #24
 800434a:	b09d      	sub	sp, #116	@ 0x74
 800434c:	4607      	mov	r7, r0
 800434e:	460d      	mov	r5, r1
 8004350:	4614      	mov	r4, r2
 8004352:	d510      	bpl.n	8004376 <_svfiprintf_r+0x36>
 8004354:	690b      	ldr	r3, [r1, #16]
 8004356:	b973      	cbnz	r3, 8004376 <_svfiprintf_r+0x36>
 8004358:	2140      	movs	r1, #64	@ 0x40
 800435a:	f7ff ff09 	bl	8004170 <_malloc_r>
 800435e:	6028      	str	r0, [r5, #0]
 8004360:	6128      	str	r0, [r5, #16]
 8004362:	b930      	cbnz	r0, 8004372 <_svfiprintf_r+0x32>
 8004364:	230c      	movs	r3, #12
 8004366:	603b      	str	r3, [r7, #0]
 8004368:	f04f 30ff 	mov.w	r0, #4294967295
 800436c:	b01d      	add	sp, #116	@ 0x74
 800436e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004372:	2340      	movs	r3, #64	@ 0x40
 8004374:	616b      	str	r3, [r5, #20]
 8004376:	2300      	movs	r3, #0
 8004378:	9309      	str	r3, [sp, #36]	@ 0x24
 800437a:	2320      	movs	r3, #32
 800437c:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8004380:	f8cd 800c 	str.w	r8, [sp, #12]
 8004384:	2330      	movs	r3, #48	@ 0x30
 8004386:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8004524 <_svfiprintf_r+0x1e4>
 800438a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800438e:	f04f 0901 	mov.w	r9, #1
 8004392:	4623      	mov	r3, r4
 8004394:	469a      	mov	sl, r3
 8004396:	f813 2b01 	ldrb.w	r2, [r3], #1
 800439a:	b10a      	cbz	r2, 80043a0 <_svfiprintf_r+0x60>
 800439c:	2a25      	cmp	r2, #37	@ 0x25
 800439e:	d1f9      	bne.n	8004394 <_svfiprintf_r+0x54>
 80043a0:	ebba 0b04 	subs.w	fp, sl, r4
 80043a4:	d00b      	beq.n	80043be <_svfiprintf_r+0x7e>
 80043a6:	465b      	mov	r3, fp
 80043a8:	4622      	mov	r2, r4
 80043aa:	4629      	mov	r1, r5
 80043ac:	4638      	mov	r0, r7
 80043ae:	f7ff ff6b 	bl	8004288 <__ssputs_r>
 80043b2:	3001      	adds	r0, #1
 80043b4:	f000 80a7 	beq.w	8004506 <_svfiprintf_r+0x1c6>
 80043b8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80043ba:	445a      	add	r2, fp
 80043bc:	9209      	str	r2, [sp, #36]	@ 0x24
 80043be:	f89a 3000 	ldrb.w	r3, [sl]
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	f000 809f 	beq.w	8004506 <_svfiprintf_r+0x1c6>
 80043c8:	2300      	movs	r3, #0
 80043ca:	f04f 32ff 	mov.w	r2, #4294967295
 80043ce:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80043d2:	f10a 0a01 	add.w	sl, sl, #1
 80043d6:	9304      	str	r3, [sp, #16]
 80043d8:	9307      	str	r3, [sp, #28]
 80043da:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80043de:	931a      	str	r3, [sp, #104]	@ 0x68
 80043e0:	4654      	mov	r4, sl
 80043e2:	2205      	movs	r2, #5
 80043e4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80043e8:	484e      	ldr	r0, [pc, #312]	@ (8004524 <_svfiprintf_r+0x1e4>)
 80043ea:	f7fb fef9 	bl	80001e0 <memchr>
 80043ee:	9a04      	ldr	r2, [sp, #16]
 80043f0:	b9d8      	cbnz	r0, 800442a <_svfiprintf_r+0xea>
 80043f2:	06d0      	lsls	r0, r2, #27
 80043f4:	bf44      	itt	mi
 80043f6:	2320      	movmi	r3, #32
 80043f8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80043fc:	0711      	lsls	r1, r2, #28
 80043fe:	bf44      	itt	mi
 8004400:	232b      	movmi	r3, #43	@ 0x2b
 8004402:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004406:	f89a 3000 	ldrb.w	r3, [sl]
 800440a:	2b2a      	cmp	r3, #42	@ 0x2a
 800440c:	d015      	beq.n	800443a <_svfiprintf_r+0xfa>
 800440e:	9a07      	ldr	r2, [sp, #28]
 8004410:	4654      	mov	r4, sl
 8004412:	2000      	movs	r0, #0
 8004414:	f04f 0c0a 	mov.w	ip, #10
 8004418:	4621      	mov	r1, r4
 800441a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800441e:	3b30      	subs	r3, #48	@ 0x30
 8004420:	2b09      	cmp	r3, #9
 8004422:	d94b      	bls.n	80044bc <_svfiprintf_r+0x17c>
 8004424:	b1b0      	cbz	r0, 8004454 <_svfiprintf_r+0x114>
 8004426:	9207      	str	r2, [sp, #28]
 8004428:	e014      	b.n	8004454 <_svfiprintf_r+0x114>
 800442a:	eba0 0308 	sub.w	r3, r0, r8
 800442e:	fa09 f303 	lsl.w	r3, r9, r3
 8004432:	4313      	orrs	r3, r2
 8004434:	9304      	str	r3, [sp, #16]
 8004436:	46a2      	mov	sl, r4
 8004438:	e7d2      	b.n	80043e0 <_svfiprintf_r+0xa0>
 800443a:	9b03      	ldr	r3, [sp, #12]
 800443c:	1d19      	adds	r1, r3, #4
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	9103      	str	r1, [sp, #12]
 8004442:	2b00      	cmp	r3, #0
 8004444:	bfbb      	ittet	lt
 8004446:	425b      	neglt	r3, r3
 8004448:	f042 0202 	orrlt.w	r2, r2, #2
 800444c:	9307      	strge	r3, [sp, #28]
 800444e:	9307      	strlt	r3, [sp, #28]
 8004450:	bfb8      	it	lt
 8004452:	9204      	strlt	r2, [sp, #16]
 8004454:	7823      	ldrb	r3, [r4, #0]
 8004456:	2b2e      	cmp	r3, #46	@ 0x2e
 8004458:	d10a      	bne.n	8004470 <_svfiprintf_r+0x130>
 800445a:	7863      	ldrb	r3, [r4, #1]
 800445c:	2b2a      	cmp	r3, #42	@ 0x2a
 800445e:	d132      	bne.n	80044c6 <_svfiprintf_r+0x186>
 8004460:	9b03      	ldr	r3, [sp, #12]
 8004462:	1d1a      	adds	r2, r3, #4
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	9203      	str	r2, [sp, #12]
 8004468:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800446c:	3402      	adds	r4, #2
 800446e:	9305      	str	r3, [sp, #20]
 8004470:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8004534 <_svfiprintf_r+0x1f4>
 8004474:	7821      	ldrb	r1, [r4, #0]
 8004476:	2203      	movs	r2, #3
 8004478:	4650      	mov	r0, sl
 800447a:	f7fb feb1 	bl	80001e0 <memchr>
 800447e:	b138      	cbz	r0, 8004490 <_svfiprintf_r+0x150>
 8004480:	9b04      	ldr	r3, [sp, #16]
 8004482:	eba0 000a 	sub.w	r0, r0, sl
 8004486:	2240      	movs	r2, #64	@ 0x40
 8004488:	4082      	lsls	r2, r0
 800448a:	4313      	orrs	r3, r2
 800448c:	3401      	adds	r4, #1
 800448e:	9304      	str	r3, [sp, #16]
 8004490:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004494:	4824      	ldr	r0, [pc, #144]	@ (8004528 <_svfiprintf_r+0x1e8>)
 8004496:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800449a:	2206      	movs	r2, #6
 800449c:	f7fb fea0 	bl	80001e0 <memchr>
 80044a0:	2800      	cmp	r0, #0
 80044a2:	d036      	beq.n	8004512 <_svfiprintf_r+0x1d2>
 80044a4:	4b21      	ldr	r3, [pc, #132]	@ (800452c <_svfiprintf_r+0x1ec>)
 80044a6:	bb1b      	cbnz	r3, 80044f0 <_svfiprintf_r+0x1b0>
 80044a8:	9b03      	ldr	r3, [sp, #12]
 80044aa:	3307      	adds	r3, #7
 80044ac:	f023 0307 	bic.w	r3, r3, #7
 80044b0:	3308      	adds	r3, #8
 80044b2:	9303      	str	r3, [sp, #12]
 80044b4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80044b6:	4433      	add	r3, r6
 80044b8:	9309      	str	r3, [sp, #36]	@ 0x24
 80044ba:	e76a      	b.n	8004392 <_svfiprintf_r+0x52>
 80044bc:	fb0c 3202 	mla	r2, ip, r2, r3
 80044c0:	460c      	mov	r4, r1
 80044c2:	2001      	movs	r0, #1
 80044c4:	e7a8      	b.n	8004418 <_svfiprintf_r+0xd8>
 80044c6:	2300      	movs	r3, #0
 80044c8:	3401      	adds	r4, #1
 80044ca:	9305      	str	r3, [sp, #20]
 80044cc:	4619      	mov	r1, r3
 80044ce:	f04f 0c0a 	mov.w	ip, #10
 80044d2:	4620      	mov	r0, r4
 80044d4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80044d8:	3a30      	subs	r2, #48	@ 0x30
 80044da:	2a09      	cmp	r2, #9
 80044dc:	d903      	bls.n	80044e6 <_svfiprintf_r+0x1a6>
 80044de:	2b00      	cmp	r3, #0
 80044e0:	d0c6      	beq.n	8004470 <_svfiprintf_r+0x130>
 80044e2:	9105      	str	r1, [sp, #20]
 80044e4:	e7c4      	b.n	8004470 <_svfiprintf_r+0x130>
 80044e6:	fb0c 2101 	mla	r1, ip, r1, r2
 80044ea:	4604      	mov	r4, r0
 80044ec:	2301      	movs	r3, #1
 80044ee:	e7f0      	b.n	80044d2 <_svfiprintf_r+0x192>
 80044f0:	ab03      	add	r3, sp, #12
 80044f2:	9300      	str	r3, [sp, #0]
 80044f4:	462a      	mov	r2, r5
 80044f6:	4b0e      	ldr	r3, [pc, #56]	@ (8004530 <_svfiprintf_r+0x1f0>)
 80044f8:	a904      	add	r1, sp, #16
 80044fa:	4638      	mov	r0, r7
 80044fc:	f3af 8000 	nop.w
 8004500:	1c42      	adds	r2, r0, #1
 8004502:	4606      	mov	r6, r0
 8004504:	d1d6      	bne.n	80044b4 <_svfiprintf_r+0x174>
 8004506:	89ab      	ldrh	r3, [r5, #12]
 8004508:	065b      	lsls	r3, r3, #25
 800450a:	f53f af2d 	bmi.w	8004368 <_svfiprintf_r+0x28>
 800450e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8004510:	e72c      	b.n	800436c <_svfiprintf_r+0x2c>
 8004512:	ab03      	add	r3, sp, #12
 8004514:	9300      	str	r3, [sp, #0]
 8004516:	462a      	mov	r2, r5
 8004518:	4b05      	ldr	r3, [pc, #20]	@ (8004530 <_svfiprintf_r+0x1f0>)
 800451a:	a904      	add	r1, sp, #16
 800451c:	4638      	mov	r0, r7
 800451e:	f000 f879 	bl	8004614 <_printf_i>
 8004522:	e7ed      	b.n	8004500 <_svfiprintf_r+0x1c0>
 8004524:	08004974 	.word	0x08004974
 8004528:	0800497e 	.word	0x0800497e
 800452c:	00000000 	.word	0x00000000
 8004530:	08004289 	.word	0x08004289
 8004534:	0800497a 	.word	0x0800497a

08004538 <_printf_common>:
 8004538:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800453c:	4616      	mov	r6, r2
 800453e:	4698      	mov	r8, r3
 8004540:	688a      	ldr	r2, [r1, #8]
 8004542:	690b      	ldr	r3, [r1, #16]
 8004544:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8004548:	4293      	cmp	r3, r2
 800454a:	bfb8      	it	lt
 800454c:	4613      	movlt	r3, r2
 800454e:	6033      	str	r3, [r6, #0]
 8004550:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8004554:	4607      	mov	r7, r0
 8004556:	460c      	mov	r4, r1
 8004558:	b10a      	cbz	r2, 800455e <_printf_common+0x26>
 800455a:	3301      	adds	r3, #1
 800455c:	6033      	str	r3, [r6, #0]
 800455e:	6823      	ldr	r3, [r4, #0]
 8004560:	0699      	lsls	r1, r3, #26
 8004562:	bf42      	ittt	mi
 8004564:	6833      	ldrmi	r3, [r6, #0]
 8004566:	3302      	addmi	r3, #2
 8004568:	6033      	strmi	r3, [r6, #0]
 800456a:	6825      	ldr	r5, [r4, #0]
 800456c:	f015 0506 	ands.w	r5, r5, #6
 8004570:	d106      	bne.n	8004580 <_printf_common+0x48>
 8004572:	f104 0a19 	add.w	sl, r4, #25
 8004576:	68e3      	ldr	r3, [r4, #12]
 8004578:	6832      	ldr	r2, [r6, #0]
 800457a:	1a9b      	subs	r3, r3, r2
 800457c:	42ab      	cmp	r3, r5
 800457e:	dc26      	bgt.n	80045ce <_printf_common+0x96>
 8004580:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8004584:	6822      	ldr	r2, [r4, #0]
 8004586:	3b00      	subs	r3, #0
 8004588:	bf18      	it	ne
 800458a:	2301      	movne	r3, #1
 800458c:	0692      	lsls	r2, r2, #26
 800458e:	d42b      	bmi.n	80045e8 <_printf_common+0xb0>
 8004590:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8004594:	4641      	mov	r1, r8
 8004596:	4638      	mov	r0, r7
 8004598:	47c8      	blx	r9
 800459a:	3001      	adds	r0, #1
 800459c:	d01e      	beq.n	80045dc <_printf_common+0xa4>
 800459e:	6823      	ldr	r3, [r4, #0]
 80045a0:	6922      	ldr	r2, [r4, #16]
 80045a2:	f003 0306 	and.w	r3, r3, #6
 80045a6:	2b04      	cmp	r3, #4
 80045a8:	bf02      	ittt	eq
 80045aa:	68e5      	ldreq	r5, [r4, #12]
 80045ac:	6833      	ldreq	r3, [r6, #0]
 80045ae:	1aed      	subeq	r5, r5, r3
 80045b0:	68a3      	ldr	r3, [r4, #8]
 80045b2:	bf0c      	ite	eq
 80045b4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80045b8:	2500      	movne	r5, #0
 80045ba:	4293      	cmp	r3, r2
 80045bc:	bfc4      	itt	gt
 80045be:	1a9b      	subgt	r3, r3, r2
 80045c0:	18ed      	addgt	r5, r5, r3
 80045c2:	2600      	movs	r6, #0
 80045c4:	341a      	adds	r4, #26
 80045c6:	42b5      	cmp	r5, r6
 80045c8:	d11a      	bne.n	8004600 <_printf_common+0xc8>
 80045ca:	2000      	movs	r0, #0
 80045cc:	e008      	b.n	80045e0 <_printf_common+0xa8>
 80045ce:	2301      	movs	r3, #1
 80045d0:	4652      	mov	r2, sl
 80045d2:	4641      	mov	r1, r8
 80045d4:	4638      	mov	r0, r7
 80045d6:	47c8      	blx	r9
 80045d8:	3001      	adds	r0, #1
 80045da:	d103      	bne.n	80045e4 <_printf_common+0xac>
 80045dc:	f04f 30ff 	mov.w	r0, #4294967295
 80045e0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80045e4:	3501      	adds	r5, #1
 80045e6:	e7c6      	b.n	8004576 <_printf_common+0x3e>
 80045e8:	18e1      	adds	r1, r4, r3
 80045ea:	1c5a      	adds	r2, r3, #1
 80045ec:	2030      	movs	r0, #48	@ 0x30
 80045ee:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80045f2:	4422      	add	r2, r4
 80045f4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80045f8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80045fc:	3302      	adds	r3, #2
 80045fe:	e7c7      	b.n	8004590 <_printf_common+0x58>
 8004600:	2301      	movs	r3, #1
 8004602:	4622      	mov	r2, r4
 8004604:	4641      	mov	r1, r8
 8004606:	4638      	mov	r0, r7
 8004608:	47c8      	blx	r9
 800460a:	3001      	adds	r0, #1
 800460c:	d0e6      	beq.n	80045dc <_printf_common+0xa4>
 800460e:	3601      	adds	r6, #1
 8004610:	e7d9      	b.n	80045c6 <_printf_common+0x8e>
	...

08004614 <_printf_i>:
 8004614:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004618:	7e0f      	ldrb	r7, [r1, #24]
 800461a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800461c:	2f78      	cmp	r7, #120	@ 0x78
 800461e:	4691      	mov	r9, r2
 8004620:	4680      	mov	r8, r0
 8004622:	460c      	mov	r4, r1
 8004624:	469a      	mov	sl, r3
 8004626:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800462a:	d807      	bhi.n	800463c <_printf_i+0x28>
 800462c:	2f62      	cmp	r7, #98	@ 0x62
 800462e:	d80a      	bhi.n	8004646 <_printf_i+0x32>
 8004630:	2f00      	cmp	r7, #0
 8004632:	f000 80d1 	beq.w	80047d8 <_printf_i+0x1c4>
 8004636:	2f58      	cmp	r7, #88	@ 0x58
 8004638:	f000 80b8 	beq.w	80047ac <_printf_i+0x198>
 800463c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004640:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8004644:	e03a      	b.n	80046bc <_printf_i+0xa8>
 8004646:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800464a:	2b15      	cmp	r3, #21
 800464c:	d8f6      	bhi.n	800463c <_printf_i+0x28>
 800464e:	a101      	add	r1, pc, #4	@ (adr r1, 8004654 <_printf_i+0x40>)
 8004650:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004654:	080046ad 	.word	0x080046ad
 8004658:	080046c1 	.word	0x080046c1
 800465c:	0800463d 	.word	0x0800463d
 8004660:	0800463d 	.word	0x0800463d
 8004664:	0800463d 	.word	0x0800463d
 8004668:	0800463d 	.word	0x0800463d
 800466c:	080046c1 	.word	0x080046c1
 8004670:	0800463d 	.word	0x0800463d
 8004674:	0800463d 	.word	0x0800463d
 8004678:	0800463d 	.word	0x0800463d
 800467c:	0800463d 	.word	0x0800463d
 8004680:	080047bf 	.word	0x080047bf
 8004684:	080046eb 	.word	0x080046eb
 8004688:	08004779 	.word	0x08004779
 800468c:	0800463d 	.word	0x0800463d
 8004690:	0800463d 	.word	0x0800463d
 8004694:	080047e1 	.word	0x080047e1
 8004698:	0800463d 	.word	0x0800463d
 800469c:	080046eb 	.word	0x080046eb
 80046a0:	0800463d 	.word	0x0800463d
 80046a4:	0800463d 	.word	0x0800463d
 80046a8:	08004781 	.word	0x08004781
 80046ac:	6833      	ldr	r3, [r6, #0]
 80046ae:	1d1a      	adds	r2, r3, #4
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	6032      	str	r2, [r6, #0]
 80046b4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80046b8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80046bc:	2301      	movs	r3, #1
 80046be:	e09c      	b.n	80047fa <_printf_i+0x1e6>
 80046c0:	6833      	ldr	r3, [r6, #0]
 80046c2:	6820      	ldr	r0, [r4, #0]
 80046c4:	1d19      	adds	r1, r3, #4
 80046c6:	6031      	str	r1, [r6, #0]
 80046c8:	0606      	lsls	r6, r0, #24
 80046ca:	d501      	bpl.n	80046d0 <_printf_i+0xbc>
 80046cc:	681d      	ldr	r5, [r3, #0]
 80046ce:	e003      	b.n	80046d8 <_printf_i+0xc4>
 80046d0:	0645      	lsls	r5, r0, #25
 80046d2:	d5fb      	bpl.n	80046cc <_printf_i+0xb8>
 80046d4:	f9b3 5000 	ldrsh.w	r5, [r3]
 80046d8:	2d00      	cmp	r5, #0
 80046da:	da03      	bge.n	80046e4 <_printf_i+0xd0>
 80046dc:	232d      	movs	r3, #45	@ 0x2d
 80046de:	426d      	negs	r5, r5
 80046e0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80046e4:	4858      	ldr	r0, [pc, #352]	@ (8004848 <_printf_i+0x234>)
 80046e6:	230a      	movs	r3, #10
 80046e8:	e011      	b.n	800470e <_printf_i+0xfa>
 80046ea:	6821      	ldr	r1, [r4, #0]
 80046ec:	6833      	ldr	r3, [r6, #0]
 80046ee:	0608      	lsls	r0, r1, #24
 80046f0:	f853 5b04 	ldr.w	r5, [r3], #4
 80046f4:	d402      	bmi.n	80046fc <_printf_i+0xe8>
 80046f6:	0649      	lsls	r1, r1, #25
 80046f8:	bf48      	it	mi
 80046fa:	b2ad      	uxthmi	r5, r5
 80046fc:	2f6f      	cmp	r7, #111	@ 0x6f
 80046fe:	4852      	ldr	r0, [pc, #328]	@ (8004848 <_printf_i+0x234>)
 8004700:	6033      	str	r3, [r6, #0]
 8004702:	bf14      	ite	ne
 8004704:	230a      	movne	r3, #10
 8004706:	2308      	moveq	r3, #8
 8004708:	2100      	movs	r1, #0
 800470a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800470e:	6866      	ldr	r6, [r4, #4]
 8004710:	60a6      	str	r6, [r4, #8]
 8004712:	2e00      	cmp	r6, #0
 8004714:	db05      	blt.n	8004722 <_printf_i+0x10e>
 8004716:	6821      	ldr	r1, [r4, #0]
 8004718:	432e      	orrs	r6, r5
 800471a:	f021 0104 	bic.w	r1, r1, #4
 800471e:	6021      	str	r1, [r4, #0]
 8004720:	d04b      	beq.n	80047ba <_printf_i+0x1a6>
 8004722:	4616      	mov	r6, r2
 8004724:	fbb5 f1f3 	udiv	r1, r5, r3
 8004728:	fb03 5711 	mls	r7, r3, r1, r5
 800472c:	5dc7      	ldrb	r7, [r0, r7]
 800472e:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8004732:	462f      	mov	r7, r5
 8004734:	42bb      	cmp	r3, r7
 8004736:	460d      	mov	r5, r1
 8004738:	d9f4      	bls.n	8004724 <_printf_i+0x110>
 800473a:	2b08      	cmp	r3, #8
 800473c:	d10b      	bne.n	8004756 <_printf_i+0x142>
 800473e:	6823      	ldr	r3, [r4, #0]
 8004740:	07df      	lsls	r7, r3, #31
 8004742:	d508      	bpl.n	8004756 <_printf_i+0x142>
 8004744:	6923      	ldr	r3, [r4, #16]
 8004746:	6861      	ldr	r1, [r4, #4]
 8004748:	4299      	cmp	r1, r3
 800474a:	bfde      	ittt	le
 800474c:	2330      	movle	r3, #48	@ 0x30
 800474e:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004752:	f106 36ff 	addle.w	r6, r6, #4294967295
 8004756:	1b92      	subs	r2, r2, r6
 8004758:	6122      	str	r2, [r4, #16]
 800475a:	f8cd a000 	str.w	sl, [sp]
 800475e:	464b      	mov	r3, r9
 8004760:	aa03      	add	r2, sp, #12
 8004762:	4621      	mov	r1, r4
 8004764:	4640      	mov	r0, r8
 8004766:	f7ff fee7 	bl	8004538 <_printf_common>
 800476a:	3001      	adds	r0, #1
 800476c:	d14a      	bne.n	8004804 <_printf_i+0x1f0>
 800476e:	f04f 30ff 	mov.w	r0, #4294967295
 8004772:	b004      	add	sp, #16
 8004774:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004778:	6823      	ldr	r3, [r4, #0]
 800477a:	f043 0320 	orr.w	r3, r3, #32
 800477e:	6023      	str	r3, [r4, #0]
 8004780:	4832      	ldr	r0, [pc, #200]	@ (800484c <_printf_i+0x238>)
 8004782:	2778      	movs	r7, #120	@ 0x78
 8004784:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8004788:	6823      	ldr	r3, [r4, #0]
 800478a:	6831      	ldr	r1, [r6, #0]
 800478c:	061f      	lsls	r7, r3, #24
 800478e:	f851 5b04 	ldr.w	r5, [r1], #4
 8004792:	d402      	bmi.n	800479a <_printf_i+0x186>
 8004794:	065f      	lsls	r7, r3, #25
 8004796:	bf48      	it	mi
 8004798:	b2ad      	uxthmi	r5, r5
 800479a:	6031      	str	r1, [r6, #0]
 800479c:	07d9      	lsls	r1, r3, #31
 800479e:	bf44      	itt	mi
 80047a0:	f043 0320 	orrmi.w	r3, r3, #32
 80047a4:	6023      	strmi	r3, [r4, #0]
 80047a6:	b11d      	cbz	r5, 80047b0 <_printf_i+0x19c>
 80047a8:	2310      	movs	r3, #16
 80047aa:	e7ad      	b.n	8004708 <_printf_i+0xf4>
 80047ac:	4826      	ldr	r0, [pc, #152]	@ (8004848 <_printf_i+0x234>)
 80047ae:	e7e9      	b.n	8004784 <_printf_i+0x170>
 80047b0:	6823      	ldr	r3, [r4, #0]
 80047b2:	f023 0320 	bic.w	r3, r3, #32
 80047b6:	6023      	str	r3, [r4, #0]
 80047b8:	e7f6      	b.n	80047a8 <_printf_i+0x194>
 80047ba:	4616      	mov	r6, r2
 80047bc:	e7bd      	b.n	800473a <_printf_i+0x126>
 80047be:	6833      	ldr	r3, [r6, #0]
 80047c0:	6825      	ldr	r5, [r4, #0]
 80047c2:	6961      	ldr	r1, [r4, #20]
 80047c4:	1d18      	adds	r0, r3, #4
 80047c6:	6030      	str	r0, [r6, #0]
 80047c8:	062e      	lsls	r6, r5, #24
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	d501      	bpl.n	80047d2 <_printf_i+0x1be>
 80047ce:	6019      	str	r1, [r3, #0]
 80047d0:	e002      	b.n	80047d8 <_printf_i+0x1c4>
 80047d2:	0668      	lsls	r0, r5, #25
 80047d4:	d5fb      	bpl.n	80047ce <_printf_i+0x1ba>
 80047d6:	8019      	strh	r1, [r3, #0]
 80047d8:	2300      	movs	r3, #0
 80047da:	6123      	str	r3, [r4, #16]
 80047dc:	4616      	mov	r6, r2
 80047de:	e7bc      	b.n	800475a <_printf_i+0x146>
 80047e0:	6833      	ldr	r3, [r6, #0]
 80047e2:	1d1a      	adds	r2, r3, #4
 80047e4:	6032      	str	r2, [r6, #0]
 80047e6:	681e      	ldr	r6, [r3, #0]
 80047e8:	6862      	ldr	r2, [r4, #4]
 80047ea:	2100      	movs	r1, #0
 80047ec:	4630      	mov	r0, r6
 80047ee:	f7fb fcf7 	bl	80001e0 <memchr>
 80047f2:	b108      	cbz	r0, 80047f8 <_printf_i+0x1e4>
 80047f4:	1b80      	subs	r0, r0, r6
 80047f6:	6060      	str	r0, [r4, #4]
 80047f8:	6863      	ldr	r3, [r4, #4]
 80047fa:	6123      	str	r3, [r4, #16]
 80047fc:	2300      	movs	r3, #0
 80047fe:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004802:	e7aa      	b.n	800475a <_printf_i+0x146>
 8004804:	6923      	ldr	r3, [r4, #16]
 8004806:	4632      	mov	r2, r6
 8004808:	4649      	mov	r1, r9
 800480a:	4640      	mov	r0, r8
 800480c:	47d0      	blx	sl
 800480e:	3001      	adds	r0, #1
 8004810:	d0ad      	beq.n	800476e <_printf_i+0x15a>
 8004812:	6823      	ldr	r3, [r4, #0]
 8004814:	079b      	lsls	r3, r3, #30
 8004816:	d413      	bmi.n	8004840 <_printf_i+0x22c>
 8004818:	68e0      	ldr	r0, [r4, #12]
 800481a:	9b03      	ldr	r3, [sp, #12]
 800481c:	4298      	cmp	r0, r3
 800481e:	bfb8      	it	lt
 8004820:	4618      	movlt	r0, r3
 8004822:	e7a6      	b.n	8004772 <_printf_i+0x15e>
 8004824:	2301      	movs	r3, #1
 8004826:	4632      	mov	r2, r6
 8004828:	4649      	mov	r1, r9
 800482a:	4640      	mov	r0, r8
 800482c:	47d0      	blx	sl
 800482e:	3001      	adds	r0, #1
 8004830:	d09d      	beq.n	800476e <_printf_i+0x15a>
 8004832:	3501      	adds	r5, #1
 8004834:	68e3      	ldr	r3, [r4, #12]
 8004836:	9903      	ldr	r1, [sp, #12]
 8004838:	1a5b      	subs	r3, r3, r1
 800483a:	42ab      	cmp	r3, r5
 800483c:	dcf2      	bgt.n	8004824 <_printf_i+0x210>
 800483e:	e7eb      	b.n	8004818 <_printf_i+0x204>
 8004840:	2500      	movs	r5, #0
 8004842:	f104 0619 	add.w	r6, r4, #25
 8004846:	e7f5      	b.n	8004834 <_printf_i+0x220>
 8004848:	08004985 	.word	0x08004985
 800484c:	08004996 	.word	0x08004996

08004850 <memmove>:
 8004850:	4288      	cmp	r0, r1
 8004852:	b510      	push	{r4, lr}
 8004854:	eb01 0402 	add.w	r4, r1, r2
 8004858:	d902      	bls.n	8004860 <memmove+0x10>
 800485a:	4284      	cmp	r4, r0
 800485c:	4623      	mov	r3, r4
 800485e:	d807      	bhi.n	8004870 <memmove+0x20>
 8004860:	1e43      	subs	r3, r0, #1
 8004862:	42a1      	cmp	r1, r4
 8004864:	d008      	beq.n	8004878 <memmove+0x28>
 8004866:	f811 2b01 	ldrb.w	r2, [r1], #1
 800486a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800486e:	e7f8      	b.n	8004862 <memmove+0x12>
 8004870:	4402      	add	r2, r0
 8004872:	4601      	mov	r1, r0
 8004874:	428a      	cmp	r2, r1
 8004876:	d100      	bne.n	800487a <memmove+0x2a>
 8004878:	bd10      	pop	{r4, pc}
 800487a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800487e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8004882:	e7f7      	b.n	8004874 <memmove+0x24>

08004884 <_sbrk_r>:
 8004884:	b538      	push	{r3, r4, r5, lr}
 8004886:	4d06      	ldr	r5, [pc, #24]	@ (80048a0 <_sbrk_r+0x1c>)
 8004888:	2300      	movs	r3, #0
 800488a:	4604      	mov	r4, r0
 800488c:	4608      	mov	r0, r1
 800488e:	602b      	str	r3, [r5, #0]
 8004890:	f7fc fb3a 	bl	8000f08 <_sbrk>
 8004894:	1c43      	adds	r3, r0, #1
 8004896:	d102      	bne.n	800489e <_sbrk_r+0x1a>
 8004898:	682b      	ldr	r3, [r5, #0]
 800489a:	b103      	cbz	r3, 800489e <_sbrk_r+0x1a>
 800489c:	6023      	str	r3, [r4, #0]
 800489e:	bd38      	pop	{r3, r4, r5, pc}
 80048a0:	20000308 	.word	0x20000308

080048a4 <memcpy>:
 80048a4:	440a      	add	r2, r1
 80048a6:	4291      	cmp	r1, r2
 80048a8:	f100 33ff 	add.w	r3, r0, #4294967295
 80048ac:	d100      	bne.n	80048b0 <memcpy+0xc>
 80048ae:	4770      	bx	lr
 80048b0:	b510      	push	{r4, lr}
 80048b2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80048b6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80048ba:	4291      	cmp	r1, r2
 80048bc:	d1f9      	bne.n	80048b2 <memcpy+0xe>
 80048be:	bd10      	pop	{r4, pc}

080048c0 <_realloc_r>:
 80048c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80048c4:	4607      	mov	r7, r0
 80048c6:	4614      	mov	r4, r2
 80048c8:	460d      	mov	r5, r1
 80048ca:	b921      	cbnz	r1, 80048d6 <_realloc_r+0x16>
 80048cc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80048d0:	4611      	mov	r1, r2
 80048d2:	f7ff bc4d 	b.w	8004170 <_malloc_r>
 80048d6:	b92a      	cbnz	r2, 80048e4 <_realloc_r+0x24>
 80048d8:	f7ff fbde 	bl	8004098 <_free_r>
 80048dc:	4625      	mov	r5, r4
 80048de:	4628      	mov	r0, r5
 80048e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80048e4:	f000 f81a 	bl	800491c <_malloc_usable_size_r>
 80048e8:	4284      	cmp	r4, r0
 80048ea:	4606      	mov	r6, r0
 80048ec:	d802      	bhi.n	80048f4 <_realloc_r+0x34>
 80048ee:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80048f2:	d8f4      	bhi.n	80048de <_realloc_r+0x1e>
 80048f4:	4621      	mov	r1, r4
 80048f6:	4638      	mov	r0, r7
 80048f8:	f7ff fc3a 	bl	8004170 <_malloc_r>
 80048fc:	4680      	mov	r8, r0
 80048fe:	b908      	cbnz	r0, 8004904 <_realloc_r+0x44>
 8004900:	4645      	mov	r5, r8
 8004902:	e7ec      	b.n	80048de <_realloc_r+0x1e>
 8004904:	42b4      	cmp	r4, r6
 8004906:	4622      	mov	r2, r4
 8004908:	4629      	mov	r1, r5
 800490a:	bf28      	it	cs
 800490c:	4632      	movcs	r2, r6
 800490e:	f7ff ffc9 	bl	80048a4 <memcpy>
 8004912:	4629      	mov	r1, r5
 8004914:	4638      	mov	r0, r7
 8004916:	f7ff fbbf 	bl	8004098 <_free_r>
 800491a:	e7f1      	b.n	8004900 <_realloc_r+0x40>

0800491c <_malloc_usable_size_r>:
 800491c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004920:	1f18      	subs	r0, r3, #4
 8004922:	2b00      	cmp	r3, #0
 8004924:	bfbc      	itt	lt
 8004926:	580b      	ldrlt	r3, [r1, r0]
 8004928:	18c0      	addlt	r0, r0, r3
 800492a:	4770      	bx	lr

0800492c <_init>:
 800492c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800492e:	bf00      	nop
 8004930:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004932:	bc08      	pop	{r3}
 8004934:	469e      	mov	lr, r3
 8004936:	4770      	bx	lr

08004938 <_fini>:
 8004938:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800493a:	bf00      	nop
 800493c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800493e:	bc08      	pop	{r3}
 8004940:	469e      	mov	lr, r3
 8004942:	4770      	bx	lr
